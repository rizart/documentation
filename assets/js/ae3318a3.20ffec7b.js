(window.webpackJsonp=window.webpackJsonp||[]).push([[247],{317:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return a})),n.d(t,"metadata",(function(){return c})),n.d(t,"toc",(function(){return b})),n.d(t,"default",(function(){return d}));var r=n(3),o=n(7),i=(n(0),n(451)),l=["components"],a={title:"UploadClient"},c={unversionedId:"client_api/uploadclient",id:"client_api/uploadclient",isDocsHomePage:!1,title:"UploadClient",description:"\\\\init\\\\",source:"@site/../docs/client_api/uploadclient.md",sourceDirName:"client_api",slug:"/client_api/uploadclient",permalink:"/documentation/client_api/uploadclient",editUrl:"https://github.com/rucio/documentation/tree/main/docs/../docs/client_api/uploadclient.md",version:"current",frontMatter:{title:"UploadClient"},sidebar:"docs",previous:{title:"TouchClient",permalink:"/documentation/client_api/touchclient"},next:{title:"Installing Rucio Server",permalink:"/documentation/installing_server"}},b=[{value:"__init__",id:"__init__",children:[]},{value:"upload",id:"upload",children:[]},{value:"preferred_impl",id:"preferred_impl",children:[]}],p={toc:b};function d(e){var t=e.components,n=Object(o.a)(e,l);return Object(i.b)("wrapper",Object(r.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h2",{id:"__init__"},"_","_","init","_","_"),Object(i.b)("span",{style:{"white-space":"pre"}},Object(i.b)("p",null,"Initialises the basic settings for an UploadClient object"),Object(i.b)("table",{style:{border:"none"}},Object(i.b)("tbody",null,Object(i.b)("tr",{style:{border:"none"}},Object(i.b)("td",{style:{border:"none",backgroundColor:"white",verticalAlign:"top"}},Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":")),Object(i.b)("td",{style:{border:"none",backgroundColor:"white",verticalAlign:"top"}},Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"_client"),": - Optional: rucio.client.client.Client object. If None, a new object will be created."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"logger"),": - Optional: logging.Logger object. If None, default logger will be used.")))))),Object(i.b)("h2",{id:"upload"},"upload"),Object(i.b)("span",{style:{"white-space":"pre"}},Object(i.b)("table",{style:{border:"none"}},Object(i.b)("tbody",null,Object(i.b)("tr",{style:{border:"none"}},Object(i.b)("td",{style:{border:"none",backgroundColor:"white",verticalAlign:"top"}},Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":")),Object(i.b)("td",{style:{border:"none",backgroundColor:"white",verticalAlign:"top"}},Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"items"),": List of dictionaries. Each dictionary describing a file to upload. Keys:\npath                  - path of the file that will be uploaded\nrse                   - rse expression/name (e.g. 'CERN-PROD_DATADISK') where to upload the file\ndid_scope             - Optional: custom did scope (Default: user.\\<account",">",")\ndid_name              - Optional: custom did name (Default: name of the file)\ndataset_scope         - Optional: custom dataset scope\ndataset_name          - Optional: custom dataset name\ndataset_meta          - Optional: custom metadata for dataset\nimpl                  - Optional: name of the protocol implementation to be used to upload this item.\nforce_scheme          - Optional: force a specific scheme (if PFN upload this will be overwritten) (Default: None)\npfn                   - Optional: use a given PFN (this sets no_register to True, and no_register becomes mandatory)\nno_register           - Optional: if True, the file will not be registered in the rucio catalogue\nregister_after_upload - Optional: if True, the file will be registered after successful upload\nlifetime              - Optional: the lifetime of the file after it was uploaded\ntransfer_timeout      - Optional: time after the upload will be aborted\nguid                  - Optional: guid of the file\nrecursive             - Optional: if set, parses the folder structure recursively into collections"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"summary_file_path"),": Optional: a path where a summary in form of a json file will be stored"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"traces_copy_out"),": reference to an external list, where the traces should be uploaded"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"ignore_availability"),": ignore the availability of a RSE"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"activity"),": the activity set to the rule if no dataset is specified"))),Object(i.b)("tr",{style:{border:"none"}},Object(i.b)("td",{style:{border:"none",backgroundColor:"white",verticalAlign:"top"}},Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Raises"),":")),Object(i.b)("td",{style:{border:"none",backgroundColor:"white",verticalAlign:"top"}},Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"InputValidationError"),": if any input arguments are in a wrong format"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"RSEWriteBlocked"),": if a given RSE is not available for writing"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"NoFilesUploaded"),": if no files were successfully uploaded"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"NotAllFilesUploaded"),": if not all files were successfully uploaded"))),Object(i.b)("tr",{style:{border:"none"}},Object(i.b)("td",{style:{border:"none",backgroundColor:"white",verticalAlign:"top"}},Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Returns"),":")),Object(i.b)("td",{style:{border:"none",backgroundColor:"white",verticalAlign:"top"}},Object(i.b)("p",null,"  0 on success")))))),Object(i.b)("h2",{id:"preferred_impl"},"preferred","_","impl"),Object(i.b)("span",{style:{"white-space":"pre"}},Object(i.b)("p",null,"Finds the optimum protocol impl preferred by the client and"),Object(i.b)("p",null,"supported by the remote RSE."),Object(i.b)("table",{style:{border:"none"}},Object(i.b)("tbody",null,Object(i.b)("tr",{style:{border:"none"}},Object(i.b)("td",{style:{border:"none",backgroundColor:"white",verticalAlign:"top"}},Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":")),Object(i.b)("td",{style:{border:"none",backgroundColor:"white",verticalAlign:"top"}},Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"rse_settings"),": dictionary containing the RSE settings"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"domain"),": The network domain, either 'wan' (default) or 'lan'"))),Object(i.b)("tr",{style:{border:"none"}},Object(i.b)("td",{style:{border:"none",backgroundColor:"white",verticalAlign:"top"}},Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Raises"),":")),Object(i.b)("td",{style:{border:"none",backgroundColor:"white",verticalAlign:"top"}},Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"RucioException(msg)"),": general exception with msg for more details.")))))))}d.isMDXComponent=!0},451:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return O}));var r=n(0),o=n.n(r);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var b=o.a.createContext({}),p=function(e){var t=o.a.useContext(b),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},d=function(e){var t=p(e.components);return o.a.createElement(b.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},u=o.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,b=c(e,["components","mdxType","originalType","parentName"]),d=p(n),u=r,O=d["".concat(l,".").concat(u)]||d[u]||s[u]||i;return n?o.a.createElement(O,a(a({ref:t},b),{},{components:n})):o.a.createElement(O,a({ref:t},b))}));function O(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=u;var a={};for(var c in t)hasOwnProperty.call(t,c)&&(a[c]=t[c]);a.originalType=e,a.mdxType="string"==typeof e?e:r,l[1]=a;for(var b=2;b<i;b++)l[b]=n[b];return o.a.createElement.apply(null,l)}return o.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);