components:
  securitySchemes:
    AuthToken:
      description: The Rucio Token obtained by one of the /auth endpoints.
      in: header
      name: X-Rucio-Auth-Token
      type: apiKey
info:
  description: >
    Each resource can be accessed or modified using specially

    formed URLs and the standard HTTP methods:


    - GET to read


    - POST to create


    - PUT to update


    - DELETE to remove


    We require that all requests are done over SSL. The API supports JSON

    formats. Rucio uses [OAuth](http://oauth.net/) to authenticate all API

    requests. The method is to get an authentication token, and use it for the
    rest

    of the requests. Descriptions of the actions you may perform on each
    resource

    can be found below.


    ### Date format


    All dates returned are in UTC and are strings in the following format (RFC
    1123,

    ex RFC 822):


    ```

    Mon, 13 May 2013 10:23:03 UTC

    ```


    In code format, which can be used in all programming languages that support

    strftime or strptime:


    ```

    %a, %d %b %Y %H:%M:%S UTC

    ```


    ### SSL only


    We require that all requests(except for the ping) are done over SSL.


    ### Response formats


    The currently-available response format for all REST endpoints is the

    string-based format JavaScript Object

    Notation([JSON](http://www.json.org/)). The server answer can be one of the

    following content-type in the http Header:


    ```text

    Content-type: application/json

    Content-Type: application/x-json-stream

    ```


    In the last case, it corresponds to JSON objects delimited by
    newlines(streaming

    JSON for large answer), e.g.:


    ```

    { "id": 1, "foo": "bar" } { "id": 2, "foo": "baz" } ...

    ```


    ### Error handling


    Errors are returned using standard HTTP error code syntax.  Any additional
    info

    is included in the header of the return call, JSON-formatted with the

    parameters:


    ```

    ExceptionClass ExceptionMessage

    ```


    Where ExceptionClass refers to [`Rucio

    Exceptions`](https://github.com/rucio/rucio/blob/58efd21b5e21182df80bef3dbe8befa636e440b8/lib/rucio/common/exception.py).
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  title: Rucio
  version: 1.30.0
  x-logo:
    altText: Rucio logo
    backgroundColor: '#FFFFFF'
    url: >-
      http://rucio.cern.ch/documentation/img/rucio_horizontaled_black_cropped.svg
openapi: 3.0.2
paths:
  /static/{filename}: {}
  /accountlimits/local/{account}/{rse}:
    delete:
      parameters:
        - description: The account for the accountlimit.
          in: path
          name: account
          required: true
          schema:
            type: string
          style: simple
        - description: The rse for the accountlimit.
          in: path
          name: rse
          required: true
          schema:
            type: string
          style: simple
      responses:
        '200':
          description: OK
        '401':
          description: Invalid Auth Token
        '404':
          description: No RSE or account found for the given id.
      summary: Delete a local account limit
      tags:
        - Account Limit
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url http://undefinedundefined/accountlimits/local/{account}/{rse} \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: >-
            import requests


            url =
            "http://undefinedundefined/accountlimits/local/{account}/{rse}"


            headers = {"X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"}


            response = requests.request("DELETE", url, headers=headers)


            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'http://undefinedundefined/accountlimits/local/{account}/{rse}';


            let options = {method: 'DELETE', headers: {'X-Rucio-Auth-Token':
            'REPLACE_KEY_VALUE'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
    post:
      parameters:
        - description: The account for the accountlimit.
          in: path
          name: account
          required: true
          schema:
            type: string
          style: simple
        - description: The rse for the accountlimit.
          in: path
          name: rse
          required: true
          schema:
            type: string
          style: simple
      requestBody:
        content:
          application/json:
            schema:
              properties:
                bytes:
                  description: The new limit in bytes.
                  type: integer
              required:
                - bytes
              type: object
      responses:
        '201':
          content:
            application/json:
              schema:
                enum:
                  - Created
                type: string
          description: OK
        '401':
          description: Invalid Auth Token
        '404':
          description: No RSE or account found for the given id.
      summary: Create or update a local accont limit
      tags:
        - Account Limit
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request POST \
              --url http://undefinedundefined/accountlimits/local/{account}/{rse} \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE' \
              --header 'content-type: application/json' \
              --data '{"bytes":0}'
        - lang: Python
          source: >-
            import requests


            url =
            "http://undefinedundefined/accountlimits/local/{account}/{rse}"


            payload = {"bytes": 0}

            headers = {
                "X-Rucio-Auth-Token": "REPLACE_KEY_VALUE",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'http://undefinedundefined/accountlimits/local/{account}/{rse}';


            let options = {
              method: 'POST',
              headers: {'X-Rucio-Auth-Token': 'REPLACE_KEY_VALUE', 'content-type': 'application/json'},
              body: '{"bytes":0}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /accountlimits/global/{account}/{rse_expression}:
    delete:
      parameters:
        - description: The account for the accountlimit.
          in: path
          name: account
          required: true
          schema:
            type: string
          style: simple
        - description: The rse expression for the accountlimit.
          in: path
          name: rse_expression
          required: true
          schema:
            type: string
          style: simple
      responses:
        '200':
          description: OK
        '401':
          description: Invalid Auth Token
        '404':
          description: No RSE or account found for the given id.
      summary: Delete a global account limit
      tags:
        - Account Limit
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url http://undefinedundefined/accountlimits/global/{account}/{rse_expression} \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: >-
            import requests


            url =
            "http://undefinedundefined/accountlimits/global/{account}/{rse_expression}"


            headers = {"X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"}


            response = requests.request("DELETE", url, headers=headers)


            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'http://undefinedundefined/accountlimits/global/{account}/{rse_expression}';


            let options = {method: 'DELETE', headers: {'X-Rucio-Auth-Token':
            'REPLACE_KEY_VALUE'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
    post:
      parameters:
        - description: The account for the accountlimit.
          in: path
          name: account
          required: true
          schema:
            type: string
          style: simple
        - description: The rse expression for the accountlimit.
          in: path
          name: rse_expression
          required: true
          schema:
            type: string
          style: simple
      requestBody:
        content:
          application/json:
            schema:
              properties:
                bytes:
                  description: The new limit in bytes.
                  type: integer
              required:
                - bytes
              type: object
      responses:
        '201':
          content:
            application/json:
              schema:
                enum:
                  - Created
                type: string
          description: OK
        '401':
          description: Invalid Auth Token
        '404':
          description: No RSE or account found for the given id.
      summary: Create or update a global account limit
      tags:
        - Account Limit
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request POST \
              --url http://undefinedundefined/accountlimits/global/{account}/{rse_expression} \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE' \
              --header 'content-type: application/json' \
              --data '{"bytes":0}'
        - lang: Python
          source: >-
            import requests


            url =
            "http://undefinedundefined/accountlimits/global/{account}/{rse_expression}"


            payload = {"bytes": 0}

            headers = {
                "X-Rucio-Auth-Token": "REPLACE_KEY_VALUE",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'http://undefinedundefined/accountlimits/global/{account}/{rse_expression}';


            let options = {
              method: 'POST',
              headers: {'X-Rucio-Auth-Token': 'REPLACE_KEY_VALUE', 'content-type': 'application/json'},
              body: '{"bytes":0}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /accounts/{account}/attr/{key}:
    delete:
      description: Delete an attribute of an account.
      parameters:
        - description: The account identifier.
          in: path
          name: account
          required: true
          schema:
            type: string
          style: simple
        - description: The key of the account attribute to remove.
          in: path
          name: key
          required: true
          schema:
            type: string
          style: simple
      responses:
        '200':
          description: OK
        '401':
          description: Invalid Auth Token
        '404':
          description: No account found for the given id.
      summary: Delete attribute
      tags:
        - Account
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url http://undefinedundefined/accounts/{account}/attr/{key} \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: |-
            import requests

            url = "http://undefinedundefined/accounts/{account}/attr/{key}"

            headers = {"X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"}

            response = requests.request("DELETE", url, headers=headers)

            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url = 'http://undefinedundefined/accounts/{account}/attr/{key}';


            let options = {method: 'DELETE', headers: {'X-Rucio-Auth-Token':
            'REPLACE_KEY_VALUE'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
    post:
      description: Create an attribute to an account.
      parameters:
        - description: The account identifier.
          in: path
          name: account
          required: true
          schema:
            type: string
          style: simple
        - description: The key of the account attribute.
          in: path
          name: key
          required: true
          schema:
            type: string
          style: simple
      requestBody:
        content:
          application/json:
            schema:
              properties:
                key:
                  description: >-
                    The key of the attribute. This would override the key
                    defined in path.
                  type: string
                value:
                  description: The value of the attribute.
                  type: string
              required:
                - value
              type: object
      responses:
        '201':
          content:
            application/json:
              schema:
                enum:
                  - Created
                type: string
          description: OK
        '401':
          description: Invalid Auth Token
        '404':
          description: No account found for the given id.
        '409':
          description: Attribute already exists
      summary: Create attribute
      tags:
        - Account
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request POST \
              --url http://undefinedundefined/accounts/{account}/attr/{key} \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE' \
              --header 'content-type: application/json' \
              --data '{"key":"string","value":"string"}'
        - lang: Python
          source: >-
            import requests


            url = "http://undefinedundefined/accounts/{account}/attr/{key}"


            payload = {
                "key": "string",
                "value": "string"
            }

            headers = {
                "X-Rucio-Auth-Token": "REPLACE_KEY_VALUE",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'http://undefinedundefined/accounts/{account}/attr/{key}';

            let options = {
              method: 'POST',
              headers: {'X-Rucio-Auth-Token': 'REPLACE_KEY_VALUE', 'content-type': 'application/json'},
              body: '{"key":"string","value":"string"}'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /accounts/{account}/scopes/{scope}:
    post:
      description: Creates a scopse with the given name for an account.
      parameters:
        - description: The account identifier.
          in: path
          name: account
          required: true
          schema:
            type: string
          style: simple
        - description: The scope name.
          in: path
          name: scope
          required: true
          schema:
            type: string
          style: simple
      responses:
        '201':
          content:
            application/json:
              schema:
                enum:
                  - Created
                type: string
          description: OK
        '400':
          description: Not acceptable
        '401':
          description: Invalid Auth Token
        '404':
          description: No account found.
        '409':
          description: Scope already exists.
      summary: Create scope
      tags:
        - Account
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request POST \
              --url http://undefinedundefined/accounts/{account}/scopes/{scope} \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: |-
            import requests

            url = "http://undefinedundefined/accounts/{account}/scopes/{scope}"

            headers = {"X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"}

            response = requests.request("POST", url, headers=headers)

            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'http://undefinedundefined/accounts/{account}/scopes/{scope}';


            let options = {method: 'POST', headers: {'X-Rucio-Auth-Token':
            'REPLACE_KEY_VALUE'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /accounts/{account}/limits/local/{rse}:
    get:
      description: Get the current local limits for an account on a specific RSE.
      parameters:
        - description: The account identifier.
          in: path
          name: account
          required: true
          schema:
            type: string
          style: simple
        - description: The rse identifier.
          in: path
          name: rse
          required: true
          schema:
            type: string
          style: simple
      responses:
        '200':
          content:
            application/json:
              schema:
                description: >-
                  Json object with rse identifiers as keys and account limits in
                  bytes as values.
                type: object
          description: OK
        '401':
          description: Invalid Auth Token
        '404':
          description: RSE not found
        '406':
          description: Not Acceptable
      summary: Get local limit
      tags:
        - Account
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url http://undefinedundefined/accounts/{account}/limits/local/{rse} \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: >-
            import requests


            url =
            "http://undefinedundefined/accounts/{account}/limits/local/{rse}"


            headers = {"X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'http://undefinedundefined/accounts/{account}/limits/local/{rse}';


            let options = {method: 'GET', headers: {'X-Rucio-Auth-Token':
            'REPLACE_KEY_VALUE'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /accounts/{account}/limits/global/{rse_expression}:
    get:
      description: >-
        Get the current gloabl limits for an account on a specific RSE
        expression.
      parameters:
        - description: The account identifier.
          in: path
          name: account
          required: true
          schema:
            type: string
          style: simple
        - description: The rse identifier.
          in: path
          name: rse_expression
          required: true
          schema:
            type: string
          style: simple
      responses:
        '200':
          content:
            application/json:
              schema:
                description: >-
                  Json object with rse expression as keys and limits in bytes as
                  values.
                type: object
          description: OK
        '401':
          description: Invalid Auth Token
        '404':
          description: RSE not found
        '406':
          description: Not Acceptable
      summary: Get gloabl limit
      tags:
        - Account
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url http://undefinedundefined/accounts/{account}/limits/global/{rse_expression} \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: >-
            import requests


            url =
            "http://undefinedundefined/accounts/{account}/limits/global/{rse_expression}"


            headers = {"X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'http://undefinedundefined/accounts/{account}/limits/global/{rse_expression}';


            let options = {method: 'GET', headers: {'X-Rucio-Auth-Token':
            'REPLACE_KEY_VALUE'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /accounts/{account}/identities:
    delete:
      description: Delete an account identity.
      parameters:
        - description: The account identifier.
          in: path
          name: account
          required: true
          schema:
            type: string
          style: simple
      requestBody:
        content:
          application/json:
            schema:
              properties:
                authtype:
                  description: The authtype.
                  type: string
                identity:
                  description: The identity.
                  type: string
              required:
                - identity
                - authtype
              type: object
      responses:
        '200':
          description: OK
        '401':
          description: Invalid Auth Token
        '404':
          description: Account or identity not found
      summary: Delete identity
      tags:
        - Account
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url http://undefinedundefined/accounts/{account}/identities \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE' \
              --header 'content-type: application/json' \
              --data '{"authtype":"string","identity":"string"}'
        - lang: Python
          source: >-
            import requests


            url = "http://undefinedundefined/accounts/{account}/identities"


            payload = {
                "authtype": "string",
                "identity": "string"
            }

            headers = {
                "X-Rucio-Auth-Token": "REPLACE_KEY_VALUE",
                "content-type": "application/json"
            }


            response = requests.request("DELETE", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'http://undefinedundefined/accounts/{account}/identities';

            let options = {
              method: 'DELETE',
              headers: {'X-Rucio-Auth-Token': 'REPLACE_KEY_VALUE', 'content-type': 'application/json'},
              body: '{"authtype":"string","identity":"string"}'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
    post:
      description: Grant an account identity access to an account.
      parameters:
        - description: The account identifier.
          in: path
          name: account
          required: true
          schema:
            type: string
          style: simple
      requestBody:
        content:
          application/json:
            schema:
              properties:
                authtype:
                  description: The authtype.
                  type: string
                default:
                  default: false
                  description: Should this be the default account?
                  type: string
                email:
                  description: The email.
                  type: string
                identity:
                  description: The identity.
                  type: string
                password:
                  default: none
                  description: The password.
                  type: string
              required:
                - identity
                - authtype
                - email
              type: object
      responses:
        '201':
          content:
            application/json:
              schema:
                enum:
                  - Created
                type: string
          description: OK
        '400':
          description: Parameter missing
        '401':
          description: Invalid Auth Token
        '404':
          description: Account not found
        '409':
          description: Already exists
      summary: Create identity
      tags:
        - Account
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request POST \
              --url http://undefinedundefined/accounts/{account}/identities \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE' \
              --header 'content-type: application/json' \
              --data '{"authtype":"string","default":false,"email":"string","identity":"string","password":"none"}'
        - lang: Python
          source: >-
            import requests


            url = "http://undefinedundefined/accounts/{account}/identities"


            payload = {
                "authtype": "string",
                "default": False,
                "email": "string",
                "identity": "string",
                "password": "none"
            }

            headers = {
                "X-Rucio-Auth-Token": "REPLACE_KEY_VALUE",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'http://undefinedundefined/accounts/{account}/identities';

            let options = {
              method: 'POST',
              headers: {'X-Rucio-Auth-Token': 'REPLACE_KEY_VALUE', 'content-type': 'application/json'},
              body: '{"authtype":"string","default":false,"email":"string","identity":"string","password":"none"}'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
    get:
      description: Lists all identities for an account.
      parameters:
        - description: The account identifier.
          in: path
          name: account
          required: true
          schema:
            type: string
          style: simple
      responses:
        '200':
          content:
            application/x-json-stream:
              schema:
                items:
                  items:
                    type: string
                  maxItems: 2
                  minItems: 2
                  type: array
                type: array
          description: OK
        '401':
          description: Invalid Auth Token
        '404':
          description: Account not found
        '406':
          description: Not acceptable
      summary: List identities
      tags:
        - Account
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url http://undefinedundefined/accounts/{account}/identities \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: |-
            import requests

            url = "http://undefinedundefined/accounts/{account}/identities"

            headers = {"X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"}

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url = 'http://undefinedundefined/accounts/{account}/identities';


            let options = {method: 'GET', headers: {'X-Rucio-Auth-Token':
            'REPLACE_KEY_VALUE'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /accounts/{account}/rules:
    get:
      description: Lists all rules for an account.
      parameters:
        - description: The account identifier.
          in: path
          name: account
          required: true
          schema:
            type: string
          style: simple
      responses:
        '200':
          content:
            application/x-json-stream:
              schema:
                items:
                  type: string
                type: array
          description: OK
        '401':
          description: Invalid Auth Token
        '404':
          description: Account or rule not found
        '406':
          description: Not acceptable
      summary: List rules
      tags:
        - Account
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url http://undefinedundefined/accounts/{account}/rules \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: |-
            import requests

            url = "http://undefinedundefined/accounts/{account}/rules"

            headers = {"X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"}

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url = 'http://undefinedundefined/accounts/{account}/rules';


            let options = {method: 'GET', headers: {'X-Rucio-Auth-Token':
            'REPLACE_KEY_VALUE'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /accounts/{account}/usage/history/{rse}:
    get:
      description: Returns the account usage history.
      parameters:
        - description: The account identifier.
          in: path
          name: account
          required: true
          schema:
            type: string
          style: simple
        - description: The rse identifier.
          in: path
          name: rse
          required: true
          schema:
            type: string
          style: simple
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  properties:
                    bytes:
                      description: The number of bytes used.
                      type: integer
                    files:
                      description: The files.
                      type: string
                    updated_at:
                      description: When the data was provided.
                      type: string
                  type: object
                type: array
          description: OK
        '401':
          description: Invalid Auth Token
        '404':
          description: Account not found
        '406':
          description: Not acceptable
      summary: Get account usage history
      tags:
        - Account
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url http://undefinedundefined/accounts/{account}/usage/history/{rse} \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: >-
            import requests


            url =
            "http://undefinedundefined/accounts/{account}/usage/history/{rse}"


            headers = {"X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'http://undefinedundefined/accounts/{account}/usage/history/{rse}';


            let options = {method: 'GET', headers: {'X-Rucio-Auth-Token':
            'REPLACE_KEY_VALUE'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /accounts/{account}/usage/local/{rse}:
    get:
      description: Returns the local account usage.
      parameters:
        - description: The account identifier.
          in: path
          name: account
          required: true
          schema:
            type: string
          style: simple
        - description: The rse identifier.
          in: path
          name: rse
          required: true
          schema:
            type: string
          style: simple
      responses:
        '200':
          content:
            application/x-json-stream:
              schema:
                items:
                  properties:
                    bytes:
                      description: The number of bytes used.
                      type: integer
                    bytes_limit:
                      description: The maximum number of bytes.
                      type: integer
                    bytes_remaining:
                      description: The remaining number of bytes.
                      type: integer
                    rse_id:
                      description: The rse id.
                      type: string
                  type: object
                type: array
          description: OK
        '401':
          description: Invalid Auth Token
        '404':
          description: Account or rse not found
        '406':
          description: Not acceptable
      summary: Get local account usage
      tags:
        - Account
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url http://undefinedundefined/accounts/{account}/usage/local/{rse} \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: >-
            import requests


            url =
            "http://undefinedundefined/accounts/{account}/usage/local/{rse}"


            headers = {"X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'http://undefinedundefined/accounts/{account}/usage/local/{rse}';


            let options = {method: 'GET', headers: {'X-Rucio-Auth-Token':
            'REPLACE_KEY_VALUE'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /accounts/{account}/usage/global/{rse_expression}:
    get:
      description: Returns the local account usage.
      parameters:
        - description: The account identifier.
          in: path
          name: account
          required: true
          schema:
            type: string
          style: simple
        - description: The rse expression.
          in: path
          name: rse_expression
          required: true
          schema:
            type: string
          style: simple
      responses:
        '200':
          content:
            application/x-json-stream:
              schema:
                items:
                  properties:
                    bytes:
                      description: The number of bytes used.
                      type: integer
                    bytes_limit:
                      description: The maximum number of bytes.
                      type: integer
                    bytes_remaining:
                      description: The remaining number of bytes.
                      type: integer
                    rse_expression:
                      description: The rse expression.
                      type: string
                  type: object
                type: array
          description: OK
        '401':
          description: Invalid Auth Token
        '404':
          description: Account or rse not found
        '406':
          description: Not acceptable
      summary: Get local account usage
      tags:
        - Account
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url http://undefinedundefined/accounts/{account}/usage/global/{rse_expression} \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: >-
            import requests


            url =
            "http://undefinedundefined/accounts/{account}/usage/global/{rse_expression}"


            headers = {"X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'http://undefinedundefined/accounts/{account}/usage/global/{rse_expression}';


            let options = {method: 'GET', headers: {'X-Rucio-Auth-Token':
            'REPLACE_KEY_VALUE'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /accounts/{account}:
    put:
      description: Update a parameter for an account.
      parameters:
        - description: The account identifier.
          in: path
          name: account
          required: true
          schema:
            type: string
          style: simple
      requestBody:
        content:
          application/json:
            schema:
              description: >-
                Json object with key-value pairs corresponding to the new values
                of the parameters.
              type: object
      responses:
        '200':
          description: OK
        '400':
          description: Unknown status
        '401':
          description: Invalid Auth Token
        '404':
          description: No account found.
      summary: Update
      tags:
        - Account
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request PUT \
              --url http://undefinedundefined/accounts/{account} \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE' \
              --header 'content-type: application/json' \
              --data '{}'
        - lang: Python
          source: >-
            import requests


            url = "http://undefinedundefined/accounts/{account}"


            payload = {}

            headers = {
                "X-Rucio-Auth-Token": "REPLACE_KEY_VALUE",
                "content-type": "application/json"
            }


            response = requests.request("PUT", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'http://undefinedundefined/accounts/{account}';

            let options = {
              method: 'PUT',
              headers: {'X-Rucio-Auth-Token': 'REPLACE_KEY_VALUE', 'content-type': 'application/json'},
              body: '{}'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
    delete:
      description: Delete an account.
      parameters:
        - description: The account identifier.
          in: path
          name: account
          required: true
          schema:
            type: string
          style: simple
      responses:
        '201':
          description: OK
        '401':
          description: Invalid Auth Token
        '404':
          description: Account not found
      summary: Delete
      tags:
        - Account
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url http://undefinedundefined/accounts/{account} \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: |-
            import requests

            url = "http://undefinedundefined/accounts/{account}"

            headers = {"X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"}

            response = requests.request("DELETE", url, headers=headers)

            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url = 'http://undefinedundefined/accounts/{account}';


            let options = {method: 'DELETE', headers: {'X-Rucio-Auth-Token':
            'REPLACE_KEY_VALUE'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
    post:
      description: Create an account.
      parameters:
        - description: The account identifier.
          in: path
          name: account
          required: true
          schema:
            type: string
          style: simple
      requestBody:
        content:
          application/json:
            schema:
              properties:
                email:
                  description: The email for the account.
                  type: string
                type:
                  description: The account type.
                  enum:
                    - USER
                    - GROUP
                    - SERVICE
                  type: string
              required:
                - type
                - email
              type: object
      responses:
        '201':
          content:
            application/json:
              schema:
                enum:
                  - Created
                type: string
          description: OK
        '400':
          description: Unknown status
        '401':
          description: Invalid Auth Token
        '409':
          description: Account already exists
      summary: Create
      tags:
        - Account
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request POST \
              --url http://undefinedundefined/accounts/{account} \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE' \
              --header 'content-type: application/json' \
              --data '{"email":"string","type":"USER"}'
        - lang: Python
          source: >-
            import requests


            url = "http://undefinedundefined/accounts/{account}"


            payload = {
                "email": "string",
                "type": "USER"
            }

            headers = {
                "X-Rucio-Auth-Token": "REPLACE_KEY_VALUE",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'http://undefinedundefined/accounts/{account}';

            let options = {
              method: 'POST',
              headers: {'X-Rucio-Auth-Token': 'REPLACE_KEY_VALUE', 'content-type': 'application/json'},
              body: '{"email":"string","type":"USER"}'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
    get:
      description: Lists all parameters for an account.
      parameters:
        - description: The account identifier.
          in: path
          name: account
          required: true
          schema:
            type: string
          style: simple
      responses:
        '201':
          content:
            application/json:
              schema:
                properties:
                  account:
                    description: The account identifier.
                    type: string
                  account_type:
                    description: The account type.
                    type: string
                  deleted_at:
                    description: Datetime if the account was deleted.
                    type: string
                  email:
                    description: The email for the account.
                    type: string
                  status:
                    description: The account status.
                    type: string
                  suspended_at:
                    description: Datetime if the account was suspended.
                    type: string
                type: object
          description: OK
        '401':
          description: Invalid Auth Token
        '404':
          description: No account found.
        '406':
          description: Not acceptable
      summary: List account parameters
      tags:
        - Account
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url http://undefinedundefined/accounts/{account} \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: |-
            import requests

            url = "http://undefinedundefined/accounts/{account}"

            headers = {"X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"}

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url = 'http://undefinedundefined/accounts/{account}';


            let options = {method: 'GET', headers: {'X-Rucio-Auth-Token':
            'REPLACE_KEY_VALUE'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /accounts:
    get:
      description: List all accounts.
      responses:
        '200':
          content:
            application/x-json-stream:
              schema:
                items:
                  properties:
                    account:
                      description: The account identifier.
                      type: string
                    email:
                      description: The email.
                      type: string
                    type:
                      description: The type.
                      type: string
                  type: object
                type: array
          description: OK
        '401':
          description: Invalid Auth Token
      summary: List
      tags:
        - Account
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url http://undefinedundefined/accounts \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: |-
            import requests

            url = "http://undefinedundefined/accounts"

            headers = {"X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"}

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url = 'http://undefinedundefined/accounts';


            let options = {method: 'GET', headers: {'X-Rucio-Auth-Token':
            'REPLACE_KEY_VALUE'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /archives/{scope_name}/files:
    get:
      description: List archive contents.
      parameters:
        - description: The data identifier of the scope.
          in: path
          name: scope_name
          required: true
          schema:
            type: string
          style: simple
      responses:
        '201':
          content:
            application/x-json-stream:
              schema:
                items:
                  properties:
                    adler32:
                      description: The adler32 checksum.
                      type: string
                    bytes:
                      description: The number of bytes.
                      type: integer
                    md5:
                      description: The md5 checksum.
                      type: string
                    name:
                      description: The name of the did.
                      type: string
                    scope:
                      description: The scope of the did.
                      type: string
                  type: object
                type: array
          description: OK
        '400':
          description: Invalid value
        '406':
          description: Not acceptable
      summary: List
      tags:
        - Archive
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url http://undefinedundefined/archives/{scope_name}/files \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: |-
            import requests

            url = "http://undefinedundefined/archives/{scope_name}/files"

            headers = {"X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"}

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url = 'http://undefinedundefined/archives/{scope_name}/files';


            let options = {method: 'GET', headers: {'X-Rucio-Auth-Token':
            'REPLACE_KEY_VALUE'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /auth/userpass:
    options:
      description: UserPass Allow cross-site scripting. Explicit for Authentication.
      responses:
        '200':
          description: OK
          headers:
            Access-Control-Allow-Credentials:
              schema:
                enum:
                  - 'true'
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                enum:
                  - '*'
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Expose-Headers:
              schema:
                enum:
                  - X-Rucio-Auth-Token
                type: string
        '404':
          description: Not found
      summary: UserPass Allow cross-site scripting
      tags:
        - Auth
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request OPTIONS \
              --url http://undefinedundefined/auth/userpass \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: |-
            import requests

            url = "http://undefinedundefined/auth/userpass"

            headers = {"X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"}

            response = requests.request("OPTIONS", url, headers=headers)

            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url = 'http://undefinedundefined/auth/userpass';


            let options = {method: 'OPTIONS', headers: {'X-Rucio-Auth-Token':
            'REPLACE_KEY_VALUE'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
    get:
      description: Authenticate a Rucio account temporarily via username and password.
      parameters:
        - description: Account identifier as a string.
          in: header
          name: X-Rucio-Account
          required: true
          schema:
            type: string
        - description: Username as a string.
          in: header
          name: X-Rucio-Username
          required: true
          schema:
            type: string
        - description: password as a text-plain string.
          in: header
          name: X-Rucio-Password
          required: true
          schema:
            type: string
        - description: Application identifier as a string.
          in: header
          name: X-Rucio-AppID
          schema:
            type: string
        - description: The forward ip address.
          in: header
          name: X-Forwarded-For
          schema:
            type: string
      responses:
        '200':
          description: OK
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Expose-Headers:
              schema:
                type: string
            X-Rucio-Auth-Account:
              description: The rucio account used for authentication
              schema:
                type: string
            X-Rucio-Auth-Token:
              schema:
                type: string
            X-Rucio-Auth-Token-Expires:
              schema:
                type: string
        '206':
          description: Partial content containing X-Rucio-Auth-Accounts header
          headers:
            X-Rucio-Auth-Accounts:
              description: >-
                The rucio accounts corresponding to the provided identity as a
                csv string
              schema:
                type: string
        '401':
          description: Cannot authenticate
      summary: UserPass
      tags:
        - Auth
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url http://undefinedundefined/auth/userpass \
              --header 'X-Forwarded-For: SOME_STRING_VALUE' \
              --header 'X-Rucio-Account: SOME_STRING_VALUE' \
              --header 'X-Rucio-AppID: SOME_STRING_VALUE' \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE' \
              --header 'X-Rucio-Password: SOME_STRING_VALUE' \
              --header 'X-Rucio-Username: SOME_STRING_VALUE'
        - lang: Python
          source: |-
            import requests

            url = "http://undefinedundefined/auth/userpass"

            headers = {
                "X-Rucio-Account": "SOME_STRING_VALUE",
                "X-Rucio-Username": "SOME_STRING_VALUE",
                "X-Rucio-Password": "SOME_STRING_VALUE",
                "X-Rucio-AppID": "SOME_STRING_VALUE",
                "X-Forwarded-For": "SOME_STRING_VALUE",
                "X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"
            }

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'http://undefinedundefined/auth/userpass';

            let options = {
              method: 'GET',
              headers: {
                'X-Rucio-Account': 'SOME_STRING_VALUE',
                'X-Rucio-Username': 'SOME_STRING_VALUE',
                'X-Rucio-Password': 'SOME_STRING_VALUE',
                'X-Rucio-AppID': 'SOME_STRING_VALUE',
                'X-Forwarded-For': 'SOME_STRING_VALUE',
                'X-Rucio-Auth-Token': 'REPLACE_KEY_VALUE'
              }
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /auth/gss:
    options:
      description: GSS Allow cross-site scripting. Explicit for Authentication.
      responses:
        '200':
          description: OK
          headers:
            Access-Control-Allow-Credentials:
              schema:
                enum:
                  - 'true'
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                enum:
                  - '*'
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Expose-Headers:
              schema:
                enum:
                  - X-Rucio-Auth-Token
                type: string
        '404':
          description: Not found
      summary: GSS Allow cross-site scripting
      tags:
        - Auth
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request OPTIONS \
              --url http://undefinedundefined/auth/gss \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: |-
            import requests

            url = "http://undefinedundefined/auth/gss"

            headers = {"X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"}

            response = requests.request("OPTIONS", url, headers=headers)

            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url = 'http://undefinedundefined/auth/gss';


            let options = {method: 'OPTIONS', headers: {'X-Rucio-Auth-Token':
            'REPLACE_KEY_VALUE'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
    get:
      description: Authenticate a Rucio account via GSS.
      parameters:
        - in: header
          name: X-Rucio-Account
          required: true
          schema:
            type: string
        - in: header
          name: REMOTE_USER
          required: true
          schema:
            type: string
        - in: header
          name: X-Rucio-AppID
          schema:
            type: string
        - in: header
          name: X-Forwarded-For
          schema:
            type: string
      responses:
        '200':
          description: OK
          headers:
            X-Rucio-Auth-Token:
              description: The authentication token
              schema:
                type: string
            X-Rucio-Auth-Token-Expires:
              description: The time when the token expires
              schema:
                type: string
        '401':
          description: Cannot authenticate
      summary: GSS
      tags:
        - Auth
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url http://undefinedundefined/auth/gss \
              --header 'REMOTE_USER: SOME_STRING_VALUE' \
              --header 'X-Forwarded-For: SOME_STRING_VALUE' \
              --header 'X-Rucio-Account: SOME_STRING_VALUE' \
              --header 'X-Rucio-AppID: SOME_STRING_VALUE' \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: |-
            import requests

            url = "http://undefinedundefined/auth/gss"

            headers = {
                "X-Rucio-Account": "SOME_STRING_VALUE",
                "REMOTE_USER": "SOME_STRING_VALUE",
                "X-Rucio-AppID": "SOME_STRING_VALUE",
                "X-Forwarded-For": "SOME_STRING_VALUE",
                "X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"
            }

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'http://undefinedundefined/auth/gss';

            let options = {
              method: 'GET',
              headers: {
                'X-Rucio-Account': 'SOME_STRING_VALUE',
                REMOTE_USER: 'SOME_STRING_VALUE',
                'X-Rucio-AppID': 'SOME_STRING_VALUE',
                'X-Forwarded-For': 'SOME_STRING_VALUE',
                'X-Rucio-Auth-Token': 'REPLACE_KEY_VALUE'
              }
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /auth/x509:
    options:
      description: x509 Allow cross-site scripting. Explicit for Authentication.
      responses:
        '200':
          description: OK
          headers:
            Access-Control-Allow-Credentials:
              schema:
                enum:
                  - 'true'
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                enum:
                  - '*'
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Expose-Headers:
              schema:
                enum:
                  - X-Rucio-Auth-Token
                type: string
        '404':
          description: Not found
      summary: x509 Allow cross-site scripting
      tags:
        - Auth
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request OPTIONS \
              --url http://undefinedundefined/auth/x509 \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: |-
            import requests

            url = "http://undefinedundefined/auth/x509"

            headers = {"X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"}

            response = requests.request("OPTIONS", url, headers=headers)

            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url = 'http://undefinedundefined/auth/x509';


            let options = {method: 'OPTIONS', headers: {'X-Rucio-Auth-Token':
            'REPLACE_KEY_VALUE'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
    get:
      description: Authenticate a Rucio account via x509.
      parameters:
        - in: header
          name: X-Rucio-Account
          required: true
          schema:
            type: string
        - in: header
          name: X-Rucio-AppID
          schema:
            type: string
        - in: header
          name: X-Forwarded-For
          schema:
            type: string
      responses:
        '200':
          description: OK
          headers:
            X-Rucio-Auth-Token:
              description: The authentication token
              schema:
                type: string
            X-Rucio-Auth-Token-Expires:
              description: The time when the token expires
              schema:
                type: string
        '401':
          description: Cannot authenticate
      summary: x509
      tags:
        - Auth
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url http://undefinedundefined/auth/x509 \
              --header 'X-Forwarded-For: SOME_STRING_VALUE' \
              --header 'X-Rucio-Account: SOME_STRING_VALUE' \
              --header 'X-Rucio-AppID: SOME_STRING_VALUE' \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: |-
            import requests

            url = "http://undefinedundefined/auth/x509"

            headers = {
                "X-Rucio-Account": "SOME_STRING_VALUE",
                "X-Rucio-AppID": "SOME_STRING_VALUE",
                "X-Forwarded-For": "SOME_STRING_VALUE",
                "X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"
            }

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'http://undefinedundefined/auth/x509';

            let options = {
              method: 'GET',
              headers: {
                'X-Rucio-Account': 'SOME_STRING_VALUE',
                'X-Rucio-AppID': 'SOME_STRING_VALUE',
                'X-Forwarded-For': 'SOME_STRING_VALUE',
                'X-Rucio-Auth-Token': 'REPLACE_KEY_VALUE'
              }
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /auth/ssh:
    options:
      description: SSH Allow cross-site scripting. Explicit for Authentication.
      responses:
        '200':
          description: OK
          headers:
            Access-Control-Allow-Credentials:
              schema:
                enum:
                  - 'true'
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                enum:
                  - '*'
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Expose-Headers:
              schema:
                enum:
                  - X-Rucio-Auth-Token
                type: string
        '404':
          description: Not found
      summary: SSH Allow cross-site scripting
      tags:
        - Auth
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request OPTIONS \
              --url http://undefinedundefined/auth/ssh \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: |-
            import requests

            url = "http://undefinedundefined/auth/ssh"

            headers = {"X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"}

            response = requests.request("OPTIONS", url, headers=headers)

            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url = 'http://undefinedundefined/auth/ssh';


            let options = {method: 'OPTIONS', headers: {'X-Rucio-Auth-Token':
            'REPLACE_KEY_VALUE'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
    get:
      description: Authenticate a Rucio account via SSH.
      parameters:
        - in: header
          name: X-Rucio-Account
          required: true
          schema:
            type: string
        - in: header
          name: X-Rucio-SSH-Signature
          required: true
          schema:
            type: string
        - in: header
          name: X-Rucio-AppID
          schema:
            type: string
        - in: header
          name: X-Forwarded-For
          schema:
            type: string
      responses:
        '200':
          description: OK
          headers:
            X-Rucio-Auth-Token:
              description: The authentication token
              schema:
                type: string
            X-Rucio-Auth-Token-Expires:
              description: The time when the token expires
              schema:
                type: string
        '401':
          description: Cannot authenticate
      summary: SSH
      tags:
        - Auth
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url http://undefinedundefined/auth/ssh \
              --header 'X-Forwarded-For: SOME_STRING_VALUE' \
              --header 'X-Rucio-Account: SOME_STRING_VALUE' \
              --header 'X-Rucio-AppID: SOME_STRING_VALUE' \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE' \
              --header 'X-Rucio-SSH-Signature: SOME_STRING_VALUE'
        - lang: Python
          source: |-
            import requests

            url = "http://undefinedundefined/auth/ssh"

            headers = {
                "X-Rucio-Account": "SOME_STRING_VALUE",
                "X-Rucio-SSH-Signature": "SOME_STRING_VALUE",
                "X-Rucio-AppID": "SOME_STRING_VALUE",
                "X-Forwarded-For": "SOME_STRING_VALUE",
                "X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"
            }

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'http://undefinedundefined/auth/ssh';

            let options = {
              method: 'GET',
              headers: {
                'X-Rucio-Account': 'SOME_STRING_VALUE',
                'X-Rucio-SSH-Signature': 'SOME_STRING_VALUE',
                'X-Rucio-AppID': 'SOME_STRING_VALUE',
                'X-Forwarded-For': 'SOME_STRING_VALUE',
                'X-Rucio-Auth-Token': 'REPLACE_KEY_VALUE'
              }
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /auth/ssh_challenge_token:
    options:
      description: >-
        SSHChallengeToken Allow cross-site scripting. Explicit for
        Authentication.
      responses:
        '200':
          description: OK
          headers:
            Access-Control-Allow-Credentials:
              schema:
                enum:
                  - 'true'
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                enum:
                  - '*'
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Expose-Headers:
              schema:
                enum:
                  - X-Rucio-Auth-Token
                type: string
        '404':
          description: Not found
      summary: SSHChallengeToken Allow cross-site scripting
      tags:
        - Auth
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request OPTIONS \
              --url http://undefinedundefined/auth/ssh_challenge_token \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: |-
            import requests

            url = "http://undefinedundefined/auth/ssh_challenge_token"

            headers = {"X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"}

            response = requests.request("OPTIONS", url, headers=headers)

            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url = 'http://undefinedundefined/auth/ssh_challenge_token';


            let options = {method: 'OPTIONS', headers: {'X-Rucio-Auth-Token':
            'REPLACE_KEY_VALUE'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
    get:
      description: Authenticate a Rucio account via SSHChallengeToken.
      parameters:
        - in: header
          name: X-Rucio-Account
          required: true
          schema:
            type: string
        - in: header
          name: X-Rucio-AppID
          schema:
            type: string
        - in: header
          name: X-Forwarded-For
          schema:
            type: string
      responses:
        '200':
          description: OK
          headers:
            X-Rucio-SSH-Challenge-Token:
              description: The authentication token
              schema:
                type: string
            X-Rucio-SSH-Challenge-Token-Expires:
              description: The time when the token expires
              schema:
                type: string
        '401':
          description: Cannot authenticate
      summary: SSHChallengeToken
      tags:
        - Auth
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url http://undefinedundefined/auth/ssh_challenge_token \
              --header 'X-Forwarded-For: SOME_STRING_VALUE' \
              --header 'X-Rucio-Account: SOME_STRING_VALUE' \
              --header 'X-Rucio-AppID: SOME_STRING_VALUE' \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: |-
            import requests

            url = "http://undefinedundefined/auth/ssh_challenge_token"

            headers = {
                "X-Rucio-Account": "SOME_STRING_VALUE",
                "X-Rucio-AppID": "SOME_STRING_VALUE",
                "X-Forwarded-For": "SOME_STRING_VALUE",
                "X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"
            }

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'http://undefinedundefined/auth/ssh_challenge_token';

            let options = {
              method: 'GET',
              headers: {
                'X-Rucio-Account': 'SOME_STRING_VALUE',
                'X-Rucio-AppID': 'SOME_STRING_VALUE',
                'X-Forwarded-For': 'SOME_STRING_VALUE',
                'X-Rucio-Auth-Token': 'REPLACE_KEY_VALUE'
              }
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /auth/saml:
    options:
      description: SAML Allow cross-site scripting. Explicit for Authentication.
      responses:
        '200':
          description: OK
          headers:
            Access-Control-Allow-Credentials:
              schema:
                enum:
                  - 'true'
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                enum:
                  - '*'
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Expose-Headers:
              schema:
                enum:
                  - X-Rucio-Auth-Token
                type: string
        '404':
          description: Not found
      summary: SAML Allow cross-site scripting
      tags:
        - Auth
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request OPTIONS \
              --url http://undefinedundefined/auth/saml \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: |-
            import requests

            url = "http://undefinedundefined/auth/saml"

            headers = {"X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"}

            response = requests.request("OPTIONS", url, headers=headers)

            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url = 'http://undefinedundefined/auth/saml';


            let options = {method: 'OPTIONS', headers: {'X-Rucio-Auth-Token':
            'REPLACE_KEY_VALUE'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
    post:
      description: Post a SAML request
      responses:
        '200':
          description: OK
        '401':
          description: Invalid Auth Token
      summary: Post a SAML request
      tags:
        - Auth
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request POST \
              --url http://undefinedundefined/auth/saml \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: |-
            import requests

            url = "http://undefinedundefined/auth/saml"

            headers = {"X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"}

            response = requests.request("POST", url, headers=headers)

            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url = 'http://undefinedundefined/auth/saml';


            let options = {method: 'POST', headers: {'X-Rucio-Auth-Token':
            'REPLACE_KEY_VALUE'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
    get:
      description: Authenticate a Rucio account via SAML.
      parameters:
        - in: header
          name: X-Rucio-Account
          required: true
          schema:
            type: string
        - in: header
          name: X-Rucio-AppID
          schema:
            type: string
        - in: header
          name: X-Forwarded-For
          schema:
            type: string
      responses:
        '200':
          description: OK
          headers:
            X-Rucio-Auth-Token:
              description: The authentication token
              schema:
                type: string
            X-Rucio-Auth-Token-Expires:
              description: The time when the token expires
              schema:
                type: string
            X-Rucio-SAML-Auth-URL:
              description: The time when the token expires
              schema:
                type: string
        '401':
          description: Cannot authenticate
      summary: SAML
      tags:
        - Auth
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url http://undefinedundefined/auth/saml \
              --header 'X-Forwarded-For: SOME_STRING_VALUE' \
              --header 'X-Rucio-Account: SOME_STRING_VALUE' \
              --header 'X-Rucio-AppID: SOME_STRING_VALUE' \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: |-
            import requests

            url = "http://undefinedundefined/auth/saml"

            headers = {
                "X-Rucio-Account": "SOME_STRING_VALUE",
                "X-Rucio-AppID": "SOME_STRING_VALUE",
                "X-Forwarded-For": "SOME_STRING_VALUE",
                "X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"
            }

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'http://undefinedundefined/auth/saml';

            let options = {
              method: 'GET',
              headers: {
                'X-Rucio-Account': 'SOME_STRING_VALUE',
                'X-Rucio-AppID': 'SOME_STRING_VALUE',
                'X-Forwarded-For': 'SOME_STRING_VALUE',
                'X-Rucio-Auth-Token': 'REPLACE_KEY_VALUE'
              }
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /auth/validate:
    options:
      description: Validate Allow cross-site scripting. Explicit for Authentication.
      responses:
        '200':
          description: OK
          headers:
            Access-Control-Allow-Credentials:
              schema:
                enum:
                  - 'true'
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                enum:
                  - '*'
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Expose-Headers:
              schema:
                enum:
                  - X-Rucio-Auth-Token
                type: string
        '404':
          description: Not found
      summary: Validate Allow cross-site scripting
      tags:
        - Auth
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request OPTIONS \
              --url http://undefinedundefined/auth/validate \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: |-
            import requests

            url = "http://undefinedundefined/auth/validate"

            headers = {"X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"}

            response = requests.request("OPTIONS", url, headers=headers)

            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url = 'http://undefinedundefined/auth/validate';


            let options = {method: 'OPTIONS', headers: {'X-Rucio-Auth-Token':
            'REPLACE_KEY_VALUE'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
    get:
      description: Validate a Rucio auth token.
      parameters:
        - in: header
          name: X-Rucio-Account
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '401':
          description: Cannot authenticate
      summary: Validate
      tags:
        - Auth
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url http://undefinedundefined/auth/validate \
              --header 'X-Rucio-Account: SOME_STRING_VALUE' \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: |-
            import requests

            url = "http://undefinedundefined/auth/validate"

            headers = {
                "X-Rucio-Account": "SOME_STRING_VALUE",
                "X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"
            }

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'http://undefinedundefined/auth/validate';

            let options = {
              method: 'GET',
              headers: {
                'X-Rucio-Account': 'SOME_STRING_VALUE',
                'X-Rucio-Auth-Token': 'REPLACE_KEY_VALUE'
              }
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /auth/oidc:
    options:
      description: OIDC Allow cross-site scripting. Explicit for Authentication.
      responses:
        '200':
          description: OK
          headers:
            Access-Control-Allow-Credentials:
              schema:
                enum:
                  - 'true'
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                enum:
                  - '*'
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
        '404':
          description: Not found
      summary: OIDC Allow cross-site scripting
      tags:
        - Auth
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request OPTIONS \
              --url http://undefinedundefined/auth/oidc \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: |-
            import requests

            url = "http://undefinedundefined/auth/oidc"

            headers = {"X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"}

            response = requests.request("OPTIONS", url, headers=headers)

            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url = 'http://undefinedundefined/auth/oidc';


            let options = {method: 'OPTIONS', headers: {'X-Rucio-Auth-Token':
            'REPLACE_KEY_VALUE'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
    get:
      description: Authenticate a Rucio account via OIDC.
      parameters:
        - description: Account identifier as a string.
          in: header
          name: HTTP_X_RUCIO_ACCOUNT
          schema:
            type: string
        - in: header
          name: HTTP_X_RUCIO_CLIENT_AUTHORIZE_SCOPE
          schema:
            type: string
        - in: header
          name: HTTP_X_RUCIO_CLIENT_AUTHORIZE_AUDIENCE
          schema:
            type: string
        - in: header
          name: HTTP_X_RUCIO_CLIENT_AUTHORIZE_AUTO
          schema:
            type: string
        - in: header
          name: HTTP_X_RUCIO_CLIENT_AUTHORIZE_ISSUER
          schema:
            type: string
        - in: header
          name: HTTP_X_RUCIO_CLIENT_AUTHORIZE_POLLING
          schema:
            type: string
        - in: header
          name: HTTP_X_RUCIO_CLIENT_AUTHORIZE_REFRESH_LIFETIME
          schema:
            type: string
        - in: header
          name: X-Forwarded-For
          schema:
            type: string
      responses:
        '200':
          description: OK
          headers:
            X-Rucio-OIDC-Auth-URL:
              description: User & Rucio OIDC Client specific Authorization URL
              schema:
                type: string
        '401':
          description: Cannot authenticate
      summary: OIDC
      tags:
        - Auth
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url http://undefinedundefined/auth/oidc \
              --header 'HTTP_X_RUCIO_ACCOUNT: SOME_STRING_VALUE' \
              --header 'HTTP_X_RUCIO_CLIENT_AUTHORIZE_AUDIENCE: SOME_STRING_VALUE' \
              --header 'HTTP_X_RUCIO_CLIENT_AUTHORIZE_AUTO: SOME_STRING_VALUE' \
              --header 'HTTP_X_RUCIO_CLIENT_AUTHORIZE_ISSUER: SOME_STRING_VALUE' \
              --header 'HTTP_X_RUCIO_CLIENT_AUTHORIZE_POLLING: SOME_STRING_VALUE' \
              --header 'HTTP_X_RUCIO_CLIENT_AUTHORIZE_REFRESH_LIFETIME: SOME_STRING_VALUE' \
              --header 'HTTP_X_RUCIO_CLIENT_AUTHORIZE_SCOPE: SOME_STRING_VALUE' \
              --header 'X-Forwarded-For: SOME_STRING_VALUE' \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: |-
            import requests

            url = "http://undefinedundefined/auth/oidc"

            headers = {
                "HTTP_X_RUCIO_ACCOUNT": "SOME_STRING_VALUE",
                "HTTP_X_RUCIO_CLIENT_AUTHORIZE_SCOPE": "SOME_STRING_VALUE",
                "HTTP_X_RUCIO_CLIENT_AUTHORIZE_AUDIENCE": "SOME_STRING_VALUE",
                "HTTP_X_RUCIO_CLIENT_AUTHORIZE_AUTO": "SOME_STRING_VALUE",
                "HTTP_X_RUCIO_CLIENT_AUTHORIZE_ISSUER": "SOME_STRING_VALUE",
                "HTTP_X_RUCIO_CLIENT_AUTHORIZE_POLLING": "SOME_STRING_VALUE",
                "HTTP_X_RUCIO_CLIENT_AUTHORIZE_REFRESH_LIFETIME": "SOME_STRING_VALUE",
                "X-Forwarded-For": "SOME_STRING_VALUE",
                "X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"
            }

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'http://undefinedundefined/auth/oidc';

            let options = {
              method: 'GET',
              headers: {
                HTTP_X_RUCIO_ACCOUNT: 'SOME_STRING_VALUE',
                HTTP_X_RUCIO_CLIENT_AUTHORIZE_SCOPE: 'SOME_STRING_VALUE',
                HTTP_X_RUCIO_CLIENT_AUTHORIZE_AUDIENCE: 'SOME_STRING_VALUE',
                HTTP_X_RUCIO_CLIENT_AUTHORIZE_AUTO: 'SOME_STRING_VALUE',
                HTTP_X_RUCIO_CLIENT_AUTHORIZE_ISSUER: 'SOME_STRING_VALUE',
                HTTP_X_RUCIO_CLIENT_AUTHORIZE_POLLING: 'SOME_STRING_VALUE',
                HTTP_X_RUCIO_CLIENT_AUTHORIZE_REFRESH_LIFETIME: 'SOME_STRING_VALUE',
                'X-Forwarded-For': 'SOME_STRING_VALUE',
                'X-Rucio-Auth-Token': 'REPLACE_KEY_VALUE'
              }
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /auth/oidc_token:
    options:
      description: TokenOIDC Allow cross-site scripting. Explicit for Authentication.
      responses:
        '200':
          description: OK
          headers:
            Access-Control-Allow-Credentials:
              schema:
                enum:
                  - 'true'
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                enum:
                  - '*'
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
        '404':
          description: Not found
      summary: TokenOIDC Allow cross-site scripting
      tags:
        - Auth
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request OPTIONS \
              --url http://undefinedundefined/auth/oidc_token \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: |-
            import requests

            url = "http://undefinedundefined/auth/oidc_token"

            headers = {"X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"}

            response = requests.request("OPTIONS", url, headers=headers)

            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url = 'http://undefinedundefined/auth/oidc_token';


            let options = {method: 'OPTIONS', headers: {'X-Rucio-Auth-Token':
            'REPLACE_KEY_VALUE'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
    get:
      description: Authenticate a Rucio account via TokenOIDC.
      parameters:
        - in: header
          name: X-Forwarded-For
          schema:
            type: string
      responses:
        '200':
          description: OK
          headers:
            X-Rucio-Auth-Token:
              description: The authentication token
              schema:
                type: string
            X-Rucio-Auth-Token-Expires:
              description: The time when the token expires
              schema:
                type: string
        '401':
          description: Cannot authenticate
      summary: TokenOIDC
      tags:
        - Auth
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url http://undefinedundefined/auth/oidc_token \
              --header 'X-Forwarded-For: SOME_STRING_VALUE' \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: |-
            import requests

            url = "http://undefinedundefined/auth/oidc_token"

            headers = {
                "X-Forwarded-For": "SOME_STRING_VALUE",
                "X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"
            }

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'http://undefinedundefined/auth/oidc_token';

            let options = {
              method: 'GET',
              headers: {
                'X-Forwarded-For': 'SOME_STRING_VALUE',
                'X-Rucio-Auth-Token': 'REPLACE_KEY_VALUE'
              }
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /auth/oidc_code:
    options:
      description: CodeOIDC Allow cross-site scripting. Explicit for Authentication.
      responses:
        '200':
          description: OK
          headers:
            Access-Control-Allow-Credentials:
              schema:
                enum:
                  - 'true'
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                enum:
                  - '*'
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
        '404':
          description: Not found
      summary: CodeOIDC Allow cross-site scripting
      tags:
        - Auth
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request OPTIONS \
              --url http://undefinedundefined/auth/oidc_code \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: |-
            import requests

            url = "http://undefinedundefined/auth/oidc_code"

            headers = {"X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"}

            response = requests.request("OPTIONS", url, headers=headers)

            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url = 'http://undefinedundefined/auth/oidc_code';


            let options = {method: 'OPTIONS', headers: {'X-Rucio-Auth-Token':
            'REPLACE_KEY_VALUE'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
    get:
      description: Authenticate a Rucio account via CodeOIDC.
      parameters:
        - in: header
          name: X-Forwarded-For
          schema:
            type: string
      responses:
        '200':
          description: OK
        '400':
          description: Invalid request
      summary: CodeOIDC
      tags:
        - Auth
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url http://undefinedundefined/auth/oidc_code \
              --header 'X-Forwarded-For: SOME_STRING_VALUE' \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: |-
            import requests

            url = "http://undefinedundefined/auth/oidc_code"

            headers = {
                "X-Forwarded-For": "SOME_STRING_VALUE",
                "X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"
            }

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'http://undefinedundefined/auth/oidc_code';

            let options = {
              method: 'GET',
              headers: {
                'X-Forwarded-For': 'SOME_STRING_VALUE',
                'X-Rucio-Auth-Token': 'REPLACE_KEY_VALUE'
              }
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /auth/oidc_redirect:
    options:
      description: RedirectOIDC Allow cross-site scripting. Explicit for Authentication.
      responses:
        '200':
          description: OK
          headers:
            Access-Control-Allow-Credentials:
              schema:
                enum:
                  - 'true'
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                enum:
                  - '*'
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
        '404':
          description: Not found
      summary: RedirectOIDC Allow cross-site scripting
      tags:
        - Auth
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request OPTIONS \
              --url http://undefinedundefined/auth/oidc_redirect \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: |-
            import requests

            url = "http://undefinedundefined/auth/oidc_redirect"

            headers = {"X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"}

            response = requests.request("OPTIONS", url, headers=headers)

            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url = 'http://undefinedundefined/auth/oidc_redirect';


            let options = {method: 'OPTIONS', headers: {'X-Rucio-Auth-Token':
            'REPLACE_KEY_VALUE'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
    get:
      description: Authenticate a Rucio account via RedirectOIDC.
      parameters:
        - in: header
          name: X-Rucio-Client-Fetch-Token
          schema:
            type: string
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                enum:
                  - application/octet-stream
                type: string
            X-Rucio-Auth-Token:
              description: The authentication token
              schema:
                type: string
        '303':
          description: Redirect
        '401':
          description: Cannot authenticate
      summary: RedirectOIDC
      tags:
        - Auth
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url http://undefinedundefined/auth/oidc_redirect \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE' \
              --header 'X-Rucio-Client-Fetch-Token: SOME_STRING_VALUE'
        - lang: Python
          source: |-
            import requests

            url = "http://undefinedundefined/auth/oidc_redirect"

            headers = {
                "X-Rucio-Client-Fetch-Token": "SOME_STRING_VALUE",
                "X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"
            }

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'http://undefinedundefined/auth/oidc_redirect';

            let options = {
              method: 'GET',
              headers: {
                'X-Rucio-Client-Fetch-Token': 'SOME_STRING_VALUE',
                'X-Rucio-Auth-Token': 'REPLACE_KEY_VALUE'
              }
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /auth/oidc_refresh:
    options:
      description: RefreshOIDC Allow cross-site scripting. Explicit for Authentication.
      responses:
        '200':
          description: OK
          headers:
            Access-Control-Allow-Credentials:
              schema:
                enum:
                  - 'true'
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                enum:
                  - '*'
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Expose-Headers:
              schema:
                enum:
                  - X-Rucio-Auth-Token
                type: string
        '404':
          description: Not found
      summary: RefreshOIDC Allow cross-site scripting
      tags:
        - Auth
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request OPTIONS \
              --url http://undefinedundefined/auth/oidc_refresh \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: |-
            import requests

            url = "http://undefinedundefined/auth/oidc_refresh"

            headers = {"X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"}

            response = requests.request("OPTIONS", url, headers=headers)

            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url = 'http://undefinedundefined/auth/oidc_refresh';


            let options = {method: 'OPTIONS', headers: {'X-Rucio-Auth-Token':
            'REPLACE_KEY_VALUE'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
    get:
      description: Authenticate a Rucio account via RefreshOIDC.
      parameters:
        - in: header
          name: X-Rucio-Account
          required: true
          schema:
            type: string
        - in: header
          name: X-Rucio-Auth-Token
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          headers:
            X-Rucio-Auth-Token:
              description: The authentication token
              schema:
                type: string
            X-Rucio-Auth-Token-Expires:
              description: The time when the token expires
              schema:
                type: string
        '401':
          description: Cannot authenticate
      summary: RefreshOIDC
      tags:
        - Auth
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url http://undefinedundefined/auth/oidc_refresh \
              --header 'X-Rucio-Account: SOME_STRING_VALUE' \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: |-
            import requests

            url = "http://undefinedundefined/auth/oidc_refresh"

            headers = {
                "X-Rucio-Account": "SOME_STRING_VALUE",
                "X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"
            }

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'http://undefinedundefined/auth/oidc_refresh';

            let options = {
              method: 'GET',
              headers: {
                'X-Rucio-Account': 'SOME_STRING_VALUE',
                'X-Rucio-Auth-Token': 'REPLACE_KEY_VALUE'
              }
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /config/{section}/{option}/{value}:
    put:
      description: Create or set the value of an option.
      parameters:
        - description: The section.
          in: path
          name: section
          required: true
          schema:
            type: string
          style: simple
        - description: The option of the section.
          in: path
          name: option
          required: true
          schema:
            type: string
          style: simple
        - description: The value to set.
          in: path
          name: value
          required: true
          schema:
            type: string
          style: simple
      responses:
        '201':
          content:
            application/json:
              schema:
                enum:
                  - Created
                type: string
          description: OK
        '401':
          description: Invalid Auth Token
        '500':
          content:
            application/json:
              schema:
                enum:
                  - Could not set value {} for section {} option {}
                type: string
          description: Value could not be set
      summary: Create value
      tags:
        - Config
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request PUT \
              --url http://undefinedundefined/config/{section}/{option}/{value} \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: |-
            import requests

            url = "http://undefinedundefined/config/{section}/{option}/{value}"

            headers = {"X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"}

            response = requests.request("PUT", url, headers=headers)

            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'http://undefinedundefined/config/{section}/{option}/{value}';


            let options = {method: 'PUT', headers: {'X-Rucio-Auth-Token':
            'REPLACE_KEY_VALUE'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /config/{section}/{option}:
    delete:
      description: Delete an option of a section.
      parameters:
        - description: The section.
          in: path
          name: section
          required: true
          schema:
            type: string
          style: simple
        - description: The option of the section.
          in: path
          name: option
          required: true
          schema:
            type: string
          style: simple
      responses:
        '200':
          description: OK
        '401':
          description: Invalid Auth Token
      summary: Delete option
      tags:
        - Config
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url http://undefinedundefined/config/{section}/{option} \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: |-
            import requests

            url = "http://undefinedundefined/config/{section}/{option}"

            headers = {"X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"}

            response = requests.request("DELETE", url, headers=headers)

            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url = 'http://undefinedundefined/config/{section}/{option}';


            let options = {method: 'DELETE', headers: {'X-Rucio-Auth-Token':
            'REPLACE_KEY_VALUE'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
    get:
      description: Returns the value of an option
      parameters:
        - description: The section.
          in: path
          name: section
          required: true
          schema:
            type: string
          style: simple
        - description: The option of the section.
          in: path
          name: option
          required: true
          schema:
            type: string
          style: simple
      responses:
        '200':
          content:
            application/json:
              schema:
                description: The value of the option
                type: string
          description: OK
        '401':
          description: Invalid Auth Token
        '404':
          description: Config not found
        '406':
          description: Not acceptable
      summary: Get option
      tags:
        - Config
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url http://undefinedundefined/config/{section}/{option} \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: |-
            import requests

            url = "http://undefinedundefined/config/{section}/{option}"

            headers = {"X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"}

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url = 'http://undefinedundefined/config/{section}/{option}';


            let options = {method: 'GET', headers: {'X-Rucio-Auth-Token':
            'REPLACE_KEY_VALUE'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /config/{section}:
    get:
      parameters:
        - description: The section to return.
          in: path
          name: section
          required: true
          schema:
            type: string
          style: simple
      requestBody:
        content:
          application/json:
            schema:
              properties:
                bytes:
                  description: The new limit in bytes.
                  type: integer
              required:
                - bytes
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                description: Dictionary of section options.
                type: object
          description: OK
        '401':
          description: Invalid Auth Token
        '404':
          description: Config not found
        '406':
          description: Not acceptable
      summary: List Sections
      tags:
        - Config
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url http://undefinedundefined/config/{section} \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE' \
              --header 'content-type: application/json' \
              --data '{"bytes":0}'
        - lang: Python
          source: >-
            import requests


            url = "http://undefinedundefined/config/{section}"


            payload = {"bytes": 0}

            headers = {
                "X-Rucio-Auth-Token": "REPLACE_KEY_VALUE",
                "content-type": "application/json"
            }


            response = requests.request("GET", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'http://undefinedundefined/config/{section}';

            let options = {
              method: 'GET',
              headers: {'X-Rucio-Auth-Token': 'REPLACE_KEY_VALUE', 'content-type': 'application/json'},
              body: '{"bytes":0}'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /config:
    post:
      description: Create or set the configuration option in the requested section.
      requestBody:
        content:
          application/json:
            schema:
              description: >-
                The request body is expected to contain a json {'section':
                {'option': 'value'}}.
              type: object
      responses:
        '201':
          content:
            application/json:
              schema:
                enum:
                  - Created
                type: string
          description: OK
        '400':
          description: The input data was incomplete or invalid
        '401':
          description: Invalid Auth Token
        '500':
          description: Configuration error
      summary: Create
      tags:
        - Config
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request POST \
              --url http://undefinedundefined/config \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE' \
              --header 'content-type: application/json' \
              --data '{}'
        - lang: Python
          source: >-
            import requests


            url = "http://undefinedundefined/config"


            payload = {}

            headers = {
                "X-Rucio-Auth-Token": "REPLACE_KEY_VALUE",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'http://undefinedundefined/config';

            let options = {
              method: 'POST',
              headers: {'X-Rucio-Auth-Token': 'REPLACE_KEY_VALUE', 'content-type': 'application/json'},
              body: '{}'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
    get:
      description: List the full configuration.
      responses:
        '200':
          content:
            application/json:
              schema:
                description: >-
                  A dict with the sections as keys and a dict with the
                  configuration as value.
                type: object
          description: OK
        '401':
          description: Invalid Auth Token
        '406':
          description: Not acceptable
      summary: List
      tags:
        - Config
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url http://undefinedundefined/config \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: |-
            import requests

            url = "http://undefinedundefined/config"

            headers = {"X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"}

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url = 'http://undefinedundefined/config';


            let options = {method: 'GET', headers: {'X-Rucio-Auth-Token':
            'REPLACE_KEY_VALUE'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /credentials/signurl:
    options:
      description: Allow cross-site scripting. Explicit for Authentication.
      responses:
        '200':
          description: OK
          headers:
            Access-Control-Allow-Credentials:
              description: If credentials are allowed.
              schema:
                enum:
                  - 'true'
                type: string
            Access-Control-Allow-Headers:
              description: The http access controll request headers.
              schema:
                type: string
            Access-Control-Allow-Methods:
              description: The allowed methods.
              schema:
                enum:
                  - '*'
                type: string
            Access-Control-Allow-Origin:
              description: The http origin.
              schema:
                type: string
            Access-Control-Expose-Headers:
              description: The exposed access controll header.
              schema:
                enum:
                  - X-Rucio-Auth-Token
                type: string
        '404':
          description: Not found
      summary: Cross-Site Scripting
      tags:
        - Credentials
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request OPTIONS \
              --url http://undefinedundefined/credentials/signurl \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: |-
            import requests

            url = "http://undefinedundefined/credentials/signurl"

            headers = {"X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"}

            response = requests.request("OPTIONS", url, headers=headers)

            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url = 'http://undefinedundefined/credentials/signurl';


            let options = {method: 'OPTIONS', headers: {'X-Rucio-Auth-Token':
            'REPLACE_KEY_VALUE'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
    get:
      description: Sign a url for a limited lifetime for a particular srevice.
      parameters:
        - description: The RSE to authenticate against.
          in: query
          name: rse
          required: true
          schema:
            type: string
        - description: The lifetime, default 600s.
          in: query
          name: lifetime
          required: false
          schema:
            type: string
        - description: The service, default gcs.
          in: query
          name: svc
          required: false
          schema:
            type: string
        - description: The operation.
          in: query
          name: op
          required: false
          schema:
            type: string
        - description: The Url of the authentification.
          in: query
          name: url
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/octet-stream:
            schema:
              properties:
                X-Rucio-Account:
                  description: Account identifier.
                  type: string
                X-Rucio-AppID:
                  description: Application identifier.
                  type: string
                X-Rucio-VO:
                  description: VO name (Multi-VO only).
                  type: string
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  description: An account attribute.
                  properties:
                    key:
                      description: The key of the account attribute.
                      type: string
                    value:
                      description: The value of the account attribute.
                      type: string
                  type: object
                type: array
          description: OK
        '400':
          description: bad request, no rse or url found.
        '401':
          description: Invalid Auth Token
        '406':
          description: Not acceptable.
      summary: Sign URL
      tags:
        - Credentials
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'http://undefinedundefined/credentials/signurl?rse=SOME_STRING_VALUE&lifetime=SOME_STRING_VALUE&svc=SOME_STRING_VALUE&op=SOME_STRING_VALUE&url=SOME_STRING_VALUE' \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: >-
            import requests


            url = "http://undefinedundefined/credentials/signurl"


            querystring =
            {"rse":"SOME_STRING_VALUE","lifetime":"SOME_STRING_VALUE","svc":"SOME_STRING_VALUE","op":"SOME_STRING_VALUE","url":"SOME_STRING_VALUE"}


            headers = {"X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'http://undefinedundefined/credentials/signurl?rse=SOME_STRING_VALUE&lifetime=SOME_STRING_VALUE&svc=SOME_STRING_VALUE&op=SOME_STRING_VALUE&url=SOME_STRING_VALUE';


            let options = {method: 'GET', headers: {'X-Rucio-Auth-Token':
            'REPLACE_KEY_VALUE'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /dids/{scope}/:
    get:
      description: Return all data identifiers in the given scope.
      parameters:
        - description: The scope.
          in: path
          name: scope
          required: true
          schema:
            type: string
          style: simple
      requestBody:
        content:
          application/json:
            schema:
              properties:
                name:
                  description: The name of the did.
                  type: string
                recursive:
                  description: If specified, also returns the child ids recursively.
                  type: boolean
              type: object
      responses:
        '200':
          content:
            application/x-json-stream:
              schema:
                description: Line seperated dictionary of dids.
                items:
                  description: Data identifier
                  properties:
                    level:
                      description: The level of the did.
                      type: integer
                    name:
                      description: The name of the did.
                      type: string
                    parent:
                      description: The parent of the did.
                      type: string
                    scope:
                      description: The scope of the did.
                      type: string
                    type:
                      description: The type of the did.
                      enum:
                        - F
                        - D
                        - C
                        - A
                        - X
                        - 'Y'
                        - Z
                      type: string
                  type: object
                type: array
          description: OK
        '401':
          description: Invalid Auth Token
        '404':
          description: No Dids found
        '406':
          description: Not acceptable
      summary: Get Data Identifier
      tags:
        - Data Identifiers
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url http://undefinedundefined/dids/{scope}/ \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE' \
              --header 'content-type: application/json' \
              --data '{"name":"string","recursive":true}'
        - lang: Python
          source: >-
            import requests


            url = "http://undefinedundefined/dids/{scope}/"


            payload = {
                "name": "string",
                "recursive": True
            }

            headers = {
                "X-Rucio-Auth-Token": "REPLACE_KEY_VALUE",
                "content-type": "application/json"
            }


            response = requests.request("GET", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'http://undefinedundefined/dids/{scope}/';

            let options = {
              method: 'GET',
              headers: {'X-Rucio-Auth-Token': 'REPLACE_KEY_VALUE', 'content-type': 'application/json'},
              body: '{"name":"string","recursive":true}'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /dids/{guid}/guid:
    get:
      description: Returns the dataset associated with a GUID.
      parameters:
        - description: The GUID to query buy.
          in: path
          name: guid
          required: true
          schema:
            type: string
          style: simple
      responses:
        '200':
          content:
            application/x-json-stream:
              schema:
                description: >-
                  A list of all datasets associated with the guid. Items are
                  seperated by new line character.
                items:
                  description: A dataset associated with a guid.
                  properties:
                    name:
                      description: The name of the dataset.
                      type: string
                    scope:
                      description: The scope of the dataset.
                      type: string
                  type: object
                type: array
          description: OK
        '401':
          description: Invalid Auth Token
        '404':
          description: Did not found
        '406':
          description: Not acceptable
      summary: Get dataset
      tags:
        - Data Identifiers
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url http://undefinedundefined/dids/{guid}/guid \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: |-
            import requests

            url = "http://undefinedundefined/dids/{guid}/guid"

            headers = {"X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"}

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url = 'http://undefinedundefined/dids/{guid}/guid';


            let options = {method: 'GET', headers: {'X-Rucio-Auth-Token':
            'REPLACE_KEY_VALUE'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /dids/{scope}/dids/search:
    get:
      description: List all data identifiers in a scope which match a given metadata.
      parameters:
        - description: The scope of the data identifiers.
          in: path
          name: scope
          required: true
          schema:
            type: string
          style: simple
        - description: The did type to search for.
          in: query
          name: type
          schema:
            default: collection
            enum:
              - all
              - collection
              - container
              - dataset
              - file
            type: string
        - description: The maximum number od dids returned.
          in: query
          name: limit
          schema:
            type: integer
        - description: Provides a longer output, otherwise just prints names.
          in: query
          name: long
          schema:
            default: false
            type: boolean
        - description: Recursively list chilred.
          in: query
          name: recursive
          schema:
            type: boolean
        - description: Date string in RFC-1123 format where the creation date was earlier.
          in: query
          name: created_before
          schema:
            type: string
        - description: Date string in RFC-1123 format where the creation date was later.
          in: query
          name: created_after
          schema:
            type: string
        - description: Exact number of attached DIDs.
          in: query
          name: length
          schema:
            type: integer
        - description: Number of attached DIDs greater than.
          in: query
          name: length.gt
          schema:
            type: integer
        - description: Number of attached DIDs less than.
          in: query
          name: length.lt
          schema:
            type: integer
        - description: Number of attached DIDs greater than or equal to
          in: query
          name: length.gte
          schema:
            type: integer
        - description: Number of attached DIDs less than or equal to.
          in: query
          name: length.lte
          schema:
            type: integer
        - description: Name or pattern of a did.
          in: query
          name: name
          schema:
            type: string
      responses:
        '200':
          content:
            application/x-json-stream:
              schema:
                description: >-
                  Line separated name of DIDs or dictionaries of DIDs for long
                  option.
                items:
                  description: the name of a DID or a dictionarie of a DID for long option.
                  type: object
                type: array
          description: OK
        '401':
          description: Invalid Auth Token
        '404':
          description: Invalid key in filter.
        '406':
          description: Not acceptable
        '409':
          description: Wrong did type
      summary: List Data identifier
      tags:
        - Data Identifiers
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'http://undefinedundefined/dids/{scope}/dids/search?type=SOME_STRING_VALUE&limit=SOME_INTEGER_VALUE&long=SOME_BOOLEAN_VALUE&recursive=SOME_BOOLEAN_VALUE&created_before=SOME_STRING_VALUE&created_after=SOME_STRING_VALUE&length=SOME_INTEGER_VALUE&length.gt=SOME_INTEGER_VALUE&length.lt=SOME_INTEGER_VALUE&length.gte=SOME_INTEGER_VALUE&length.lte=SOME_INTEGER_VALUE&name=SOME_STRING_VALUE' \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: >-
            import requests


            url = "http://undefinedundefined/dids/{scope}/dids/search"


            querystring =
            {"type":"SOME_STRING_VALUE","limit":"SOME_INTEGER_VALUE","long":"SOME_BOOLEAN_VALUE","recursive":"SOME_BOOLEAN_VALUE","created_before":"SOME_STRING_VALUE","created_after":"SOME_STRING_VALUE","length":"SOME_INTEGER_VALUE","length.gt":"SOME_INTEGER_VALUE","length.lt":"SOME_INTEGER_VALUE","length.gte":"SOME_INTEGER_VALUE","length.lte":"SOME_INTEGER_VALUE","name":"SOME_STRING_VALUE"}


            headers = {"X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'http://undefinedundefined/dids/{scope}/dids/search?type=SOME_STRING_VALUE&limit=SOME_INTEGER_VALUE&long=SOME_BOOLEAN_VALUE&recursive=SOME_BOOLEAN_VALUE&created_before=SOME_STRING_VALUE&created_after=SOME_STRING_VALUE&length=SOME_INTEGER_VALUE&length.gt=SOME_INTEGER_VALUE&length.lt=SOME_INTEGER_VALUE&length.gte=SOME_INTEGER_VALUE&length.lte=SOME_INTEGER_VALUE&name=SOME_STRING_VALUE';


            let options = {method: 'GET', headers: {'X-Rucio-Auth-Token':
            'REPLACE_KEY_VALUE'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /dids/{scope}/dids/search_extended:
    get:
      description: >-
        List all data identifiers in a scope which match a given metadata.
        Extended Version to included meteadata from various plugins.
      parameters:
        - description: The scope of the data identifiers.
          in: path
          name: scope
          required: true
          schema:
            type: string
          style: simple
        - description: The did type to search for.
          in: query
          name: type
          schema:
            default: collection
            enum:
              - all
              - collection
              - container
              - dataset
              - file
            type: string
        - description: The maximum number od dids returned.
          in: query
          name: limit
          schema:
            type: integer
        - description: Provides a longer output, otherwise just prints names.
          in: query
          name: long
          schema:
            default: false
            type: boolean
        - description: Recursively list chilred.
          in: query
          name: recursive
          schema:
            type: boolean
        - description: Date string in RFC-1123 format where the creation date was earlier.
          in: query
          name: created_before
          schema:
            type: string
        - description: Date string in RFC-1123 format where the creation date was later.
          in: query
          name: created_after
          schema:
            type: string
        - description: Exact number of attached DIDs.
          in: query
          name: length
          schema:
            type: integer
        - description: Number of attached DIDs greater than.
          in: query
          name: length.gt
          schema:
            type: integer
        - description: Number of attached DIDs less than.
          in: query
          name: length.lt
          schema:
            type: integer
        - description: Number of attached DIDs greater than or equal to
          in: query
          name: length.gte
          schema:
            type: integer
        - description: Number of attached DIDs less than or equal to.
          in: query
          name: length.lte
          schema:
            type: integer
        - description: Name or pattern of a did.
          in: query
          name: name
          schema:
            type: string
      responses:
        '200':
          content:
            application/x-json-stream:
              schema:
                description: >-
                  Line separated name of DIDs or dictionaries of DIDs for long
                  option.
                items:
                  description: the name of a DID or a dictionarie of a DID for long option.
                  type: object
                type: array
          description: OK
        '401':
          description: Invalid Auth Token
        '404':
          description: Invalid key in filter.
        '406':
          description: Not acceptable
        '409':
          description: Wrong did type
      summary: List Data identifier with plugin metadata
      tags:
        - Data Identifiers
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'http://undefinedundefined/dids/{scope}/dids/search_extended?type=SOME_STRING_VALUE&limit=SOME_INTEGER_VALUE&long=SOME_BOOLEAN_VALUE&recursive=SOME_BOOLEAN_VALUE&created_before=SOME_STRING_VALUE&created_after=SOME_STRING_VALUE&length=SOME_INTEGER_VALUE&length.gt=SOME_INTEGER_VALUE&length.lt=SOME_INTEGER_VALUE&length.gte=SOME_INTEGER_VALUE&length.lte=SOME_INTEGER_VALUE&name=SOME_STRING_VALUE' \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: >-
            import requests


            url = "http://undefinedundefined/dids/{scope}/dids/search_extended"


            querystring =
            {"type":"SOME_STRING_VALUE","limit":"SOME_INTEGER_VALUE","long":"SOME_BOOLEAN_VALUE","recursive":"SOME_BOOLEAN_VALUE","created_before":"SOME_STRING_VALUE","created_after":"SOME_STRING_VALUE","length":"SOME_INTEGER_VALUE","length.gt":"SOME_INTEGER_VALUE","length.lt":"SOME_INTEGER_VALUE","length.gte":"SOME_INTEGER_VALUE","length.lte":"SOME_INTEGER_VALUE","name":"SOME_STRING_VALUE"}


            headers = {"X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'http://undefinedundefined/dids/{scope}/dids/search_extended?type=SOME_STRING_VALUE&limit=SOME_INTEGER_VALUE&long=SOME_BOOLEAN_VALUE&recursive=SOME_BOOLEAN_VALUE&created_before=SOME_STRING_VALUE&created_after=SOME_STRING_VALUE&length=SOME_INTEGER_VALUE&length.gt=SOME_INTEGER_VALUE&length.lt=SOME_INTEGER_VALUE&length.gte=SOME_INTEGER_VALUE&length.lte=SOME_INTEGER_VALUE&name=SOME_STRING_VALUE';


            let options = {method: 'GET', headers: {'X-Rucio-Auth-Token':
            'REPLACE_KEY_VALUE'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /dids/{scope_name}/status:
    put:
      description: Update a did.
      parameters:
        - description: The scope and the name of the did.
          in: path
          name: scope_name
          required: true
          schema:
            type: string
          style: simple
      requestBody:
        content:
          application/json:
            schema:
              properties:
                open:
                  description: The open status
                  type: boolean
              type: object
      responses:
        '200':
          description: OK
        '401':
          description: Invalid Auth Token
        '404':
          description: Did not found
        '409':
          description: Wrong status
      summary: Update did
      tags:
        - Data Identifiers
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request PUT \
              --url http://undefinedundefined/dids/{scope_name}/status \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE' \
              --header 'content-type: application/json' \
              --data '{"open":true}'
        - lang: Python
          source: >-
            import requests


            url = "http://undefinedundefined/dids/{scope_name}/status"


            payload = {"open": True}

            headers = {
                "X-Rucio-Auth-Token": "REPLACE_KEY_VALUE",
                "content-type": "application/json"
            }


            response = requests.request("PUT", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'http://undefinedundefined/dids/{scope_name}/status';

            let options = {
              method: 'PUT',
              headers: {'X-Rucio-Auth-Token': 'REPLACE_KEY_VALUE', 'content-type': 'application/json'},
              body: '{"open":true}'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /dids/{scope_name}/files:
    get:
      description: List all replicas for a did.
      parameters:
        - description: The scope and the name of the did.
          in: path
          name: scope_name
          required: true
          schema:
            type: string
          style: simple
        - description: Flag to trigger long output.
          in: query
          name: long
          required: false
          schema:
            type: object
      responses:
        '200':
          content:
            application/x-json-stream:
              schema:
                oneOf:
                  - description: All replica information if `long` is defined.
                    items:
                      properties:
                        adler32:
                          description: The adler32 checksum.
                          type: string
                        bytes:
                          description: The size of the did in bytes.
                          type: integer
                        events:
                          description: The number of events of the did.
                          type: integer
                        guid:
                          description: The guid of the did.
                          type: string
                        lumiblocknr:
                          description: >-
                            The lumi block nr. Only availabe if `long` is
                            defined in the query.
                          type: integer
                        name:
                          description: The name of the did.
                          type: string
                        scope:
                          description: The scope of the did.
                          type: string
                      type: object
                    type: array
                  - description: All replica information.
                    items:
                      properties:
                        adler32:
                          description: The adler32 checksum.
                          type: string
                        bytes:
                          description: The size of the did in bytes.
                          type: integer
                        events:
                          description: The number of events of the did.
                          type: integer
                        guid:
                          description: The guid of the did.
                          type: string
                        name:
                          description: The name of the did.
                          type: string
                        scope:
                          description: The scope of the did.
                          type: string
                      type: object
                    type: array
          description: OK
        '401':
          description: Invalid Auth Token
        '404':
          description: Did not found
        '406':
          description: Not acceptable
      summary: Get replicas
      tags:
        - Data Identifiers
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'http://undefinedundefined/dids/{scope_name}/files?long=SOME_OBJECT_VALUE' \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: >-
            import requests


            url = "http://undefinedundefined/dids/{scope_name}/files"


            querystring = {"long":"SOME_OBJECT_VALUE"}


            headers = {"X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'http://undefinedundefined/dids/{scope_name}/files?long=SOME_OBJECT_VALUE';


            let options = {method: 'GET', headers: {'X-Rucio-Auth-Token':
            'REPLACE_KEY_VALUE'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /dids/{scope_name}/dids/history:
    get:
      description: Returns the content history of a data identifier.
      parameters:
        - description: The scope and the name of the did.
          in: path
          name: scope_name
          required: true
          schema:
            type: string
          style: simple
      responses:
        '200':
          content:
            application/x-json-stream:
              schema:
                description: >-
                  The dids with their information and history. Elements are
                  seperated by new line characters.
                items:
                  description: A single did with history data.
                  properties:
                    adler32:
                      description: The abler32 sha checksum.
                      type: string
                    bytes:
                      description: The size of the did in bytes.
                      type: integer
                    created_at:
                      description: The created_at date time.
                      type: string
                    deleted_at:
                      description: The deleted_at date time.
                      type: string
                    md5:
                      description: The md5 checksum.
                      type: string
                    name:
                      description: The name of the did.
                      type: string
                    scope:
                      description: The scope of the did.
                      type: string
                    type:
                      description: The type of the did.
                      type: string
                    updated_at:
                      description: The last time the did was updated.
                      type: string
                  type: object
                type: array
          description: Did found
        '401':
          description: Invalid Auth Token
        '404':
          description: Did not found
        '406':
          description: Not acceptable
      summary: Get history
      tags:
        - Data Identifiers
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url http://undefinedundefined/dids/{scope_name}/dids/history \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: |-
            import requests

            url = "http://undefinedundefined/dids/{scope_name}/dids/history"

            headers = {"X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"}

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'http://undefinedundefined/dids/{scope_name}/dids/history';


            let options = {method: 'GET', headers: {'X-Rucio-Auth-Token':
            'REPLACE_KEY_VALUE'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /dids/{scope_name}/dids:
    delete:
      description: Detach data identifiers from data identifiers.
      parameters:
        - description: The scope and the name of the did.
          in: path
          name: scope_name
          required: true
          schema:
            type: string
          style: simple
      requestBody:
        content:
          application/json:
            schema:
              properties:
                dids:
                  description: The dids to detach.
                  items:
                    properties:
                      name:
                        description: The name of the did.
                        type: string
                      scope:
                        description: The scope of the did.
                        type: string
                    type: object
                  type: array
              required:
                - dids
              type: object
      responses:
        '200':
          description: OK
        '401':
          description: Invalid Auth Token
        '404':
          description: Did not found
      summary: Detach dids from did
      tags:
        - Data Identifiers
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url http://undefinedundefined/dids/{scope_name}/dids \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE' \
              --header 'content-type: application/json' \
              --data '{"dids":[{"name":"string","scope":"string"}]}'
        - lang: Python
          source: >-
            import requests


            url = "http://undefinedundefined/dids/{scope_name}/dids"


            payload = {"dids": [
                    {
                        "name": "string",
                        "scope": "string"
                    }
                ]}
            headers = {
                "X-Rucio-Auth-Token": "REPLACE_KEY_VALUE",
                "content-type": "application/json"
            }


            response = requests.request("DELETE", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'http://undefinedundefined/dids/{scope_name}/dids';

            let options = {
              method: 'DELETE',
              headers: {'X-Rucio-Auth-Token': 'REPLACE_KEY_VALUE', 'content-type': 'application/json'},
              body: '{"dids":[{"name":"string","scope":"string"}]}'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
    post:
      description: Append data identifiers to data identifiers.
      parameters:
        - description: The scope and the name of the did.
          in: path
          name: scope_name
          required: true
          schema:
            type: string
          style: simple
      requestBody:
        content:
          application/json:
            schema:
              properties:
                account:
                  description: The account which attaches the dids.
                  type: string
                dids:
                  description: The dids to attach.
                  properties:
                    account:
                      description: The account attaching the did.
                      type: string
                    name:
                      description: The name of the did.
                      type: string
                    scope:
                      description: The scope of the did.
                      type: string
                  type: object
                rse:
                  description: The name of the rse.
                  type: string
              required:
                - dids
              type: object
      responses:
        '201':
          content:
            application/json:
              schema:
                enum:
                  - Created
                type: string
          description: OK
        '401':
          description: Invalid Auth Token
        '404':
          description: Did not found
        '406':
          description: Not acceptable
        '409':
          description: Already attached
      summary: Add dids to did
      tags:
        - Data Identifiers
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request POST \
              --url http://undefinedundefined/dids/{scope_name}/dids \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE' \
              --header 'content-type: application/json' \
              --data '{"account":"string","dids":{"account":"string","name":"string","scope":"string"},"rse":"string"}'
        - lang: Python
          source: >-
            import requests


            url = "http://undefinedundefined/dids/{scope_name}/dids"


            payload = {
                "account": "string",
                "dids": {
                    "account": "string",
                    "name": "string",
                    "scope": "string"
                },
                "rse": "string"
            }

            headers = {
                "X-Rucio-Auth-Token": "REPLACE_KEY_VALUE",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'http://undefinedundefined/dids/{scope_name}/dids';

            let options = {
              method: 'POST',
              headers: {'X-Rucio-Auth-Token': 'REPLACE_KEY_VALUE', 'content-type': 'application/json'},
              body: '{"account":"string","dids":{"account":"string","name":"string","scope":"string"},"rse":"string"}'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
    get:
      description: Returns the contents of a data identifier.
      parameters:
        - description: The scope and the name of the did.
          in: path
          name: scope_name
          required: true
          schema:
            type: string
          style: simple
      responses:
        '200':
          content:
            application/x-json-stream:
              schema:
                description: The contents of a did. Items are line seperated.
                items:
                  properties:
                    adler32:
                      description: The adler32 checksum of the did.
                      type: string
                    bytes:
                      description: The size of the did.
                      type: number
                    md5:
                      description: The md5 checksum of the did.
                      type: string
                    name:
                      description: The name of the did.
                      type: string
                    scope:
                      description: The scope of the did.
                      type: string
                    type:
                      description: The type of the did.
                      type: string
                  required:
                    - scope
                    - name
                    - type
                    - bytes
                    - adler32
                    - md5
                  type: object
                type: array
          description: Did found
        '401':
          description: Invalid Auth Token
        '404':
          description: Scope not found
        '406':
          description: Not acceptable
      summary: Get did
      tags:
        - Data Identifiers
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url http://undefinedundefined/dids/{scope_name}/dids \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: |-
            import requests

            url = "http://undefinedundefined/dids/{scope_name}/dids"

            headers = {"X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"}

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url = 'http://undefinedundefined/dids/{scope_name}/dids';


            let options = {method: 'GET', headers: {'X-Rucio-Auth-Token':
            'REPLACE_KEY_VALUE'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /dids/{scope_name}/meta:
    delete:
      description: Deletes the specified metadata from the did.
      parameters:
        - description: The scope and the name of the did.
          in: path
          name: scope_name
          required: true
          schema:
            type: string
          style: simple
        - description: The key to delete.
          in: query
          name: key
          schema:
            type: string
      responses:
        '200':
          description: OK
        '400':
          description: scope_name could not be parsed.
        '401':
          description: Invalid Auth Token
        '404':
          description: Did or key not found
        '406':
          description: Not acceptable
        '409':
          description: Feature is not in current database.
      summary: Delete metadata
      tags:
        - Data Identifiers
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url 'http://undefinedundefined/dids/{scope_name}/meta?key=SOME_STRING_VALUE' \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: >-
            import requests


            url = "http://undefinedundefined/dids/{scope_name}/meta"


            querystring = {"key":"SOME_STRING_VALUE"}


            headers = {"X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"}


            response = requests.request("DELETE", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'http://undefinedundefined/dids/{scope_name}/meta?key=SOME_STRING_VALUE';


            let options = {method: 'DELETE', headers: {'X-Rucio-Auth-Token':
            'REPLACE_KEY_VALUE'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
    post:
      description: Add metadata to a did.
      parameters:
        - description: The scope and the name of the did.
          in: path
          name: scope_name
          required: true
          schema:
            type: string
          style: simple
      requestBody:
        content:
          application/json:
            schema:
              properties:
                meta:
                  description: >-
                    The metadata to add. A dictionary containg the metadata name
                    as key and the value as value.
                  type: object
                recursive:
                  default: false
                  description: >-
                    Flag if the metadata should be applied recirsively to
                    children.
                  type: boolean
              required:
                - meta
              type: object
      responses:
        '201':
          content:
            application/json:
              schema:
                enum:
                  - Created
                type: string
          description: Created
        '401':
          description: Invalid Auth Token
        '404':
          description: Not found
        '406':
          description: Not acceptable
      summary: Add metadata
      tags:
        - Data Identifiers
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request POST \
              --url http://undefinedundefined/dids/{scope_name}/meta \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE' \
              --header 'content-type: application/json' \
              --data '{"meta":{},"recursive":false}'
        - lang: Python
          source: >-
            import requests


            url = "http://undefinedundefined/dids/{scope_name}/meta"


            payload = {
                "meta": {},
                "recursive": False
            }

            headers = {
                "X-Rucio-Auth-Token": "REPLACE_KEY_VALUE",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'http://undefinedundefined/dids/{scope_name}/meta';

            let options = {
              method: 'POST',
              headers: {'X-Rucio-Auth-Token': 'REPLACE_KEY_VALUE', 'content-type': 'application/json'},
              body: '{"meta":{},"recursive":false}'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
    get:
      description: Get the metadata of a did.
      parameters:
        - description: The scope and the name of the did.
          in: path
          name: scope_name
          required: true
          schema:
            type: string
          style: simple
        - description: The plugin to use.
          in: query
          name: plugin
          schema:
            default: DID_COLUMN
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                description: A data identifer with all attributes.
                type: object
          description: OK
        '401':
          description: Invalid Auth Token
        '404':
          description: Did not found
        '406':
          description: Not acceptable
      summary: Get metadata
      tags:
        - Data Identifiers
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'http://undefinedundefined/dids/{scope_name}/meta?plugin=SOME_STRING_VALUE' \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: >-
            import requests


            url = "http://undefinedundefined/dids/{scope_name}/meta"


            querystring = {"plugin":"SOME_STRING_VALUE"}


            headers = {"X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'http://undefinedundefined/dids/{scope_name}/meta?plugin=SOME_STRING_VALUE';


            let options = {method: 'GET', headers: {'X-Rucio-Auth-Token':
            'REPLACE_KEY_VALUE'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /dids/{scope_name}/meta/{key}:
    post:
      description: Add metadata to a did.
      parameters:
        - description: The scope and the name of the did.
          in: path
          name: scope_name
          required: true
          schema:
            type: string
          style: simple
        - description: The key for the metadata.
          in: path
          name: key
          required: true
          schema:
            type: string
          style: simple
      requestBody:
        content:
          application/json:
            schema:
              properties:
                value:
                  description: The value to set.
                  type: object
              required:
                - value
              type: object
      responses:
        '201':
          content:
            application/json:
              schema:
                enum:
                  - Created
                type: string
          description: Created
        '400':
          description: Invalid key or value
        '401':
          description: Invalid Auth Token
        '404':
          description: Did not found
        '406':
          description: Not acceptable
        '409':
          description: Matadata already exists
      summary: Add metadata
      tags:
        - Data Identifiers
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request POST \
              --url http://undefinedundefined/dids/{scope_name}/meta/{key} \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE' \
              --header 'content-type: application/json' \
              --data '{"value":{}}'
        - lang: Python
          source: >-
            import requests


            url = "http://undefinedundefined/dids/{scope_name}/meta/{key}"


            payload = {"value": {}}

            headers = {
                "X-Rucio-Auth-Token": "REPLACE_KEY_VALUE",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'http://undefinedundefined/dids/{scope_name}/meta/{key}';

            let options = {
              method: 'POST',
              headers: {'X-Rucio-Auth-Token': 'REPLACE_KEY_VALUE', 'content-type': 'application/json'},
              body: '{"value":{}}'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /dids/bulkdidsmeta:
    post:
      description: Adds metadata in a bulk.
      requestBody:
        content:
          application/json:
            schema:
              properties:
                dids:
                  description: A list with all the dids and the metadata.
                  items:
                    description: The did and associated metadata.
                    properties:
                      meta:
                        description: >-
                          The metadata to add. A dictionary with the meta key as
                          key and the value as value.
                        type: object
                      name:
                        description: The name of the did.
                        type: string
                      scope:
                        description: The scope of the did.
                        type: string
                    type: object
                  type: array
              required:
                - dids
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                enum:
                  - Created
                type: string
          description: Created
        '401':
          description: Invalid Auth Token
        '404':
          description: Did not found
        '406':
          description: Not acceptable
        '409':
          description: Unsupported Operation
      summary: Add metadata bulk
      tags:
        - Data Identifiers
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request POST \
              --url http://undefinedundefined/dids/bulkdidsmeta \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE' \
              --header 'content-type: application/json' \
              --data '{"dids":[{"meta":{},"name":"string","scope":"string"}]}'
        - lang: Python
          source: >-
            import requests


            url = "http://undefinedundefined/dids/bulkdidsmeta"


            payload = {"dids": [
                    {
                        "meta": {},
                        "name": "string",
                        "scope": "string"
                    }
                ]}
            headers = {
                "X-Rucio-Auth-Token": "REPLACE_KEY_VALUE",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'http://undefinedundefined/dids/bulkdidsmeta';

            let options = {
              method: 'POST',
              headers: {'X-Rucio-Auth-Token': 'REPLACE_KEY_VALUE', 'content-type': 'application/json'},
              body: '{"dids":[{"meta":{},"name":"string","scope":"string"}]}'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /dids/{scope_name}/rules:
    get:
      description: Lists all rules of a given did.
      parameters:
        - description: The scope and the name of the did.
          in: path
          name: scope_name
          required: true
          schema:
            type: string
          style: simple
      responses:
        '200':
          content:
            application/x-json-stream:
              schema:
                description: The rules associated with a did.
                items:
                  description: A rule.
                  type: object
                type: array
          description: The rules associated with a did.
        '401':
          description: Invalid Auth Token
        '404':
          description: Did or rule not found
        '406':
          description: Not acceptable
      summary: Get rules
      tags:
        - Data Identifiers
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url http://undefinedundefined/dids/{scope_name}/rules \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: |-
            import requests

            url = "http://undefinedundefined/dids/{scope_name}/rules"

            headers = {"X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"}

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url = 'http://undefinedundefined/dids/{scope_name}/rules';


            let options = {method: 'GET', headers: {'X-Rucio-Auth-Token':
            'REPLACE_KEY_VALUE'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /dids/{scope_name}/parents:
    get:
      description: Lists all parents of the did.
      parameters:
        - description: The scope and the name of the did.
          in: path
          name: scope_name
          required: true
          schema:
            type: string
          style: simple
      responses:
        '200':
          content:
            application/x-json-stream:
              schema:
                description: The parents of the did.
                items:
                  description: A parent of the did.
                  properties:
                    name:
                      description: The name of the did.
                      type: string
                    scope:
                      description: The scope of the did.
                      type: string
                    type:
                      description: The type of the did.
                      type: string
                  type: object
                type: array
          description: OK
        '401':
          description: Invalid Auth Token
        '404':
          description: Did not found
        '406':
          description: Not acceptable
      summary: Get Parents
      tags:
        - Data Identifiers
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url http://undefinedundefined/dids/{scope_name}/parents \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: |-
            import requests

            url = "http://undefinedundefined/dids/{scope_name}/parents"

            headers = {"X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"}

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url = 'http://undefinedundefined/dids/{scope_name}/parents';


            let options = {method: 'GET', headers: {'X-Rucio-Auth-Token':
            'REPLACE_KEY_VALUE'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /dids/{scope_name}/associated_rules:
    get:
      description: Gets all associated rules for a file.
      parameters:
        - description: The scope and the name of the did.
          in: path
          name: scope_name
          required: true
          schema:
            type: string
          style: simple
      responses:
        '200':
          content:
            application/x-json-stream:
              schema:
                description: >-
                  All associated rules for a file. Items are seperated by new
                  line character.
                items:
                  description: >-
                    A replication rule associated with the file. Has more fields
                    than listed here.
                  properties:
                    account:
                      description: The account associated with the rule.
                      type: string
                    id:
                      description: The id of the rule.
                      type: string
                    name:
                      description: The name of the rule.
                      type: string
                    rse_expression:
                      description: The rse expression of the rule.
                      type: string
                    scope:
                      description: The scope associated with the rule.
                      type: string
                    state:
                      description: The state of the rule.
                      type: string
                    subscription_id:
                      description: The subscription id of the rule.
                      type: string
                  type: object
                type: array
          description: OK
        '401':
          description: Invalid Auth Token
        '404':
          description: Did not found
        '406':
          description: Not acceptable
      summary: Get accociated rules
      tags:
        - Data Identifiers
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url http://undefinedundefined/dids/{scope_name}/associated_rules \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: |-
            import requests

            url = "http://undefinedundefined/dids/{scope_name}/associated_rules"

            headers = {"X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"}

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'http://undefinedundefined/dids/{scope_name}/associated_rules';


            let options = {method: 'GET', headers: {'X-Rucio-Auth-Token':
            'REPLACE_KEY_VALUE'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /dids/{scope_name}/follow:
    delete:
      description: Mark the input DID as not followed
      parameters:
        - description: The scope and the name of the did.
          in: path
          name: scope_name
          required: true
          schema:
            type: string
          style: simple
      requestBody:
        content:
          application/json:
            schema:
              properties:
                account:
                  description: The account to unfollow the did.
                  type: string
              required:
                - account
              type: object
      responses:
        '200':
          description: OK
        '401':
          description: Invalid Auth Token
        '404':
          description: Not found
        '500':
          description: Internal error
      summary: Delete follow
      tags:
        - Data Identifiers
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url http://undefinedundefined/dids/{scope_name}/follow \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE' \
              --header 'content-type: application/json' \
              --data '{"account":"string"}'
        - lang: Python
          source: >-
            import requests


            url = "http://undefinedundefined/dids/{scope_name}/follow"


            payload = {"account": "string"}

            headers = {
                "X-Rucio-Auth-Token": "REPLACE_KEY_VALUE",
                "content-type": "application/json"
            }


            response = requests.request("DELETE", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'http://undefinedundefined/dids/{scope_name}/follow';

            let options = {
              method: 'DELETE',
              headers: {'X-Rucio-Auth-Token': 'REPLACE_KEY_VALUE', 'content-type': 'application/json'},
              body: '{"account":"string"}'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
    post:
      description: Mark the input DID as being followed by the given account.
      parameters:
        - description: The scope and the name of the did.
          in: path
          name: scope_name
          required: true
          schema:
            type: string
          style: simple
      requestBody:
        content:
          application/json:
            schema:
              properties:
                account:
                  description: The account to follow the did.
                  type: string
              required:
                - account
              type: object
      responses:
        '201':
          description: OK
        '400':
          description: Scope or name could not be interpreted
        '401':
          description: Invalid Auth Token
        '404':
          description: Not found
        '500':
          description: Internal error
      summary: Post follow
      tags:
        - Data Identifiers
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request POST \
              --url http://undefinedundefined/dids/{scope_name}/follow \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE' \
              --header 'content-type: application/json' \
              --data '{"account":"string"}'
        - lang: Python
          source: >-
            import requests


            url = "http://undefinedundefined/dids/{scope_name}/follow"


            payload = {"account": "string"}

            headers = {
                "X-Rucio-Auth-Token": "REPLACE_KEY_VALUE",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'http://undefinedundefined/dids/{scope_name}/follow';

            let options = {
              method: 'POST',
              headers: {'X-Rucio-Auth-Token': 'REPLACE_KEY_VALUE', 'content-type': 'application/json'},
              body: '{"account":"string"}'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
    get:
      description: Get all followers for a specific did.
      parameters:
        - description: The scope and the name of the did.
          in: path
          name: scope_name
          required: true
          schema:
            type: string
          style: simple
      responses:
        '200':
          content:
            application/json:
              schema:
                description: A list of all followers of a did.
                items:
                  description: A follower of a did.
                  properties:
                    user:
                      description: The user which follows the did.
                      type: string
                  type: object
                type: array
          description: OK
        '400':
          description: Value error
        '401':
          description: Invalid Auth Token
        '404':
          description: Did not found
        '406':
          description: Not acceptable
      summary: Get followers
      tags:
        - Data Identifiers
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url http://undefinedundefined/dids/{scope_name}/follow \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: |-
            import requests

            url = "http://undefinedundefined/dids/{scope_name}/follow"

            headers = {"X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"}

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url = 'http://undefinedundefined/dids/{scope_name}/follow';


            let options = {method: 'GET', headers: {'X-Rucio-Auth-Token':
            'REPLACE_KEY_VALUE'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /dids:
    post:
      description: Add new Dids in bulk.
      requestBody:
        content:
          application/json:
            schema:
              items:
                description: One did to add.
                properties:
                  account:
                    description: The account associated with the did.
                    type: string
                  name:
                    description: The did name.
                    type: string
                  scope:
                    description: The did scope.
                    type: string
                  statuses:
                    description: The monotonic status
                    type: string
                  type:
                    description: The type of the did.
                    enum:
                      - F
                      - D
                      - C
                      - A
                      - X
                      - 'Y'
                      - Z
                    type: string
                required:
                  - scope
                  - name
                  - type
                type: object
              type: array
      responses:
        '201':
          content:
            application/json:
              schema:
                enum:
                  - Created
                type: string
          description: OK
        '401':
          description: Invalid Auth Token
        '406':
          description: Not acceptable
        '409':
          description: Did already exists
      summary: Add Dids bulk
      tags:
        - Data Identifiers
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request POST \
              --url http://undefinedundefined/dids \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE' \
              --header 'content-type: application/json' \
              --data '[{"account":"string","name":"string","scope":"string","statuses":"string","type":"F"}]'
        - lang: Python
          source: >-
            import requests


            url = "http://undefinedundefined/dids"


            payload = [
                {
                    "account": "string",
                    "name": "string",
                    "scope": "string",
                    "statuses": "string",
                    "type": "F"
                }
            ]

            headers = {
                "X-Rucio-Auth-Token": "REPLACE_KEY_VALUE",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'http://undefinedundefined/dids';

            let options = {
              method: 'POST',
              headers: {'X-Rucio-Auth-Token': 'REPLACE_KEY_VALUE', 'content-type': 'application/json'},
              body: '[{"account":"string","name":"string","scope":"string","statuses":"string","type":"F"}]'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /dids/{input_scope}/{input_name}/{output_scope}/{output_name}/{nbfiles}/sample:
    post:
      description: Creates a sample from an input collection.
      parameters:
        - description: The input scope.
          in: path
          name: input_scope
          required: true
          schema:
            type: string
          style: simple
        - description: The input name.
          in: path
          name: input_name
          required: true
          schema:
            type: string
          style: simple
        - description: The output scope.
          in: path
          name: output_scope
          required: true
          schema:
            type: string
          style: simple
        - description: The output name.
          in: path
          name: output_name
          required: true
          schema:
            type: string
          style: simple
        - description: The number of files to register in the output dataset.
          in: path
          name: nbfiles
          required: true
          schema:
            type: string
          style: simple
      responses:
        '201':
          content:
            application/json:
              schema:
                enum:
                  - Created
                type: string
          description: OK
        '401':
          description: Invalid Auth Token
        '404':
          description: Not found
        '406':
          description: Not acceptable
        '409':
          description: Duplication
      summary: Create sample
      tags:
        - Data Identifiers
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request POST \
              --url http://undefinedundefined/dids/{input_scope}/{input_name}/{output_scope}/{output_name}/{nbfiles}/sample \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: >-
            import requests


            url =
            "http://undefinedundefined/dids/{input_scope}/{input_name}/{output_scope}/{output_name}/{nbfiles}/sample"


            headers = {"X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"}


            response = requests.request("POST", url, headers=headers)


            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'http://undefinedundefined/dids/{input_scope}/{input_name}/{output_scope}/{output_name}/{nbfiles}/sample';


            let options = {method: 'POST', headers: {'X-Rucio-Auth-Token':
            'REPLACE_KEY_VALUE'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /dids/attachments:
    post:
      description: Attaches a did to another did
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - description: An array containing all dids. Duplicates are not ignored.
                  properties:
                    dids:
                      description: The dids associated to the did.
                      items:
                        description: A did.
                        properties:
                          name:
                            description: The name of the did.
                            type: string
                          scope:
                            description: The scope of the did.
                            type: string
                        required:
                          - scope
                          - name
                        type: object
                      type: array
                    name:
                      description: The name of the did.
                      type: string
                    rse_id:
                      description: The rse id of the did.
                      type: string
                    scope:
                      description: The scope of the did.
                      type: string
                  required:
                    - scope
                    - name
                    - dids
                  type: array
                - properties:
                    attachments:
                      description: >-
                        An array containing all dids. Duplicates are not
                        ignored.
                      properties:
                        dids:
                          description: The dids associated to the did.
                          items:
                            description: A did.
                            properties:
                              name:
                                description: The name of the did.
                                type: string
                              scope:
                                description: The scope of the did.
                                type: string
                            required:
                              - scope
                              - name
                            type: object
                          type: array
                        name:
                          description: The name of the did.
                          type: string
                        rse_id:
                          description: The rse id of the did.
                          type: string
                        scope:
                          description: The scope of the did.
                          type: string
                      required:
                        - scope
                        - name
                        - dids
                      type: array
                    ignore_duplicates:
                      default: false
                      description: If duplicates should be ignored.
                      type: boolean
                  required:
                    - attachments
                  type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                enum:
                  - Created
                type: string
          description: OK
        '401':
          description: Invalid Auth Token
        '404':
          description: Not found
        '406':
          description: Not acceptable
      summary: Attach did to did
      tags:
        - Data Identifiers
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request POST \
              --url http://undefinedundefined/dids/attachments \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE' \
              --header 'content-type: application/json' \
              --data '[]'
        - lang: Python
          source: >-
            import requests


            url = "http://undefinedundefined/dids/attachments"


            payload = []

            headers = {
                "X-Rucio-Auth-Token": "REPLACE_KEY_VALUE",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'http://undefinedundefined/dids/attachments';

            let options = {
              method: 'POST',
              headers: {'X-Rucio-Auth-Token': 'REPLACE_KEY_VALUE', 'content-type': 'application/json'},
              body: '[]'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /dids/new:
    get:
      description: Returns a list of recent identifiers.
      parameters:
        - description: The type of the did.
          in: query
          name: type
          required: false
          schema:
            type: string
      responses:
        '200':
          content:
            application/x-json-stream:
              schema:
                description: >-
                  A list of the recent dids. Items are seperated by new line
                  characters.
                items:
                  description: A did.
                  properties:
                    did_type:
                      description: The type of the did.
                      type: string
                    name:
                      description: The name of the did.
                      type: string
                    scope:
                      description: The scope of the did.
                      type: string
                  type: object
                type: array
          description: OK
        '401':
          description: Invalid Auth Token
        '406':
          description: Not acceptable
      summary: Get recent identifiers
      tags:
        - Data Identifiers
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'http://undefinedundefined/dids/new?type=SOME_STRING_VALUE' \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: >-
            import requests


            url = "http://undefinedundefined/dids/new"


            querystring = {"type":"SOME_STRING_VALUE"}


            headers = {"X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'http://undefinedundefined/dids/new?type=SOME_STRING_VALUE';


            let options = {method: 'GET', headers: {'X-Rucio-Auth-Token':
            'REPLACE_KEY_VALUE'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /dids/resurrect:
    post:
      description: Resurrect all given dids.
      requestBody:
        content:
          application/json:
            schema:
              description: List of did to resurrect.
              items:
                description: A did to resurrect.
                properties:
                  name:
                    description: The name of the did
                    type: string
                  scope:
                    description: The scope of the did.
                    type: string
                type: object
              type: array
      responses:
        '201':
          content:
            application/json:
              schema:
                enum:
                  - Created
                type: string
          description: OK
        '401':
          description: Invalid Auth Token
        '404':
          description: Not found
        '409':
          description: Conflict
        '500':
          description: Internal error
      summary: Resurrect dids
      tags:
        - Data Identifiers
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request POST \
              --url http://undefinedundefined/dids/resurrect \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE' \
              --header 'content-type: application/json' \
              --data '[{"name":"string","scope":"string"}]'
        - lang: Python
          source: >-
            import requests


            url = "http://undefinedundefined/dids/resurrect"


            payload = [
                {
                    "name": "string",
                    "scope": "string"
                }
            ]

            headers = {
                "X-Rucio-Auth-Token": "REPLACE_KEY_VALUE",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'http://undefinedundefined/dids/resurrect';

            let options = {
              method: 'POST',
              headers: {'X-Rucio-Auth-Token': 'REPLACE_KEY_VALUE', 'content-type': 'application/json'},
              body: '[{"name":"string","scope":"string"}]'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /dids/bulkmeta:
    post:
      description: List all metadata of a list of data identifiers.
      requestBody:
        content:
          application/x-json-stream:
            schema:
              properties:
                dids:
                  description: The dids.
                  items:
                    description: A did.
                    properties:
                      name:
                        description: The name of the did.
                        type: string
                      scope:
                        description: The scope of the did.
                        type: string
                    type: object
                  type: array
                inherit:
                  default: false
                  description: Concatenated the metadata of the parent if set to true.
                  type: boolean
              required:
                - dids
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                description: >-
                  A list of metadata identifiers for the dids. Seperated by new
                  lines.
                items:
                  description: The metadata for one did.
                  type: object
                type: array
          description: OK
        '400':
          description: Cannot decode json parameter list
        '401':
          description: Invalid Auth Token
        '404':
          description: Did not found
        '406':
          description: Not acceptable
      summary: Get metadata bulk
      tags:
        - Data Identifiers
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request POST \
              --url http://undefinedundefined/dids/bulkmeta \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: |-
            import requests

            url = "http://undefinedundefined/dids/bulkmeta"

            headers = {"X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"}

            response = requests.request("POST", url, headers=headers)

            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url = 'http://undefinedundefined/dids/bulkmeta';


            let options = {method: 'POST', headers: {'X-Rucio-Auth-Token':
            'REPLACE_KEY_VALUE'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /dirac/addfiles:
    post:
      description: >
        Atomic method used by the RucioFileCatalog plugin in Dirac that:

        - Creates files and their replicas

        - Creates the dataset containing the files and attach the files to the
        dataset

        - Creates a rule on the dataset with RSE expression ANY and grouping
        NONE

        - Creates all the container hierarchy containing the dataset
      requestBody:
        content:
          application/json:
            schema:
              properties:
                ignore_availability:
                  description: If the availability should be ignored.
                  type: boolean
                lfns:
                  description: >-
                    List of lfn (dictionary {'lfn': <lfn>, 'rse': <rse>,
                    'bytes': <bytes>, 'adler32': <adler32>, 'guid': <guid>,
                    'pfn': <pfn>}.
                  items:
                    type: object
                  type: array
              required:
                - lfns
              type: object
      responses:
        '201':
          content:
            application/json:
              schema:
                enum:
                  - Created
                type: string
          description: OK
        '400':
          description: Cannot decode json parameter list.
        '401':
          description: Invalid Auth Token
        '404':
          description: DID not found
        '405':
          description: Unsupported Operation
        '409':
          description: Duplicate
        '503':
          description: Temporary error.
      summary: Add files
      tags:
        - Dirac
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request POST \
              --url http://undefinedundefined/dirac/addfiles \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE' \
              --header 'content-type: application/json' \
              --data '{"ignore_availability":true,"lfns":[{}]}'
        - lang: Python
          source: >-
            import requests


            url = "http://undefinedundefined/dirac/addfiles"


            payload = {
                "ignore_availability": True,
                "lfns": [{}]
            }

            headers = {
                "X-Rucio-Auth-Token": "REPLACE_KEY_VALUE",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'http://undefinedundefined/dirac/addfiles';

            let options = {
              method: 'POST',
              headers: {'X-Rucio-Auth-Token': 'REPLACE_KEY_VALUE', 'content-type': 'application/json'},
              body: '{"ignore_availability":true,"lfns":[{}]}'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /export:
    get:
      description: Export data from rucio.
      parameters:
        - description: Should the distance be enabled?
          in: query
          name: distance
          required: false
          schema:
            type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                description: Dictionary with rucio data.
                type: object
          description: OK
        '401':
          description: Invalid Auth Token
        '406':
          description: Not acceptable
      summary: Export data
      tags:
        - Export
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'http://undefinedundefined/export?distance=SOME_BOOLEAN_VALUE' \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: >-
            import requests


            url = "http://undefinedundefined/export"


            querystring = {"distance":"SOME_BOOLEAN_VALUE"}


            headers = {"X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'http://undefinedundefined/export?distance=SOME_BOOLEAN_VALUE';


            let options = {method: 'GET', headers: {'X-Rucio-Auth-Token':
            'REPLACE_KEY_VALUE'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /heartbeats:
    post:
      requestBody:
        content:
          application/json:
            schema:
              properties:
                executable:
                  description: Name of the executable.
                  type: string
                hostname:
                  description: Name of the host.
                  type: string
                older_than:
                  description: >-
                    Ignore specified heartbeats older than specified nr of
                    seconds.
                  type: integer
                payload:
                  description: >-
                    Payload identifier which can be further used to identify the
                    work a certain thread is executing.
                  type: string
                pid:
                  description: UNIX Process ID as a number, e.g., 1234.
                  type: integer
              required:
                - bytes
              type: object
      responses:
        '200':
          description: OK
        '400':
          description: Cannot decode json parameter list.
        '401':
          description: Invalid Auth Token
        '404':
          description: Key not found.
      summary: Create
      tags:
        - Heartbeat
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request POST \
              --url http://undefinedundefined/heartbeats \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE' \
              --header 'content-type: application/json' \
              --data '{"executable":"string","hostname":"string","older_than":0,"payload":"string","pid":0}'
        - lang: Python
          source: >-
            import requests


            url = "http://undefinedundefined/heartbeats"


            payload = {
                "executable": "string",
                "hostname": "string",
                "older_than": 0,
                "payload": "string",
                "pid": 0
            }

            headers = {
                "X-Rucio-Auth-Token": "REPLACE_KEY_VALUE",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'http://undefinedundefined/heartbeats';

            let options = {
              method: 'POST',
              headers: {'X-Rucio-Auth-Token': 'REPLACE_KEY_VALUE', 'content-type': 'application/json'},
              body: '{"executable":"string","hostname":"string","older_than":0,"payload":"string","pid":0}'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
    get:
      description: List all heartbeats.
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  description: List of tuples [('Executable', 'Hostname', ...), ...]
                  type: object
                type: array
          description: OK
        '401':
          description: Invalid Auth Token
        '406':
          description: Not acceptable
      summary: List
      tags:
        - Heartbeat
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url http://undefinedundefined/heartbeats \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: |-
            import requests

            url = "http://undefinedundefined/heartbeats"

            headers = {"X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"}

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url = 'http://undefinedundefined/heartbeats';


            let options = {method: 'GET', headers: {'X-Rucio-Auth-Token':
            'REPLACE_KEY_VALUE'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /identities/{account}/userpass:
    put:
      description: Creates a new UserPass identity and maps it to an account.
      parameters:
        - description: The account for the identity.
          in: path
          name: account
          required: true
          schema:
            type: string
          style: simple
        - description: Username for the identity.
          in: query
          name: X-Rucio-Username
          required: true
          schema:
            type: string
          style: simple
        - description: The password for the identity.
          in: query
          name: X-Rucio-Password
          required: true
          schema:
            type: string
          style: simple
        - description: The email for the identity.
          in: query
          name: X-Rucio-Email
          required: false
          schema:
            type: string
          style: simple
      responses:
        '201':
          content:
            application/json:
              schema:
                enum:
                  - Created
                type: string
          description: OK
        '400':
          description: Missing username or password.
        '401':
          description: Invalid Auth Token
      summary: Create UserPass identity
      tags:
        - Identity
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request PUT \
              --url 'http://undefinedundefined/identities/{account}/userpass?X-Rucio-Username=SOME_STRING_VALUE&X-Rucio-Password=SOME_STRING_VALUE&X-Rucio-Email=SOME_STRING_VALUE' \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: >-
            import requests


            url = "http://undefinedundefined/identities/{account}/userpass"


            querystring =
            {"X-Rucio-Username":"SOME_STRING_VALUE","X-Rucio-Password":"SOME_STRING_VALUE","X-Rucio-Email":"SOME_STRING_VALUE"}


            headers = {"X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"}


            response = requests.request("PUT", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'http://undefinedundefined/identities/{account}/userpass?X-Rucio-Username=SOME_STRING_VALUE&X-Rucio-Password=SOME_STRING_VALUE&X-Rucio-Email=SOME_STRING_VALUE';


            let options = {method: 'PUT', headers: {'X-Rucio-Auth-Token':
            'REPLACE_KEY_VALUE'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /identities/{account}/x509:
    put:
      description: Creates a new X509 identity and maps it to an account.
      parameters:
        - description: The account for the identity.
          in: path
          name: account
          required: true
          schema:
            type: string
          style: simple
        - description: The email for the identity.
          in: query
          name: X-Rucio-Email
          required: false
          schema:
            type: string
          style: simple
      responses:
        '201':
          content:
            application/json:
              schema:
                enum:
                  - Created
                type: string
          description: OK
        '401':
          description: Invalid Auth Token
      summary: Create X509 identity
      tags:
        - Identity
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request PUT \
              --url 'http://undefinedundefined/identities/{account}/x509?X-Rucio-Email=SOME_STRING_VALUE' \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: >-
            import requests


            url = "http://undefinedundefined/identities/{account}/x509"


            querystring = {"X-Rucio-Email":"SOME_STRING_VALUE"}


            headers = {"X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"}


            response = requests.request("PUT", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'http://undefinedundefined/identities/{account}/x509?X-Rucio-Email=SOME_STRING_VALUE';


            let options = {method: 'PUT', headers: {'X-Rucio-Auth-Token':
            'REPLACE_KEY_VALUE'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /identities/{account}/gss:
    put:
      description: Creates a new GSS identity and maps it to an account.
      parameters:
        - description: The account for the identity.
          in: path
          name: account
          required: true
          schema:
            type: string
          style: simple
        - description: The email for the identity.
          in: query
          name: X-Rucio-Email
          required: false
          schema:
            type: string
          style: simple
      responses:
        '201':
          content:
            application/json:
              schema:
                enum:
                  - Created
                type: string
          description: OK
        '401':
          description: Invalid Auth Token
      summary: Create GSS identity
      tags:
        - Identity
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request PUT \
              --url 'http://undefinedundefined/identities/{account}/gss?X-Rucio-Email=SOME_STRING_VALUE' \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: >-
            import requests


            url = "http://undefinedundefined/identities/{account}/gss"


            querystring = {"X-Rucio-Email":"SOME_STRING_VALUE"}


            headers = {"X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"}


            response = requests.request("PUT", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'http://undefinedundefined/identities/{account}/gss?X-Rucio-Email=SOME_STRING_VALUE';


            let options = {method: 'PUT', headers: {'X-Rucio-Auth-Token':
            'REPLACE_KEY_VALUE'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /identities/{identity_key}/{type}/accounts:
    get:
      description: List all identities mapped to an account.
      parameters:
        - description: Identity string.
          in: path
          name: identity_key
          required: true
          schema:
            type: string
          style: simple
        - description: Identity type.
          in: path
          name: type
          required: true
          schema:
            type: string
          style: simple
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  description: Account for the identity.
                  type: object
                type: array
          description: OK
        '401':
          description: Not acceptable
      summary: List
      tags:
        - Identity
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url http://undefinedundefined/identities/{identity_key}/{type}/accounts \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: >-
            import requests


            url =
            "http://undefinedundefined/identities/{identity_key}/{type}/accounts"


            headers = {"X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'http://undefinedundefined/identities/{identity_key}/{type}/accounts';


            let options = {method: 'GET', headers: {'X-Rucio-Auth-Token':
            'REPLACE_KEY_VALUE'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /import:
    post:
      description: Import data into rucio
      requestBody:
        content:
          application/json:
            schema:
              properties:
                accounts:
                  description: Account data.
                  items:
                    description: An account.
                    properties:
                      account:
                        description: The account identifier.
                        type: string
                      email:
                        description: The email of an account.
                        type: string
                      identities:
                        description: >-
                          The identiies accociated with an account. Deletes old
                          identites and adds the newly defined ones.
                        items:
                          description: One identity associated with an account.
                          properties:
                            identity:
                              description: Identifier of the identity.
                              type: string
                            password:
                              description: The password if the type is USERPASS.
                              type: string
                            type:
                              description: The type of the identity.
                              enum:
                                - X509
                                - GSS
                                - USERPASS
                                - SSH
                                - SAML
                                - OIDC
                              type: string
                          type: object
                        type: array
                    type: object
                  type: array
                distances:
                  additionalProperties:
                    additionalProperties:
                      description: Distance for two rses.
                      properties:
                        distance:
                          description: The distance between the rses.
                          type: integer
                        ranking:
                          deprecated: true
                          description: Same as distance
                          type: integer
                      type: object
                      x-additionalPropertiesName: dest rse
                    description: Distances with dest rse as key.
                    type: object
                    x-additionalPropertiesName: src rse
                  description: Distances data with src rse name as key.
                  type: object
                rses:
                  additionalProperties:
                    properties:
                      rse_type:
                        description: The type of an rse.
                        enum:
                          - DISK
                          - TAPE
                        type: string
                    type: object
                    x-additionalPropertiesName: rse name
                  description: Rse data with rse name as key.
                  type: object
              type: object
      responses:
        '201':
          content:
            application/json:
              schema:
                enum:
                  - Created
                type: string
          description: OK
        '401':
          description: Invalid Auth Token
      summary: Import data
      tags:
        - Import
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request POST \
              --url http://undefinedundefined/import \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE' \
              --header 'content-type: application/json' \
              --data '{"accounts":[{"account":"string","email":"string","identities":[{"identity":"string","password":"string","type":"X509"}]}],"distances":{"src rse1":{"dest rse1":{"distance":0,"ranking":0},"dest rse2":{"distance":0,"ranking":0}},"src rse2":{"dest rse1":{"distance":0,"ranking":0},"dest rse2":{"distance":0,"ranking":0}}},"rses":{"rse name1":{"rse_type":"DISK"},"rse name2":{"rse_type":"DISK"}}}'
        - lang: Python
          source: >-
            import requests


            url = "http://undefinedundefined/import"


            payload = {
                "accounts": [
                    {
                        "account": "string",
                        "email": "string",
                        "identities": [
                            {
                                "identity": "string",
                                "password": "string",
                                "type": "X509"
                            }
                        ]
                    }
                ],
                "distances": {
                    "src rse1": {
                        "dest rse1": {
                            "distance": 0,
                            "ranking": 0
                        },
                        "dest rse2": {
                            "distance": 0,
                            "ranking": 0
                        }
                    },
                    "src rse2": {
                        "dest rse1": {
                            "distance": 0,
                            "ranking": 0
                        },
                        "dest rse2": {
                            "distance": 0,
                            "ranking": 0
                        }
                    }
                },
                "rses": {
                    "rse name1": {"rse_type": "DISK"},
                    "rse name2": {"rse_type": "DISK"}
                }
            }

            headers = {
                "X-Rucio-Auth-Token": "REPLACE_KEY_VALUE",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'http://undefinedundefined/import';

            let options = {
              method: 'POST',
              headers: {'X-Rucio-Auth-Token': 'REPLACE_KEY_VALUE', 'content-type': 'application/json'},
              body: '{"accounts":[{"account":"string","email":"string","identities":[{"identity":"string","password":"string","type":"X509"}]}],"distances":{"src rse1":{"dest rse1":{"distance":0,"ranking":0},"dest rse2":{"distance":0,"ranking":0}},"src rse2":{"dest rse1":{"distance":0,"ranking":0},"dest rse2":{"distance":0,"ranking":0}}},"rses":{"rse name1":{"rse_type":"DISK"},"rse name2":{"rse_type":"DISK"}}}'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /lifetime_exceptions/:
    post:
      description: Creates a Lifetime Exception.
      requestBody:
        content:
          application/json:
            schema:
              properties:
                comments:
                  description: The comment for the lifetime exception.
                  type: string
                dids:
                  description: List of dids associated with the lifetime exception.
                  items:
                    description: A did
                    properties:
                      name:
                        description: The name of the did.
                        type: string
                    type: object
                  type: array
                expires_at:
                  description: The expiration date for the lifetime exception.
                  type: string
                pattern:
                  description: The pattern of the lifetime exception.
                  type: string
              type: object
      responses:
        '201':
          content:
            application/json:
              schema:
                description: The exception id.
                type: string
          description: OK
        '400':
          description: Cannot decode json parameter list.
        '401':
          description: Invalid Auth Token
        '409':
          description: Lifetime exception already exists.
      summary: Create Exception
      tags:
        - Lifetime Exceptions
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request POST \
              --url http://undefinedundefined/lifetime_exceptions/ \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE' \
              --header 'content-type: application/json' \
              --data '{"comments":"string","dids":[{"name":"string"}],"expires_at":"string","pattern":"string"}'
        - lang: Python
          source: >-
            import requests


            url = "http://undefinedundefined/lifetime_exceptions/"


            payload = {
                "comments": "string",
                "dids": [{"name": "string"}],
                "expires_at": "string",
                "pattern": "string"
            }

            headers = {
                "X-Rucio-Auth-Token": "REPLACE_KEY_VALUE",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'http://undefinedundefined/lifetime_exceptions/';

            let options = {
              method: 'POST',
              headers: {'X-Rucio-Auth-Token': 'REPLACE_KEY_VALUE', 'content-type': 'application/json'},
              body: '{"comments":"string","dids":[{"name":"string"}],"expires_at":"string","pattern":"string"}'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
    get:
      description: Retrieves all exceptions.
      responses:
        '200':
          content:
            application/x-json-stream:
              schema:
                description: One exception per line.
                items:
                  description: A lifetime exception
                  properties:
                    account:
                      description: The account accociated with the lifetime exception.
                      type: string
                    comments:
                      description: The comments of the lifetime exception.
                      type: string
                    created_at:
                      description: The datetime the lifetime exception was created.
                      type: string
                    did_type:
                      description: The type of the did.
                      enum:
                        - F
                        - D
                        - C
                        - A
                        - X
                        - 'Y'
                        - Z
                      type: string
                    expires_at:
                      description: The datetime the lifetime exception expires.
                      type: string
                    id:
                      description: The id of the lifetime exception.
                      type: string
                    name:
                      description: The name of the lifetime exception.
                      type: string
                    pattern:
                      description: The patter of the lifetime exception.
                      type: string
                    scope:
                      description: The scope associated with the lifetime exception.
                      type: string
                    state:
                      description: The state of the lifetime exception.
                      enum:
                        - A
                        - R
                        - W
                      type: string
                  type: object
                type: array
          description: OK
        '401':
          description: Invalid Auth Token
        '404':
          description: Lifetime exception not found
        '406':
          description: Not acceptable
      summary: List Exceptions
      tags:
        - Lifetime Exceptions
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url http://undefinedundefined/lifetime_exceptions/ \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: |-
            import requests

            url = "http://undefinedundefined/lifetime_exceptions/"

            headers = {"X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"}

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url = 'http://undefinedundefined/lifetime_exceptions/';


            let options = {method: 'GET', headers: {'X-Rucio-Auth-Token':
            'REPLACE_KEY_VALUE'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /lifetime_exceptions/{exception_id}:
    put:
      description: Approve/Reject a Lifetime Exception.
      parameters:
        - description: The id of the Lifetime Exception.
          in: path
          name: exception_id
          required: true
          schema:
            type: string
          style: simple
      requestBody:
        content:
          application/json:
            schema:
              properties:
                state:
                  description: The new state for the Lifetime Exception.
                  enum:
                    - A
                    - R
                  type: string
              type: object
      responses:
        '201':
          content:
            application/json:
              schema:
                enum:
                  - Created
                type: string
          description: OK
        '400':
          description: Cannot decode json parameter list.
        '401':
          description: Invalid Auth Token
        '404':
          description: Lifetime Exception not found
      summary: Approve/Reject exception
      tags:
        - Lifetime Exceptions
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request PUT \
              --url http://undefinedundefined/lifetime_exceptions/{exception_id} \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE' \
              --header 'content-type: application/json' \
              --data '{"state":"A"}'
        - lang: Python
          source: >-
            import requests


            url = "http://undefinedundefined/lifetime_exceptions/{exception_id}"


            payload = {"state": "A"}

            headers = {
                "X-Rucio-Auth-Token": "REPLACE_KEY_VALUE",
                "content-type": "application/json"
            }


            response = requests.request("PUT", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'http://undefinedundefined/lifetime_exceptions/{exception_id}';


            let options = {
              method: 'PUT',
              headers: {'X-Rucio-Auth-Token': 'REPLACE_KEY_VALUE', 'content-type': 'application/json'},
              body: '{"state":"A"}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
    get:
      description: Get a single Lifetime Exception.
      parameters:
        - description: The id of the lifetime exception.
          in: path
          name: exception_id
          required: true
          schema:
            type: string
          style: simple
      responses:
        '200':
          content:
            application/x-json-stream:
              schema:
                description: List of lifetime exceptions associated with the id.
                items:
                  description: A lifetime exception
                  properties:
                    account:
                      description: The account associated with the lifetime exception.
                      type: string
                    comments:
                      description: The comments of the lifetime exception.
                      type: string
                    created_at:
                      description: The datetime the lifetime exception was created.
                      type: string
                    did_type:
                      description: The type of the did.
                      enum:
                        - F
                        - D
                        - C
                        - A
                        - X
                        - 'Y'
                        - Z
                      type: string
                    expires_at:
                      description: The datetime the lifetime exception expires.
                      type: string
                    id:
                      description: The id of the lifetime exception.
                      type: string
                    name:
                      description: The name of the lifetime exception.
                      type: string
                    pattern:
                      description: The patter of the lifetime exception.
                      type: string
                    scope:
                      description: The scope associated with the lifetime exception.
                      type: string
                    state:
                      description: The state of the lifetime exception.
                      enum:
                        - A
                        - R
                        - W
                      type: string
                  type: object
                type: array
          description: OK
        '401':
          description: Invalid Auth Token
        '404':
          description: Lifetime exception not found
        '406':
          description: Not acceptable
      summary: Get Exception
      tags:
        - Lifetime Exceptions
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url http://undefinedundefined/lifetime_exceptions/{exception_id} \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: |-
            import requests

            url = "http://undefinedundefined/lifetime_exceptions/{exception_id}"

            headers = {"X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"}

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'http://undefinedundefined/lifetime_exceptions/{exception_id}';


            let options = {method: 'GET', headers: {'X-Rucio-Auth-Token':
            'REPLACE_KEY_VALUE'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /locks/{rse}:
    get:
      description: Get all dataset locks for an associated rse.
      parameters:
        - description: The rse name.
          in: path
          name: rse
          required: true
          schema:
            type: string
          style: simple
      requestBody:
        content:
          application/json:
            schema:
              properties:
                did_type:
                  description: The did type to filter for.
                  enum:
                    - dataset
                  type: string
              type: object
      responses:
        '200':
          content:
            application/x-json-stream:
              schema:
                description: Locks associated with the rse.
                items:
                  description: A lock
                  properties:
                    accessed_at:
                      description: The last time is was accessed.
                      type: string
                    account:
                      description: The associated account.
                      type: string
                    bytes:
                      description: The bytes limit for the lock.
                      type: integer
                    length:
                      description: The length of the rule.
                      type: integer
                    name:
                      description: The name of the rule.
                      type: string
                    rse:
                      description: The name of the associated rse.
                      type: string
                    rse_id:
                      description: The id of the associated rse.
                      type: string
                    rule_id:
                      description: The id of the rule.
                      type: string
                    scope:
                      description: The scope of the associated rse.
                      type: string
                    state:
                      description: The state of the rule.
                      enum:
                        - R
                        - O
                        - S
                      type: string
                  type: object
                type: array
          description: OK
        '401':
          description: Invalid Auth Token
        '406':
          description: Not acceptable
        '500':
          content:
            application/json:
              schema:
                enum:
                  - wrong did_type specified
                type: string
          description: Wrong did type
      summary: Get locks by rse
      tags:
        - Lock
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url http://undefinedundefined/locks/{rse} \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE' \
              --header 'content-type: application/json' \
              --data '{"did_type":"dataset"}'
        - lang: Python
          source: >-
            import requests


            url = "http://undefinedundefined/locks/{rse}"


            payload = {"did_type": "dataset"}

            headers = {
                "X-Rucio-Auth-Token": "REPLACE_KEY_VALUE",
                "content-type": "application/json"
            }


            response = requests.request("GET", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'http://undefinedundefined/locks/{rse}';

            let options = {
              method: 'GET',
              headers: {'X-Rucio-Auth-Token': 'REPLACE_KEY_VALUE', 'content-type': 'application/json'},
              body: '{"did_type":"dataset"}'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /locks/{scope_name}:
    get:
      description: Get all dataset locks for an associated rse.
      parameters:
        - description: The scope name.
          in: path
          name: scope_name
          required: true
          schema:
            type: string
          style: simple
      requestBody:
        content:
          application/json:
            schema:
              properties:
                did_type:
                  description: The did type to filter for.
                  enum:
                    - dataset
                  type: string
              type: object
      responses:
        '200':
          content:
            application/x-json-stream:
              schema:
                description: Locks associated with the rse.
                items:
                  description: A lock
                  properties:
                    accessed_at:
                      description: The last time is was accessed.
                      type: string
                    account:
                      description: The associated account.
                      type: string
                    bytes:
                      description: The bytes limit for the lock.
                      type: integer
                    length:
                      description: The length of the rule.
                      type: integer
                    name:
                      description: The name of the rule.
                      type: string
                    rse:
                      description: The name of the associated rse.
                      type: string
                    rse_id:
                      description: The id of the associated rse.
                      type: string
                    rule_id:
                      description: The id of the rule.
                      type: string
                    scope:
                      description: The scope of the associated rse.
                      type: string
                    state:
                      description: The state of the rule.
                      enum:
                        - R
                        - O
                        - S
                      type: string
                  type: object
                type: array
          description: OK
        '401':
          description: Invalid Auth Token
        '406':
          description: Not acceptable
        '500':
          content:
            application/json:
              schema:
                enum:
                  - wrong did_type specified
                type: string
          description: Wrong did type
      summary: Get locks by scope
      tags:
        - Lock
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url http://undefinedundefined/locks/{scope_name} \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE' \
              --header 'content-type: application/json' \
              --data '{"did_type":"dataset"}'
        - lang: Python
          source: >-
            import requests


            url = "http://undefinedundefined/locks/{scope_name}"


            payload = {"did_type": "dataset"}

            headers = {
                "X-Rucio-Auth-Token": "REPLACE_KEY_VALUE",
                "content-type": "application/json"
            }


            response = requests.request("GET", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'http://undefinedundefined/locks/{scope_name}';

            let options = {
              method: 'GET',
              headers: {'X-Rucio-Auth-Token': 'REPLACE_KEY_VALUE', 'content-type': 'application/json'},
              body: '{"did_type":"dataset"}'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /locks/bulk_locks_for_dids:
    post:
      description: Get all dataset locks for the associated dids.
      requestBody:
        content:
          application/json:
            schema:
              properties:
                dids:
                  description: The dids associated with the locks.
                  items:
                    description: A did
                    properties:
                      name:
                        description: The name of the did.
                        type: string
                      scope:
                        description: The scope of the did.
                        type: string
                      type:
                        description: The type of the did.
                        enum:
                          - dataset
                          - container
                        type: string
                    required:
                      - scope
                      - name
                    type: object
                  type: array
              type: object
      responses:
        '200':
          content:
            application/x-json-stream:
              schema:
                description: Locks associated with the rse.
                items:
                  description: A lock
                  properties:
                    accessed_at:
                      description: The last time is was accessed.
                      type: string
                    account:
                      description: The associated account.
                      type: string
                    bytes:
                      description: The bytes limit for the lock.
                      type: integer
                    length:
                      description: The length of the rule.
                      type: integer
                    name:
                      description: The name of the rule.
                      type: string
                    rse:
                      description: The name of the associated rse.
                      type: string
                    rse_id:
                      description: The id of the associated rse.
                      type: string
                    rule_id:
                      description: The id of the rule.
                      type: string
                    scope:
                      description: The scope of the associated rse.
                      type: string
                    state:
                      description: The state of the rule.
                      enum:
                        - R
                        - O
                        - S
                      type: string
                  type: object
                type: array
          description: OK
        '400':
          content:
            application/json:
              schema:
                enum:
                  - >-
                    Can not find the list of DIDs in the data. Use "dids"
                    keyword.
                type: string
          description: Wrong did type
        '401':
          description: Invalid Auth Token
        '406':
          description: Not acceptable
      summary: Get locks by dids
      tags:
        - Lock
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request POST \
              --url http://undefinedundefined/locks/bulk_locks_for_dids \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE' \
              --header 'content-type: application/json' \
              --data '{"dids":[{"name":"string","scope":"string","type":"dataset"}]}'
        - lang: Python
          source: >-
            import requests


            url = "http://undefinedundefined/locks/bulk_locks_for_dids"


            payload = {"dids": [
                    {
                        "name": "string",
                        "scope": "string",
                        "type": "dataset"
                    }
                ]}
            headers = {
                "X-Rucio-Auth-Token": "REPLACE_KEY_VALUE",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'http://undefinedundefined/locks/bulk_locks_for_dids';

            let options = {
              method: 'POST',
              headers: {'X-Rucio-Auth-Token': 'REPLACE_KEY_VALUE', 'content-type': 'application/json'},
              body: '{"dids":[{"name":"string","scope":"string","type":"dataset"}]}'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /meta/{key}:
    post:
      description: Creates a new allowed key (value is NULL).
      parameters:
        - description: The name of the key.
          in: path
          name: key
          required: true
          schema:
            type: string
          style: simple
      requestBody:
        content:
          application/json:
            schema:
              properties:
                key_type:
                  description: The key tpye.
                  type: string
                value_regexp:
                  description: The value regexpression.
                  type: string
                value_type:
                  description: The value type.
                  type: string
              type: object
      responses:
        '201':
          content:
            application/json:
              schema:
                enum:
                  - Created
                type: string
          description: OK
        '400':
          description: Cannot decode json parameter list / Unsupported value type.
        '401':
          description: Invalid Auth Token.
        '409':
          description: Key already exists.
      summary: Create key
      tags:
        - Meta
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request POST \
              --url http://undefinedundefined/meta/{key} \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE' \
              --header 'content-type: application/json' \
              --data '{"key_type":"string","value_regexp":"string","value_type":"string"}'
        - lang: Python
          source: >-
            import requests


            url = "http://undefinedundefined/meta/{key}"


            payload = {
                "key_type": "string",
                "value_regexp": "string",
                "value_type": "string"
            }

            headers = {
                "X-Rucio-Auth-Token": "REPLACE_KEY_VALUE",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'http://undefinedundefined/meta/{key}';

            let options = {
              method: 'POST',
              headers: {'X-Rucio-Auth-Token': 'REPLACE_KEY_VALUE', 'content-type': 'application/json'},
              body: '{"key_type":"string","value_regexp":"string","value_type":"string"}'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /meta/{key}/:
    post:
      description: Creates a new value for a key.
      parameters:
        - description: The reference key.
          in: path
          name: key
          required: true
          schema:
            type: string
          style: simple
      requestBody:
        content:
          application/json:
            schema:
              properties:
                value:
                  description: The new value associated with a key.
                  type: string
              required:
                - value
              type: object
      responses:
        '201':
          content:
            application/json:
              schema:
                enum:
                  - Created
                type: string
          description: OK
        '400':
          description: Cannot decode json parameter list / Invalid value for key.
        '401':
          description: Invalid Auth Token
        '404':
          description: Key not found
        '409':
          description: Value already exists.
      summary: Create value for key
      tags:
        - Meta
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request POST \
              --url http://undefinedundefined/meta/{key}/ \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE' \
              --header 'content-type: application/json' \
              --data '{"value":"string"}'
        - lang: Python
          source: >-
            import requests


            url = "http://undefinedundefined/meta/{key}/"


            payload = {"value": "string"}

            headers = {
                "X-Rucio-Auth-Token": "REPLACE_KEY_VALUE",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'http://undefinedundefined/meta/{key}/';

            let options = {
              method: 'POST',
              headers: {'X-Rucio-Auth-Token': 'REPLACE_KEY_VALUE', 'content-type': 'application/json'},
              body: '{"value":"string"}'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
    get:
      description: List all values for a key.
      parameters:
        - description: The reference key.
          in: path
          name: key
          required: true
          schema:
            type: string
          style: simple
      responses:
        '200':
          content:
            application/json:
              schema:
                description: List of all key values.
                items:
                  description: A value associated with a key.
                  type: string
                type: array
          description: OK
        '401':
          description: Invalid Auth Token
        '406':
          description: Not acceptable
      summary: Get value for key
      tags:
        - Meta
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url http://undefinedundefined/meta/{key}/ \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: |-
            import requests

            url = "http://undefinedundefined/meta/{key}/"

            headers = {"X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"}

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url = 'http://undefinedundefined/meta/{key}/';


            let options = {method: 'GET', headers: {'X-Rucio-Auth-Token':
            'REPLACE_KEY_VALUE'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /ping:
    get:
      description: Ping the server and get data about it.
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  version:
                    description: The server version.
                    type: string
                type: object
          description: OK
        '406':
          description: Not acceptable
      summary: Ping
      tags:
        - Ping
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url http://undefinedundefined/ping \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: |-
            import requests

            url = "http://undefinedundefined/ping"

            headers = {"X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"}

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url = 'http://undefinedundefined/ping';


            let options = {method: 'GET', headers: {'X-Rucio-Auth-Token':
            'REPLACE_KEY_VALUE'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /redirect/{scope_name}/metalink:
    get:
      description: Get Metalink redirect.
      parameters:
        - description: The data identifier (scope)/(name).
          in: path
          name: scope_name
          required: true
          schema:
            type: string
          style: simple
        - description: The client ip.
          in: query
          name: ip
          required: false
          schema:
            type: string
          style: simple
        - in: query
          name: fqdn
          required: false
          schema:
            type: string
          style: simple
        - in: query
          name: site
          required: false
          schema:
            type: string
          style: simple
        - in: query
          name: schemes
          required: false
          schema:
            type: array
          style: simple
        - in: query
          name: select
          required: false
          schema:
            type: string
          style: simple
        - in: query
          name: sort
          required: false
          schema:
            type: string
          style: simple
      responses:
        '200':
          content:
            application/metalink4+xml:
              schema:
                description: The metalink file.
                type: string
          description: OK
        '401':
          description: Invalid Auth Token
        '404':
          description: Rse or did not found
        '406':
          description: Not acceptable
      summary: Metalink redirect
      tags:
        - Redirect
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'http://undefinedundefined/redirect/{scope_name}/metalink?ip=SOME_STRING_VALUE&fqdn=SOME_STRING_VALUE&site=SOME_STRING_VALUE&schemes=SOME_ARRAY_VALUE&select=SOME_STRING_VALUE&sort=SOME_STRING_VALUE' \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: >-
            import requests


            url = "http://undefinedundefined/redirect/{scope_name}/metalink"


            querystring =
            {"ip":"SOME_STRING_VALUE","fqdn":"SOME_STRING_VALUE","site":"SOME_STRING_VALUE","schemes":"SOME_ARRAY_VALUE","select":"SOME_STRING_VALUE","sort":"SOME_STRING_VALUE"}


            headers = {"X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'http://undefinedundefined/redirect/{scope_name}/metalink?ip=SOME_STRING_VALUE&fqdn=SOME_STRING_VALUE&site=SOME_STRING_VALUE&schemes=SOME_ARRAY_VALUE&select=SOME_STRING_VALUE&sort=SOME_STRING_VALUE';


            let options = {method: 'GET', headers: {'X-Rucio-Auth-Token':
            'REPLACE_KEY_VALUE'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /redirect/{scope_name}:
    get:
      description: Get the header redirect.
      parameters:
        - description: The data identifier (scope)/(name).
          in: path
          name: scope_name
          required: true
          schema:
            type: string
          style: simple
        - description: The client ip.
          in: query
          name: ip
          required: false
          schema:
            type: string
          style: simple
        - in: query
          name: fqdn
          required: false
          schema:
            type: string
          style: simple
        - in: query
          name: site
          required: false
          schema:
            type: string
          style: simple
        - in: query
          name: schemes
          required: false
          schema:
            type: array
          style: simple
        - in: query
          name: select
          required: false
          schema:
            type: string
          style: simple
        - in: query
          name: sort
          required: false
          schema:
            type: string
          style: simple
        - in: query
          name: rse
          required: false
          schema:
            type: string
          style: simple
      responses:
        '200':
          description: OK
        '303':
          content:
            application/json:
              schema:
                description: The redirect url.
                type: string
          description: OK
        '401':
          description: Invalid Auth Token
        '404':
          description: Rse or did not found
      summary: Header redirect
      tags:
        - Redirect
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'http://undefinedundefined/redirect/{scope_name}?ip=SOME_STRING_VALUE&fqdn=SOME_STRING_VALUE&site=SOME_STRING_VALUE&schemes=SOME_ARRAY_VALUE&select=SOME_STRING_VALUE&sort=SOME_STRING_VALUE&rse=SOME_STRING_VALUE' \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: >-
            import requests


            url = "http://undefinedundefined/redirect/{scope_name}"


            querystring =
            {"ip":"SOME_STRING_VALUE","fqdn":"SOME_STRING_VALUE","site":"SOME_STRING_VALUE","schemes":"SOME_ARRAY_VALUE","select":"SOME_STRING_VALUE","sort":"SOME_STRING_VALUE","rse":"SOME_STRING_VALUE"}


            headers = {"X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'http://undefinedundefined/redirect/{scope_name}?ip=SOME_STRING_VALUE&fqdn=SOME_STRING_VALUE&site=SOME_STRING_VALUE&schemes=SOME_ARRAY_VALUE&select=SOME_STRING_VALUE&sort=SOME_STRING_VALUE&rse=SOME_STRING_VALUE';


            let options = {method: 'GET', headers: {'X-Rucio-Auth-Token':
            'REPLACE_KEY_VALUE'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /replicas/list:
    post:
      description: List all replicas for a DID.
      parameters:
        - description: The client ip address.
          in: header
          name: X-Forwarded-For
          schema:
            type: string
        - description: The maximum number pfns per replica to return.
          in: query
          name: limit
          schema:
            type: integer
        - description: >-
            Requested sorting of the result, e.g., 'geoip', 'closeness',
            'dynamic', 'ranking', 'random'.
          in: query
          name: select
          schema:
            type: string
        - description: >-
            Requested sorting of the result, e.g., 'geoip', 'closeness',
            'dynamic', 'ranking', 'random'.
          in: query
          name: sort
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                all_states:
                  description: >-
                    Return all replicas whatever state they are in. Adds an
                    extra 'states' entry in the result dictionary.
                  type: boolean
                client_location:
                  description: The clients location.
                  type: string
                dids:
                  description: List of Dids.
                  items:
                    properties:
                      name:
                        description: The name of the did.
                        type: string
                      scope:
                        description: The scope of the did.
                        type: string
                    type: object
                  type: array
                domain:
                  description: >-
                    The network domain for the call, either None, 'wan' or
                    'lan'. None is fallback to 'wan', 'all' is both
                    ['lan','wan']
                  type: string
                ignore_availability:
                  description: If the availability should be ignored.
                  type: boolean
                nrandom:
                  description: The maximum number of replicas to return.
                  type: integer
                resolve_archives:
                  description: When set to True, find archives which contain the replicas.
                  type: boolean
                resolve_parents:
                  description: >-
                    When set to True, find all parent datasets which contain the
                    replicas.
                  type: boolean
                rse_expression:
                  description: The RSE expression to restrict on a list of RSEs.
                  type: string
                schemes:
                  description: A list of schemes to filter the replicas.
                  items:
                    type: string
                  type: array
                signature_lifetime:
                  description: >-
                    If supported, in seconds, restrict the lifetime of the
                    signed PFN.
                  type: integer
                sort:
                  description: >-
                    Requested sorting of the result, e.g., 'geoip', 'closeness',
                    'dynamic', 'ranking', 'random'.
                  type: string
                unavailable:
                  deprecated: true
                  description: If unavailable rse should be considered.
                  type: boolean
                updated_after:
                  description: >-
                    datetime object (UTC time), only return replicas updated
                    after this time
                  type: string
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  properties:
                    adler32:
                      description: The adler32 checksum.
                      type: string
                    bytes:
                      description: The size of the replica in bytes.
                      type: integer
                    md5:
                      description: The md5 checksum.
                      type: string
                    name:
                      description: The name of the replica.
                      type: string
                    pfns:
                      description: The pfns.
                      type: array
                    rses:
                      description: The RSESs.
                      type: array
                    scope:
                      description: The scope of the replica.
                      type: string
                  type: object
                type: array
            application/metalink4+xml:
              schema:
                properties:
                  adler32:
                    description: The adler32 checksum.
                    type: string
                  bytes:
                    description: The size of the replica in bytes.
                    type: integer
                  md5:
                    description: The md5 checksum.
                    type: string
                  name:
                    description: The name of the replica.
                    type: string
                  pfns:
                    description: The pfns.
                    type: array
                  rses:
                    description: The RSESs.
                    type: array
                  scope:
                    description: The scope of the replica.
                    type: string
                type: object
          description: OK
        '400':
          description: Cannot decode json parameter list.
        '401':
          description: Invalid Auth Token
        '404':
          description: Did not found.
        '406':
          description: Not acceptable
      summary: List Replicas
      tags:
        - Replicas
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request POST \
              --url 'http://undefinedundefined/replicas/list?limit=SOME_INTEGER_VALUE&select=SOME_STRING_VALUE&sort=SOME_STRING_VALUE' \
              --header 'X-Forwarded-For: SOME_STRING_VALUE' \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE' \
              --header 'content-type: application/json' \
              --data '{"all_states":true,"client_location":"string","dids":[{"name":"string","scope":"string"}],"domain":"string","ignore_availability":true,"nrandom":0,"resolve_archives":true,"resolve_parents":true,"rse_expression":"string","schemes":["string"],"signature_lifetime":0,"sort":"string","unavailable":true,"updated_after":"string"}'
        - lang: Python
          source: >-
            import requests


            url = "http://undefinedundefined/replicas/list"


            querystring =
            {"limit":"SOME_INTEGER_VALUE","select":"SOME_STRING_VALUE","sort":"SOME_STRING_VALUE"}


            payload = {
                "all_states": True,
                "client_location": "string",
                "dids": [
                    {
                        "name": "string",
                        "scope": "string"
                    }
                ],
                "domain": "string",
                "ignore_availability": True,
                "nrandom": 0,
                "resolve_archives": True,
                "resolve_parents": True,
                "rse_expression": "string",
                "schemes": ["string"],
                "signature_lifetime": 0,
                "sort": "string",
                "unavailable": True,
                "updated_after": "string"
            }

            headers = {
                "X-Forwarded-For": "SOME_STRING_VALUE",
                "X-Rucio-Auth-Token": "REPLACE_KEY_VALUE",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers, params=querystring)


            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'http://undefinedundefined/replicas/list?limit=SOME_INTEGER_VALUE&select=SOME_STRING_VALUE&sort=SOME_STRING_VALUE';


            let options = {
              method: 'POST',
              headers: {
                'X-Forwarded-For': 'SOME_STRING_VALUE',
                'X-Rucio-Auth-Token': 'REPLACE_KEY_VALUE',
                'content-type': 'application/json'
              },
              body: '{"all_states":true,"client_location":"string","dids":[{"name":"string","scope":"string"}],"domain":"string","ignore_availability":true,"nrandom":0,"resolve_archives":true,"resolve_parents":true,"rse_expression":"string","schemes":["string"],"signature_lifetime":0,"sort":"string","unavailable":true,"updated_after":"string"}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /replicas/{scope_name}:
    get:
      description: List all replicas for data identifiers.
      parameters:
        - description: The DID associated with the replicas.
          in: path
          name: scope_name
          required: true
          schema:
            type: string
          style: simple
        - description: The client ip
          in: header
          name: X-Forwarded-For
          schema:
            type: string
        - description: The schemes of the replicas.
          in: query
          name: schemes
          schema:
            type: string
        - description: The sorting algorithm.
          in: query
          name: select
          schema:
            enum:
              - geoip
              - closeness
              - dynamic
              - ranking
              - random
            type: string
        - description: The maximum number of replicas returned.
          in: query
          name: limit
          schema:
            type: integer
      responses:
        '200':
          content:
            application/x-json-stream:
              schema:
                description: A list with all replicas.
                items:
                  description: A replica. Possibly contains more information.
                  properties:
                    adler32:
                      description: The adler32 checksum of the replica.
                      type: string
                    bytes:
                      description: The size of the replica in bytes.
                      type: integer
                    md5:
                      description: The md5 checksum of the replica.
                      type: string
                    name:
                      description: The name of the replica.
                      type: string
                    pfns:
                      description: The pfns associated with the replica.
                      type: array
                    rses:
                      description: The rse associated with the replica.
                      type: string
                    scope:
                      description: The scope of the replica.
                      type: string
                  type: object
                type: array
          description: OK
        '401':
          description: Invalid Auth Token
        '404':
          description: Did not found
        '406':
          description: Not acceptable
      summary: Get Replicas
      tags:
        - Replicas
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'http://undefinedundefined/replicas/{scope_name}?schemes=SOME_STRING_VALUE&select=SOME_STRING_VALUE&limit=SOME_INTEGER_VALUE' \
              --header 'X-Forwarded-For: SOME_STRING_VALUE' \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: >-
            import requests


            url = "http://undefinedundefined/replicas/{scope_name}"


            querystring =
            {"schemes":"SOME_STRING_VALUE","select":"SOME_STRING_VALUE","limit":"SOME_INTEGER_VALUE"}


            headers = {
                "X-Forwarded-For": "SOME_STRING_VALUE",
                "X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"
            }


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'http://undefinedundefined/replicas/{scope_name}?schemes=SOME_STRING_VALUE&select=SOME_STRING_VALUE&limit=SOME_INTEGER_VALUE';


            let options = {
              method: 'GET',
              headers: {
                'X-Forwarded-For': 'SOME_STRING_VALUE',
                'X-Rucio-Auth-Token': 'REPLACE_KEY_VALUE'
              }
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /replicas/suspicious:
    post:
      description: Declare a list of suspicious replicas.
      requestBody:
        content:
          application/json:
            schema:
              properties:
                pfns:
                  description: The list of pfns.
                  items:
                    type: string
                  type: array
                reason:
                  description: The reason for the declaration.
                  type: string
              type: object
      responses:
        '201':
          content:
            application/json:
              schema:
                description: Returns the not declared files.
                type: array
          description: OK
        '400':
          description: Can not decode json parameter list.
        '404':
          description: Not found
        '406':
          description: Not acceptable
      summary: Declare Suspicious Replicas
      tags:
        - Replicas
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request POST \
              --url http://undefinedundefined/replicas/suspicious \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE' \
              --header 'content-type: application/json' \
              --data '{"pfns":["string"],"reason":"string"}'
        - lang: Python
          source: >-
            import requests


            url = "http://undefinedundefined/replicas/suspicious"


            payload = {
                "pfns": ["string"],
                "reason": "string"
            }

            headers = {
                "X-Rucio-Auth-Token": "REPLACE_KEY_VALUE",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'http://undefinedundefined/replicas/suspicious';

            let options = {
              method: 'POST',
              headers: {'X-Rucio-Auth-Token': 'REPLACE_KEY_VALUE', 'content-type': 'application/json'},
              body: '{"pfns":["string"],"reason":"string"}'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
    get:
      description: List the suspicious replicas on a list of RSEs.
      parameters:
        - description: The RSE expression to filter for.
          in: query
          name: rse_expression
          schema:
            type: string
        - description: Date to filter for.
          in: query
          name: younger_than
          schema:
            type: string
        - description: The maximum number of attempts to make.
          in: query
          name: nattempts
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  properties:
                    cnt:
                      description: The number of replicas.
                      type: integer
                    created_at:
                      description: The time when the replica was created.
                      type: string
                    name:
                      description: The name of the Replica.
                      type: string
                    rse:
                      description: The rse name.
                      type: string
                    rse_id:
                      description: The id of the rse.
                      type: string
                    scope:
                      description: The scope of the Replica.
                      type: string
                  type: object
                type: array
          description: OK
        '401':
          description: Invalid Auth Token
        '404':
          description: Not found
        '406':
          description: Not acceptable
      summary: List Suspicious Replicas
      tags:
        - Replicas
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'http://undefinedundefined/replicas/suspicious?rse_expression=SOME_STRING_VALUE&younger_than=SOME_STRING_VALUE&nattempts=SOME_INTEGER_VALUE' \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: >-
            import requests


            url = "http://undefinedundefined/replicas/suspicious"


            querystring =
            {"rse_expression":"SOME_STRING_VALUE","younger_than":"SOME_STRING_VALUE","nattempts":"SOME_INTEGER_VALUE"}


            headers = {"X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'http://undefinedundefined/replicas/suspicious?rse_expression=SOME_STRING_VALUE&younger_than=SOME_STRING_VALUE&nattempts=SOME_INTEGER_VALUE';


            let options = {method: 'GET', headers: {'X-Rucio-Auth-Token':
            'REPLACE_KEY_VALUE'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /replicas/bad/states:
    get:
      description: List the bad or suspicious replicas by states.
      parameters:
        - description: The state of the file.
          in: query
          name: state
          schema:
            enum:
              - SUSPICIOUS
              - BAD
            type: string
        - description: The rse name.
          in: query
          name: rse
          schema:
            type: string
        - description: Date to select bad replicas younger than this date.
          in: query
          name: younger_than
          schema:
            format: date-time
            type: string
        - description: Date to select bad replicas older than this date.
          in: query
          name: older_than
          schema:
            format: date-time
            type: string
        - description: The maximum number of replicas returned.
          in: query
          name: limit
          schema:
            type: integer
        - description: Flag to include pfns.
          in: query
          name: list_pfns
          schema:
            type: boolean
      responses:
        '200':
          content:
            application/x-json-stream:
              schema:
                description: A list of all result replicas.
                items:
                  oneOf:
                    - properties:
                        name:
                          description: The name of the replica.
                          type: string
                        scope:
                          description: The scope fo the replica.
                          type: string
                        type:
                          description: The type of the replica.
                          type: string
                      type: object
                    - properties:
                        created_at:
                          description: The date-time the replica was created.
                          format: date-time
                          type: string
                        name:
                          description: The name of the replica.
                          type: string
                        rse:
                          description: The name of the associated rse.
                          type: string
                        rse_id:
                          description: The id of the associated rse.
                          type: string
                        scope:
                          description: The scope fo the replica.
                          type: string
                        state:
                          description: The state of the replica.
                          type: string
                        updated_at:
                          description: The date-time the replica was updated.
                          format: date-time
                          type: string
                      type: object
                type: array
          description: OK
        '401':
          description: Invalid Auth Token
        '406':
          description: Not acceptable
      summary: List Bad Replicas By States
      tags:
        - Replicas
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'http://undefinedundefined/replicas/bad/states?state=SOME_STRING_VALUE&rse=SOME_STRING_VALUE&younger_than=SOME_STRING_VALUE&older_than=SOME_STRING_VALUE&limit=SOME_INTEGER_VALUE&list_pfns=SOME_BOOLEAN_VALUE' \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: >-
            import requests


            url = "http://undefinedundefined/replicas/bad/states"


            querystring =
            {"state":"SOME_STRING_VALUE","rse":"SOME_STRING_VALUE","younger_than":"SOME_STRING_VALUE","older_than":"SOME_STRING_VALUE","limit":"SOME_INTEGER_VALUE","list_pfns":"SOME_BOOLEAN_VALUE"}


            headers = {"X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'http://undefinedundefined/replicas/bad/states?state=SOME_STRING_VALUE&rse=SOME_STRING_VALUE&younger_than=SOME_STRING_VALUE&older_than=SOME_STRING_VALUE&limit=SOME_INTEGER_VALUE&list_pfns=SOME_BOOLEAN_VALUE';


            let options = {method: 'GET', headers: {'X-Rucio-Auth-Token':
            'REPLACE_KEY_VALUE'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /replicas/bad/summary:
    get:
      description: Return a summary of the bad replicas by incident.
      parameters:
        - description: The RSE expression.
          in: query
          name: rse_expression
          schema:
            type: string
        - description: The start date.
          in: query
          name: from_date
          schema:
            format: date-time
            type: string
        - description: The end date.
          in: query
          name: to_date
          schema:
            format: date-time
            type: string
      responses:
        '200':
          content:
            application/x-json-stream:
              schema:
                description: A list of summaries.
                items:
                  properties:
                    created_at:
                      description: The creation date-time.
                      format: date-time
                      type: string
                    reason:
                      description: The reason for the incident.
                      type: string
                    rse:
                      description: The name of the associated RSE.
                      type: string
                    rse_id:
                      description: The id of the associated RSE.
                      type: string
                  type: object
                type: array
          description: OK
        '401':
          description: Invalid Auth Token
        '406':
          description: Not acceptable
      summary: Bad Replicas Summary
      tags:
        - Replicas
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'http://undefinedundefined/replicas/bad/summary?rse_expression=SOME_STRING_VALUE&from_date=SOME_STRING_VALUE&to_date=SOME_STRING_VALUE' \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: >-
            import requests


            url = "http://undefinedundefined/replicas/bad/summary"


            querystring =
            {"rse_expression":"SOME_STRING_VALUE","from_date":"SOME_STRING_VALUE","to_date":"SOME_STRING_VALUE"}


            headers = {"X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'http://undefinedundefined/replicas/bad/summary?rse_expression=SOME_STRING_VALUE&from_date=SOME_STRING_VALUE&to_date=SOME_STRING_VALUE';


            let options = {method: 'GET', headers: {'X-Rucio-Auth-Token':
            'REPLACE_KEY_VALUE'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /replicas/bad/pfns:
    post:
      description: Declare a list of bad PFNs.
      requestBody:
        content:
          application/json:
            schema:
              properties:
                expires_at:
                  description: The expires at value. Only apply to TEMPORARY_UNAVAILABLE.
                  format: date-time
                  type: string
                pfns:
                  description: The list of pfns associated with the bad PFNs.
                  items:
                    type: string
                  type: array
                reason:
                  description: The reason for the change.
                  type: string
                state:
                  description: The state to set the PFNs to.
                  enum:
                    - BAD
                    - SUSPICIOUS
                    - TEMPORARY_UNAVAILABLE
                  type: string
              type: object
      responses:
        '201':
          description: Created
        '400':
          description: Cannot decode json parameter list.
        '401':
          description: Invalid Auth Token
        '404':
          description: Replica not found
        '409':
          description: Duplicate
      summary: Declare Bad PFNs
      tags:
        - Replicas
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request POST \
              --url http://undefinedundefined/replicas/bad/pfns \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE' \
              --header 'content-type: application/json' \
              --data '{"expires_at":"2019-08-24T14:15:22Z","pfns":["string"],"reason":"string","state":"BAD"}'
        - lang: Python
          source: >-
            import requests


            url = "http://undefinedundefined/replicas/bad/pfns"


            payload = {
                "expires_at": "2019-08-24T14:15:22Z",
                "pfns": ["string"],
                "reason": "string",
                "state": "BAD"
            }

            headers = {
                "X-Rucio-Auth-Token": "REPLACE_KEY_VALUE",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'http://undefinedundefined/replicas/bad/pfns';

            let options = {
              method: 'POST',
              headers: {'X-Rucio-Auth-Token': 'REPLACE_KEY_VALUE', 'content-type': 'application/json'},
              body: '{"expires_at":"2019-08-24T14:15:22Z","pfns":["string"],"reason":"string","state":"BAD"}'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /replicas/bad/dids:
    post:
      description: Declare a list of bad replicas by DID.
      requestBody:
        content:
          application/json:
            schema:
              properties:
                dids:
                  description: The list of dids associated with the bad replicas.
                  items:
                    properties:
                      name:
                        description: The name of the did.
                        type: string
                      scope:
                        description: The scope of the did.
                        type: string
                    type: object
                  type: array
                expires_at:
                  description: The expires at value.
                  format: date-time
                  type: string
                reason:
                  description: The reason for the change.
                  type: string
                rse:
                  description: The name of the rse.
                  type: string
              type: object
      responses:
        '201':
          content:
            application/json:
              schema:
                description: All files not declared as bad.
                items:
                  type: string
                type: array
          description: OK
        '400':
          description: Cannot decode json parameter list.
        '401':
          description: Invalid Auth Token
        '404':
          description: Not found
      summary: Mark Bad by DID
      tags:
        - Replicas
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request POST \
              --url http://undefinedundefined/replicas/bad/dids \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE' \
              --header 'content-type: application/json' \
              --data '{"dids":[{"name":"string","scope":"string"}],"expires_at":"2019-08-24T14:15:22Z","reason":"string","rse":"string"}'
        - lang: Python
          source: >-
            import requests


            url = "http://undefinedundefined/replicas/bad/dids"


            payload = {
                "dids": [
                    {
                        "name": "string",
                        "scope": "string"
                    }
                ],
                "expires_at": "2019-08-24T14:15:22Z",
                "reason": "string",
                "rse": "string"
            }

            headers = {
                "X-Rucio-Auth-Token": "REPLACE_KEY_VALUE",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'http://undefinedundefined/replicas/bad/dids';

            let options = {
              method: 'POST',
              headers: {'X-Rucio-Auth-Token': 'REPLACE_KEY_VALUE', 'content-type': 'application/json'},
              body: '{"dids":[{"name":"string","scope":"string"}],"expires_at":"2019-08-24T14:15:22Z","reason":"string","rse":"string"}'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /replicas/rse/{rse}:
    get:
      description: List dataset replicas per RSE.
      parameters:
        - description: The rse to filter for.
          in: path
          name: rse
          required: true
          schema:
            type: string
          style: simple
      responses:
        '200':
          content:
            application/x-json-stream:
              schema:
                description: A list of dataset replicas.
                items:
                  properties:
                    accessed_at:
                      description: The date-time the replica was accessed.
                      format: date-time
                      type: string
                    available_bytes:
                      description: The number of available bytes of the replica.
                      type: integer
                    available_length:
                      description: The available length of the replica.
                      type: integer
                    bytes:
                      description: The size of the replica.
                      type: integer
                    created_at:
                      description: The date-time the replica was created.
                      format: date-time
                      type: string
                    length:
                      description: The length of the replica.
                      type: integer
                    name:
                      description: The name of the replica.
                      type: string
                    rse:
                      description: The name of the associated RSE.
                      type: string
                    rse_id:
                      description: The id of the associated RSE.
                      type: string
                    scope:
                      description: The scope of the replica.
                      type: string
                    state:
                      description: The state of the replica.
                      type: string
                    updated_at:
                      description: The date-time the replica was updated.
                      format: date-time
                      type: string
                  type: object
                type: array
          description: OK
        '401':
          description: Invalid Auth Token
        '406':
          description: Not acceptable
      summary: List Dataset Replicas per RSE
      tags:
        - Replicas
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url http://undefinedundefined/replicas/rse/{rse} \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: |-
            import requests

            url = "http://undefinedundefined/replicas/rse/{rse}"

            headers = {"X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"}

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url = 'http://undefinedundefined/replicas/rse/{rse}';


            let options = {method: 'GET', headers: {'X-Rucio-Auth-Token':
            'REPLACE_KEY_VALUE'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /replicas/bad:
    post:
      description: Declares a list of bad replicas.
      requestBody:
        content:
          application/json:
            schema:
              properties:
                force:
                  description: >-
                    If true, ignore existing replica status in the bad_replicas
                    table.
                  type: boolean
                pfns:
                  deprecated: true
                  description: >-
                    The list of pfns, for backward compatibility with older
                    versions of the ReplicaClient
                  items:
                    type: string
                  type: array
                reason:
                  description: The reason for the declaration.
                  type: string
                replicas:
                  description: >-
                    The list of pfns or list of dicts with "scope", "name",
                    "rse_id"/"rse"
                  items:
                    type: string
                  type: array
              type: object
      responses:
        '201':
          content:
            application/json:
              schema:
                description: Returns the not declared files.
                type: array
          description: OK
        '400':
          description: Can not decode json parameter list.
        '404':
          description: Not found
        '406':
          description: Not acceptable
      summary: Declare Bad Replicas
      tags:
        - Replicas
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request POST \
              --url http://undefinedundefined/replicas/bad \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE' \
              --header 'content-type: application/json' \
              --data '{"force":true,"pfns":["string"],"reason":"string","replicas":["string"]}'
        - lang: Python
          source: >-
            import requests


            url = "http://undefinedundefined/replicas/bad"


            payload = {
                "force": True,
                "pfns": ["string"],
                "reason": "string",
                "replicas": ["string"]
            }

            headers = {
                "X-Rucio-Auth-Token": "REPLACE_KEY_VALUE",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'http://undefinedundefined/replicas/bad';

            let options = {
              method: 'POST',
              headers: {'X-Rucio-Auth-Token': 'REPLACE_KEY_VALUE', 'content-type': 'application/json'},
              body: '{"force":true,"pfns":["string"],"reason":"string","replicas":["string"]}'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /replicas/quarantine:
    post:
      description: Quarantine replicas.
      requestBody:
        content:
          application/json:
            schema:
              properties:
                replicas:
                  description: replicas
                  items:
                    properties:
                      name:
                        description: name
                        type: string
                      path:
                        description: path
                        type: string
                      scope:
                        description: scope
                        type: string
                    required:
                      - path
                    type: object
                  type: array
                rse:
                  description: RSE name
                  type: string
                rse_id:
                  description: RSE id
                  type: string
              required:
                - replicas
              type: object
      responses:
        '200':
          description: OK
        '403':
          description: Forbidden.
        '404':
          description: Not found
      summary: Quarantine replicas
      tags:
        - Replicas
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request POST \
              --url http://undefinedundefined/replicas/quarantine \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE' \
              --header 'content-type: application/json' \
              --data '{"replicas":[{"name":"string","path":"string","scope":"string"}],"rse":"string","rse_id":"string"}'
        - lang: Python
          source: >-
            import requests


            url = "http://undefinedundefined/replicas/quarantine"


            payload = {
                "replicas": [
                    {
                        "name": "string",
                        "path": "string",
                        "scope": "string"
                    }
                ],
                "rse": "string",
                "rse_id": "string"
            }

            headers = {
                "X-Rucio-Auth-Token": "REPLACE_KEY_VALUE",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'http://undefinedundefined/replicas/quarantine';

            let options = {
              method: 'POST',
              headers: {'X-Rucio-Auth-Token': 'REPLACE_KEY_VALUE', 'content-type': 'application/json'},
              body: '{"replicas":[{"name":"string","path":"string","scope":"string"}],"rse":"string","rse_id":"string"}'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /replicas/dids:
    post:
      description: List the DIDs associated to a list of replicas.
      requestBody:
        content:
          application/json:
            schema:
              properties:
                pfns:
                  description: The list of pfns.
                  items:
                    type: string
                  type: array
                rse:
                  description: The RSE name.
                  type: string
              required:
                - rse
              type: object
      responses:
        '200':
          content:
            application/x-json-stream:
              schema:
                items:
                  additionalProperties:
                    description: A mapping from a pfn to a did.
                    properties:
                      name:
                        description: The name of the DID.
                        type: string
                      scope:
                        description: The scope of the DID.
                        type: string
                    type: object
                    x-additionalPropertiesName: mapped PFNs to DIDs
                  type: object
                type: array
          description: OK
        '400':
          description: Cannot decode json parameter list.
        '401':
          description: Invalid Auth Token
        '404':
          description: Not found
        '406':
          description: Not acceptable
      summary: List Replicas Dids
      tags:
        - Replicas
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request POST \
              --url http://undefinedundefined/replicas/dids \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE' \
              --header 'content-type: application/json' \
              --data '{"pfns":["string"],"rse":"string"}'
        - lang: Python
          source: >-
            import requests


            url = "http://undefinedundefined/replicas/dids"


            payload = {
                "pfns": ["string"],
                "rse": "string"
            }

            headers = {
                "X-Rucio-Auth-Token": "REPLACE_KEY_VALUE",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'http://undefinedundefined/replicas/dids';

            let options = {
              method: 'POST',
              headers: {'X-Rucio-Auth-Token': 'REPLACE_KEY_VALUE', 'content-type': 'application/json'},
              body: '{"pfns":["string"],"rse":"string"}'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /replicas/{scope_name}/datasets:
    get:
      description: List dataset replicas.
      parameters:
        - description: data identifier (scope)/(name).
          in: path
          name: scope_name
          required: true
          schema:
            type: string
          style: simple
        - description: Flag to ennable lookup at the file level.
          in: query
          name: deep
          schema:
            type: boolean
      responses:
        '200':
          content:
            application/x-json-stream:
              schema:
                description: A list of dataset replicas.
                items:
                  properties:
                    accessed_at:
                      description: The date-time the replica was accessed.
                      format: date-time
                      type: string
                    available_bytes:
                      description: The number of available bytes of the replica.
                      type: integer
                    available_length:
                      description: The available length of the replica.
                      type: integer
                    bytes:
                      description: The size of the replica.
                      type: integer
                    created_at:
                      description: The date-time the replica was created.
                      format: date-time
                      type: string
                    length:
                      description: The length of the replica.
                      type: integer
                    name:
                      description: The name of the replica.
                      type: string
                    rse:
                      description: The name of the associated RSE.
                      type: string
                    rse_id:
                      description: The id of the associated RSE.
                      type: string
                    scope:
                      description: The scope of the replica.
                      type: string
                    state:
                      description: The state of the replica.
                      type: string
                    updated_at:
                      description: The date-time the replica was updated.
                      format: date-time
                      type: string
                  type: object
                type: array
          description: OK
        '401':
          description: Invalid Auth Token
        '404':
          description: Not found
        '406':
          description: Not acceptable
      summary: List Dataset Replicas
      tags:
        - Replicas
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'http://undefinedundefined/replicas/{scope_name}/datasets?deep=SOME_BOOLEAN_VALUE' \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: >-
            import requests


            url = "http://undefinedundefined/replicas/{scope_name}/datasets"


            querystring = {"deep":"SOME_BOOLEAN_VALUE"}


            headers = {"X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'http://undefinedundefined/replicas/{scope_name}/datasets?deep=SOME_BOOLEAN_VALUE';


            let options = {method: 'GET', headers: {'X-Rucio-Auth-Token':
            'REPLACE_KEY_VALUE'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /replicas/datasets_bulk:
    post:
      description: List dataset replicas for multiple dids.
      requestBody:
        content:
          application/json:
            schema:
              properties:
                dids:
                  description: A list of dids.
                  items:
                    description: A did.
                    properties:
                      name:
                        description: The name of the did.
                        type: string
                      scope:
                        description: The scope of the did.
                        type: string
                    type: object
                  type: array
              required:
                - dids
              type: object
      responses:
        '200':
          content:
            application/x-json-stream:
              schema:
                description: A list of dataset replicas.
                items:
                  properties:
                    accessed_at:
                      description: The date-time the replica was accessed.
                      format: date-time
                      type: string
                    available_bytes:
                      description: The number of available bytes of the replica.
                      type: integer
                    available_length:
                      description: The available length of the replica.
                      type: integer
                    bytes:
                      description: The size of the replica.
                      type: integer
                    created_at:
                      description: The date-time the replica was created.
                      format: date-time
                      type: string
                    length:
                      description: The length of the replica.
                      type: integer
                    name:
                      description: The name of the replica.
                      type: string
                    rse:
                      description: The name of the associated RSE.
                      type: string
                    rse_id:
                      description: The id of the associated RSE.
                      type: string
                    scope:
                      description: The scope of the replica.
                      type: string
                    state:
                      description: The state of the replica.
                      type: string
                    updated_at:
                      description: The date-time the replica was updated.
                      format: date-time
                      type: string
                  type: object
                type: array
          description: OK
        '400':
          description: Bad Request.
        '401':
          description: Invalid Auth Token
        '404':
          description: Not found
        '406':
          description: Not acceptable
      summary: List Dataset Replicas for Multiple DIDs
      tags:
        - Replicas
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request POST \
              --url http://undefinedundefined/replicas/datasets_bulk \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE' \
              --header 'content-type: application/json' \
              --data '{"dids":[{"name":"string","scope":"string"}]}'
        - lang: Python
          source: >-
            import requests


            url = "http://undefinedundefined/replicas/datasets_bulk"


            payload = {"dids": [
                    {
                        "name": "string",
                        "scope": "string"
                    }
                ]}
            headers = {
                "X-Rucio-Auth-Token": "REPLACE_KEY_VALUE",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'http://undefinedundefined/replicas/datasets_bulk';

            let options = {
              method: 'POST',
              headers: {'X-Rucio-Auth-Token': 'REPLACE_KEY_VALUE', 'content-type': 'application/json'},
              body: '{"dids":[{"name":"string","scope":"string"}]}'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /replicas/tombstone:
    post:
      description: Set a tombstone on a list of replicas.
      requestBody:
        content:
          application/json:
            schema:
              properties:
                replicas:
                  description: The replicas to set the tombstone to.
                  items:
                    properties:
                      name:
                        description: The name of the replica.
                        type: string
                      rse:
                        description: The rse associated with the tombstone.
                        type: string
                      scope:
                        description: The scope of the replica
                        type: string
                    required:
                      - rse
                      - scope
                      - name
                    type: object
                  type: array
              type: object
      responses:
        '201':
          description: Created
        '401':
          description: Invalid Auth Token
        '404':
          description: Not found
        '423':
          description: Replica is locked.
      summary: Set Tombstone
      tags:
        - Replicas
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request POST \
              --url http://undefinedundefined/replicas/tombstone \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE' \
              --header 'content-type: application/json' \
              --data '{"replicas":[{"name":"string","rse":"string","scope":"string"}]}'
        - lang: Python
          source: >-
            import requests


            url = "http://undefinedundefined/replicas/tombstone"


            payload = {"replicas": [
                    {
                        "name": "string",
                        "rse": "string",
                        "scope": "string"
                    }
                ]}
            headers = {
                "X-Rucio-Auth-Token": "REPLACE_KEY_VALUE",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'http://undefinedundefined/replicas/tombstone';

            let options = {
              method: 'POST',
              headers: {'X-Rucio-Auth-Token': 'REPLACE_KEY_VALUE', 'content-type': 'application/json'},
              body: '{"replicas":[{"name":"string","rse":"string","scope":"string"}]}'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /replicas/{scope_name}/datasets_vp:
    get:
      description: |
        List dataset replicas using the Virtual Placement service.
        This is an RnD function and might change or go away at any time.
      parameters:
        - description: data identifier (scope)/(name).
          in: path
          name: scope_name
          required: true
          schema:
            type: string
          style: simple
        - description: Flag to ennable lookup at the file level.
          in: query
          name: deep
          schema:
            type: boolean
      responses:
        '200':
          description: OK. This needs documentation!
        '401':
          description: Invalid Auth Token
        '406':
          description: Not acceptable
      summary: List Dataset Replicas VP
      tags:
        - Replicas
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'http://undefinedundefined/replicas/{scope_name}/datasets_vp?deep=SOME_BOOLEAN_VALUE' \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: >-
            import requests


            url = "http://undefinedundefined/replicas/{scope_name}/datasets_vp"


            querystring = {"deep":"SOME_BOOLEAN_VALUE"}


            headers = {"X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'http://undefinedundefined/replicas/{scope_name}/datasets_vp?deep=SOME_BOOLEAN_VALUE';


            let options = {method: 'GET', headers: {'X-Rucio-Auth-Token':
            'REPLACE_KEY_VALUE'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /requests/{scope_name}/{rse}:
    get:
      description: Get a request for a given DID to a destinaion RSE.
      parameters:
        - description: Data identifier (scope)/(name).
          in: path
          name: scope_name
          required: true
          schema:
            type: string
          style: simple
        - description: Destination rse.
          in: path
          name: rse
          required: true
          schema:
            type: string
          style: simple
      responses:
        '200':
          content:
            application/json:
              schema:
                description: The request associated with the DID and destination RSE.
                properties:
                  account:
                    description: The account which issued the request.
                    type: string
                  activity:
                    description: The activity of the request.
                    type: string
                  adler32:
                    description: The adler32 checksum of the did to transfer.
                    type: string
                  attributes:
                    description: All attributes associated with the request.
                    type: string
                  bytes:
                    description: The size of the did in bytes.
                    type: integer
                  dest_rse:
                    description: The name of the destination RSE.
                    type: string
                  dest_rse_id:
                    description: The destination RSE id.
                    type: string
                  dest_url:
                    description: The destination url.
                    type: string
                  did_type:
                    description: The did type.
                    type: string
                  err_msg:
                    description: An error message if one occured.
                    type: string
                  estimated_at:
                    description: The time the request got estimated.
                    type: string
                  estimated_stated_at:
                    description: The estimation of the started at value.
                    type: string
                  estimated_transferred_at:
                    description: The estimation of the transfered at value.
                    type: string
                  external_host:
                    description: External host of the request.
                    type: string
                  external_id:
                    description: External id of the request.
                    type: string
                  id:
                    description: The id of the request.
                    type: string
                  md5:
                    description: The md5 checksum of the did to transfer.
                    type: string
                  name:
                    description: The name of the transfer.
                    type: string
                  previous_attempt_id:
                    description: The id of the previous attempt.
                    type: string
                  priority:
                    description: The priority of the request.
                    type: integer
                  request_type:
                    description: The request type.
                    enum:
                      - T
                      - U
                      - D
                      - I
                      - O
                    type: string
                  requested_at:
                    description: The time the request got requested.
                    type: string
                  retry_count:
                    description: The numbers of attempted retires.
                    type: integer
                  rule_id:
                    description: The id of the associated replication rule.
                    type: string
                  scope:
                    description: The scope of the transfer.
                    type: string
                  source_rse:
                    description: The name of the source RSE.
                    type: string
                  source_rse_id:
                    description: The source RSE id.
                    type: string
                  staging_finished_at:
                    description: The time the staging got finished.
                    type: string
                  staging_started_at:
                    description: The time the staging got started.
                    type: string
                  started_at:
                    description: The time the request got started.
                    type: string
                  state:
                    description: The state of the request.
                    enum:
                      - Q
                      - G
                      - S
                      - F
                      - D
                      - L
                      - 'N'
                      - O
                      - A
                      - M
                      - U
                      - W
                      - P
                    type: string
                  submitted_at:
                    description: The time the request got submitted.
                    type: string
                  submitter_id:
                    description: The id of the submitter.
                    type: string
                  transferred_at:
                    description: The time the request got transfered.
                    type: string
                  transfertool:
                    description: The transfertool used.
                    type: string
                type: object
          description: OK
        '401':
          description: Invalid Auth Token
        '404':
          description: Not found
        '406':
          description: Not acceptable
      summary: Get Request
      tags:
        - Requests
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url http://undefinedundefined/requests/{scope_name}/{rse} \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: |-
            import requests

            url = "http://undefinedundefined/requests/{scope_name}/{rse}"

            headers = {"X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"}

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url = 'http://undefinedundefined/requests/{scope_name}/{rse}';


            let options = {method: 'GET', headers: {'X-Rucio-Auth-Token':
            'REPLACE_KEY_VALUE'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /requests/history/{scope_name}/{rse}:
    get:
      description: List a hostorical request for a given DID to a destination RSE.
      parameters:
        - description: Data identifier (scope)/(name).
          in: path
          name: scope_name
          required: true
          schema:
            type: string
          style: simple
        - description: Destination rse.
          in: path
          name: rse
          required: true
          schema:
            type: string
          style: simple
      responses:
        '200':
          content:
            application/json:
              schema:
                description: The request associated with the DID and destination RSE.
                properties:
                  account:
                    description: The account which issued the request.
                    type: string
                  activity:
                    description: The activity of the request.
                    type: string
                  adler32:
                    description: The adler32 checksum of the did to transfer.
                    type: string
                  attributes:
                    description: All attributes associated with the request.
                    type: string
                  bytes:
                    description: The size of the did in bytes.
                    type: integer
                  dest_rse:
                    description: The name of the destination RSE.
                    type: string
                  dest_rse_id:
                    description: The destination RSE id.
                    type: string
                  dest_url:
                    description: The destination url.
                    type: string
                  did_type:
                    description: The did type.
                    type: string
                  err_msg:
                    description: An error message if one occured.
                    type: string
                  estimated_at:
                    description: The time the request got estimated.
                    type: string
                  estimated_stated_at:
                    description: The estimation of the started at value.
                    type: string
                  estimated_transferred_at:
                    description: The estimation of the transfered at value.
                    type: string
                  external_host:
                    description: External host of the request.
                    type: string
                  external_id:
                    description: External id of the request.
                    type: string
                  id:
                    description: The id of the request.
                    type: string
                  md5:
                    description: The md5 checksum of the did to transfer.
                    type: string
                  name:
                    description: The name of the transfer.
                    type: string
                  previous_attempt_id:
                    description: The id of the previous attempt.
                    type: string
                  priority:
                    description: The priority of the request.
                    type: integer
                  request_type:
                    description: The request type.
                    enum:
                      - T
                      - U
                      - D
                      - I
                      - O
                    type: string
                  requested_at:
                    description: The time the request got requested.
                    type: string
                  retry_count:
                    description: The numbers of attempted retires.
                    type: integer
                  rule_id:
                    description: The id of the associated replication rule.
                    type: string
                  scope:
                    description: The scope of the transfer.
                    type: string
                  source_rse:
                    description: The name of the source RSE.
                    type: string
                  source_rse_id:
                    description: The source RSE id.
                    type: string
                  staging_finished_at:
                    description: The time the staging got finished.
                    type: string
                  staging_started_at:
                    description: The time the staging got started.
                    type: string
                  started_at:
                    description: The time the request got started.
                    type: string
                  state:
                    description: The state of the request.
                    enum:
                      - Q
                      - G
                      - S
                      - F
                      - D
                      - L
                      - 'N'
                      - O
                      - A
                      - M
                      - U
                      - W
                      - P
                    type: string
                  submitted_at:
                    description: The time the request got submitted.
                    type: string
                  submitter_id:
                    description: The id of the submitter.
                    type: string
                  transferred_at:
                    description: The time the request got transfered.
                    type: string
                  transfertool:
                    description: The transfertool used.
                    type: string
                type: object
          description: OK
        '401':
          description: Invalid Auth Token
        '404':
          description: Not found
        '406':
          description: Not acceptable
      summary: Get Historical Request
      tags:
        - Requests
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url http://undefinedundefined/requests/history/{scope_name}/{rse} \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: >-
            import requests


            url =
            "http://undefinedundefined/requests/history/{scope_name}/{rse}"


            headers = {"X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'http://undefinedundefined/requests/history/{scope_name}/{rse}';


            let options = {method: 'GET', headers: {'X-Rucio-Auth-Token':
            'REPLACE_KEY_VALUE'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /requests/list:
    get:
      description: List requests for a given source and destination RSE or site.
      parameters:
        - description: The source rse.
          in: query
          name: src_rse
          schema:
            items:
              properties:
                rse_id:
                  description: The id of the rse.
                  type: string
              required:
                - rse_id
              type: object
            type: array
        - description: The destination rse.
          in: query
          name: dest_rse
          schema:
            items:
              properties:
                rse_id:
                  description: The id of the rse.
                  type: string
              required:
                - rse_id
              type: object
            type: array
        - description: The source site.
          in: query
          name: src_site
          schema:
            type: string
        - description: The destination site.
          in: query
          name: dest_site
          schema:
            type: string
        - description: The accepted request states. Delimited by comma.
          in: query
          name: request_states
          schema:
            type: string
      responses:
        '200':
          content:
            application/x-json-stream:
              schema:
                description: >-
                  All requests matching the arguments. Seperated by the new line
                  character.
                items:
                  description: A request.
                  properties:
                    account:
                      description: The account which issued the request.
                      type: string
                    activity:
                      description: The activity of the request.
                      type: string
                    adler32:
                      description: The adler32 checksum of the did to transfer.
                      type: string
                    attributes:
                      description: All attributes associated with the request.
                      type: string
                    bytes:
                      description: The size of the did in bytes.
                      type: integer
                    dest_rse:
                      description: The name of the destination RSE.
                      type: string
                    dest_rse_id:
                      description: The destination RSE id.
                      type: string
                    dest_url:
                      description: The destination url.
                      type: string
                    did_type:
                      description: The did type.
                      type: string
                    err_msg:
                      description: An error message if one occured.
                      type: string
                    estimated_at:
                      description: The time the request got estimated.
                      type: string
                    estimated_stated_at:
                      description: The estimation of the started at value.
                      type: string
                    estimated_transferred_at:
                      description: The estimation of the transfered at value.
                      type: string
                    external_host:
                      description: External host of the request.
                      type: string
                    external_id:
                      description: External id of the request.
                      type: string
                    id:
                      description: The id of the request.
                      type: string
                    md5:
                      description: The md5 checksum of the did to transfer.
                      type: string
                    name:
                      description: The name of the transfer.
                      type: string
                    previous_attempt_id:
                      description: The id of the previous attempt.
                      type: string
                    priority:
                      description: The priority of the request.
                      type: integer
                    request_type:
                      description: The request type.
                      enum:
                        - T
                        - U
                        - D
                        - I
                        - O
                      type: string
                    requested_at:
                      description: The time the request got requested.
                      type: string
                    retry_count:
                      description: The numbers of attempted retires.
                      type: integer
                    rule_id:
                      description: The id of the associated replication rule.
                      type: string
                    scope:
                      description: The scope of the transfer.
                      type: string
                    source_rse:
                      description: The name of the source RSE.
                      type: string
                    source_rse_id:
                      description: The source RSE id.
                      type: string
                    staging_finished_at:
                      description: The time the staging got finished.
                      type: string
                    staging_started_at:
                      description: The time the staging got started.
                      type: string
                    started_at:
                      description: The time the request got started.
                      type: string
                    state:
                      description: The state of the request.
                      enum:
                        - Q
                        - G
                        - S
                        - F
                        - D
                        - L
                        - 'N'
                        - O
                        - A
                        - M
                        - U
                        - W
                        - P
                      type: string
                    submitted_at:
                      description: The time the request got submitted.
                      type: string
                    submitter_id:
                      description: The id of the submitter.
                      type: string
                    transferred_at:
                      description: The time the request got transfered.
                      type: string
                    transfertool:
                      description: The transfertool used.
                      type: string
                  type: object
                type: array
          description: OK
        '401':
          description: Invalid Auth Token
        '404':
          description: Not found
        '406':
          description: Not acceptable
      summary: List Historic Requests
      tags:
        - Requests
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'http://undefinedundefined/requests/list?src_rse=SOME_ARRAY_VALUE&dest_rse=SOME_ARRAY_VALUE&src_site=SOME_STRING_VALUE&dest_site=SOME_STRING_VALUE&request_states=SOME_STRING_VALUE' \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: >-
            import requests


            url = "http://undefinedundefined/requests/list"


            querystring =
            {"src_rse":"SOME_ARRAY_VALUE","dest_rse":"SOME_ARRAY_VALUE","src_site":"SOME_STRING_VALUE","dest_site":"SOME_STRING_VALUE","request_states":"SOME_STRING_VALUE"}


            headers = {"X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'http://undefinedundefined/requests/list?src_rse=SOME_ARRAY_VALUE&dest_rse=SOME_ARRAY_VALUE&src_site=SOME_STRING_VALUE&dest_site=SOME_STRING_VALUE&request_states=SOME_STRING_VALUE';


            let options = {method: 'GET', headers: {'X-Rucio-Auth-Token':
            'REPLACE_KEY_VALUE'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /requests/history/list:
    get:
      description: List historical requests for a given source and destination RSE or site.
      parameters:
        - description: The source rse.
          in: query
          name: src_rse
          schema:
            items:
              properties:
                rse_id:
                  description: The id of the rse.
                  type: string
              required:
                - rse_id
              type: object
            type: array
        - description: The destination rse.
          in: query
          name: dest_rse
          schema:
            items:
              properties:
                rse_id:
                  description: The id of the rse.
                  type: string
              required:
                - rse_id
              type: object
            type: array
        - description: The source site.
          in: query
          name: src_site
          schema:
            type: string
        - description: The destination site.
          in: query
          name: dest_site
          schema:
            type: string
        - description: The accepted request states. Delimited by comma.
          in: query
          name: request_states
          schema:
            type: string
        - description: The offset of the list.
          in: query
          name: offset
          schema:
            default: 0
            type: integer
        - description: The maximum number of items to return.
          in: query
          name: limit
          schema:
            default: 100
            type: integer
      responses:
        '200':
          content:
            application/x-json-stream:
              schema:
                description: >-
                  All requests matching the arguments. Seperated by a new line
                  character.
                items:
                  description: A request.
                  properties:
                    account:
                      description: The account which issued the request.
                      type: string
                    activity:
                      description: The activity of the request.
                      type: string
                    adler32:
                      description: The adler32 checksum of the did to transfer.
                      type: string
                    attributes:
                      description: All attributes associated with the request.
                      type: string
                    bytes:
                      description: The size of the did in bytes.
                      type: integer
                    dest_rse:
                      description: The name of the destination RSE.
                      type: string
                    dest_rse_id:
                      description: The destination RSE id.
                      type: string
                    dest_url:
                      description: The destination url.
                      type: string
                    did_type:
                      description: The did type.
                      type: string
                    err_msg:
                      description: An error message if one occured.
                      type: string
                    estimated_at:
                      description: The time the request got estimated.
                      type: string
                    estimated_stated_at:
                      description: The estimation of the started at value.
                      type: string
                    estimated_transferred_at:
                      description: The estimation of the transfered at value.
                      type: string
                    external_host:
                      description: External host of the request.
                      type: string
                    external_id:
                      description: External id of the request.
                      type: string
                    id:
                      description: The id of the request.
                      type: string
                    md5:
                      description: The md5 checksum of the did to transfer.
                      type: string
                    name:
                      description: The name of the transfer.
                      type: string
                    previous_attempt_id:
                      description: The id of the previous attempt.
                      type: string
                    priority:
                      description: The priority of the request.
                      type: integer
                    request_type:
                      description: The request type.
                      enum:
                        - T
                        - U
                        - D
                        - I
                        - O
                      type: string
                    requested_at:
                      description: The time the request got requested.
                      type: string
                    retry_count:
                      description: The numbers of attempted retires.
                      type: integer
                    rule_id:
                      description: The id of the associated replication rule.
                      type: string
                    scope:
                      description: The scope of the transfer.
                      type: string
                    source_rse:
                      description: The name of the source RSE.
                      type: string
                    source_rse_id:
                      description: The source RSE id.
                      type: string
                    staging_finished_at:
                      description: The time the staging got finished.
                      type: string
                    staging_started_at:
                      description: The time the staging got started.
                      type: string
                    started_at:
                      description: The time the request got started.
                      type: string
                    state:
                      description: The state of the request.
                      enum:
                        - Q
                        - G
                        - S
                        - F
                        - D
                        - L
                        - 'N'
                        - O
                        - A
                        - M
                        - U
                        - W
                        - P
                      type: string
                    submitted_at:
                      description: The time the request got submitted.
                      type: string
                    submitter_id:
                      description: The id of the submitter.
                      type: string
                    transferred_at:
                      description: The time the request got transfered.
                      type: string
                    transfertool:
                      description: The transfertool used.
                      type: string
                  type: object
                type: array
          description: OK
        '401':
          description: Invalid Auth Token
        '404':
          description: Not found
        '406':
          description: Not acceptable
      summary: List Historic Requests
      tags:
        - Requests
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'http://undefinedundefined/requests/history/list?src_rse=SOME_ARRAY_VALUE&dest_rse=SOME_ARRAY_VALUE&src_site=SOME_STRING_VALUE&dest_site=SOME_STRING_VALUE&request_states=SOME_STRING_VALUE&offset=SOME_INTEGER_VALUE&limit=SOME_INTEGER_VALUE' \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: >-
            import requests


            url = "http://undefinedundefined/requests/history/list"


            querystring =
            {"src_rse":"SOME_ARRAY_VALUE","dest_rse":"SOME_ARRAY_VALUE","src_site":"SOME_STRING_VALUE","dest_site":"SOME_STRING_VALUE","request_states":"SOME_STRING_VALUE","offset":"SOME_INTEGER_VALUE","limit":"SOME_INTEGER_VALUE"}


            headers = {"X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'http://undefinedundefined/requests/history/list?src_rse=SOME_ARRAY_VALUE&dest_rse=SOME_ARRAY_VALUE&src_site=SOME_STRING_VALUE&dest_site=SOME_STRING_VALUE&request_states=SOME_STRING_VALUE&offset=SOME_INTEGER_VALUE&limit=SOME_INTEGER_VALUE';


            let options = {method: 'GET', headers: {'X-Rucio-Auth-Token':
            'REPLACE_KEY_VALUE'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /rses/{rse}/attr/{key}:
    delete:
      description: Delete an RSE attribute for given RSE name.
      parameters:
        - description: The name of the Rucio Storage Element name.
          in: path
          name: rse
          required: true
          schema:
            type: string
          style: simple
        - description: The name of the attribute of the RSE.
          in: path
          name: key
          required: true
          schema:
            type: string
          style: simple
      responses:
        '200':
          description: OK
        '401':
          description: Invalid Auth Token
        '404':
          description: RSE or RSE attribute not found
      summary: Delete RSE Attribute
      tags:
        - Rucio Storage Elements
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url http://undefinedundefined/rses/{rse}/attr/{key} \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: |-
            import requests

            url = "http://undefinedundefined/rses/{rse}/attr/{key}"

            headers = {"X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"}

            response = requests.request("DELETE", url, headers=headers)

            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url = 'http://undefinedundefined/rses/{rse}/attr/{key}';


            let options = {method: 'DELETE', headers: {'X-Rucio-Auth-Token':
            'REPLACE_KEY_VALUE'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
    post:
      description: Create a RSE attribute with given RSE name.
      parameters:
        - description: The name of the Rucio Storage Element name.
          in: path
          name: rse
          required: true
          schema:
            type: string
          style: simple
        - description: The name of the attribute of the RSE.
          in: path
          name: key
          required: true
          schema:
            type: string
          style: simple
      requestBody:
        content:
          application/json:
            schema:
              properties:
                value:
                  description: The value of the RSE attribute.
                  type: string
              required:
                - value
              type: object
      responses:
        '201':
          content:
            application/json:
              schema:
                enum:
                  - Created
                type: string
          description: OK
        '400':
          description: Cannot decode json parameter dictionary
        '401':
          description: Invalid Auth Token
        '404':
          description: RSE not found
        '409':
          description: Attribute already exists
      summary: Create RSE Attribute
      tags:
        - Rucio Storage Elements
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request POST \
              --url http://undefinedundefined/rses/{rse}/attr/{key} \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE' \
              --header 'content-type: application/json' \
              --data '{"value":"string"}'
        - lang: Python
          source: >-
            import requests


            url = "http://undefinedundefined/rses/{rse}/attr/{key}"


            payload = {"value": "string"}

            headers = {
                "X-Rucio-Auth-Token": "REPLACE_KEY_VALUE",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'http://undefinedundefined/rses/{rse}/attr/{key}';

            let options = {
              method: 'POST',
              headers: {'X-Rucio-Auth-Token': 'REPLACE_KEY_VALUE', 'content-type': 'application/json'},
              body: '{"value":"string"}'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /rses/{source}/distances/{destination}:
    put:
      description: Update rse distance information.
      parameters:
        - description: The name of the source Rucio Storage Element.
          in: path
          name: source
          required: true
          schema:
            type: string
          style: simple
        - description: The name of the destination Rucio Storage Element.
          in: path
          name: destination
          required: true
          schema:
            type: string
          style: simple
      requestBody:
        content:
          application/json:
            schema:
              properties:
                distance:
                  description: The distance between the RSEs.
                  type: integer
                ranking:
                  deprecated: true
                  description: Same as distance.
                  type: integer
              type: object
      responses:
        '201':
          content:
            application/json:
              schema:
                enum:
                  - Created
                type: string
          description: OK
        '401':
          description: Invalid Auth Token
        '404':
          description: Rse not found
        '406':
          description: Not acceptable
      summary: Update Rse Distance
      tags:
        - Rucio Storage Elements
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request PUT \
              --url http://undefinedundefined/rses/{source}/distances/{destination} \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE' \
              --header 'content-type: application/json' \
              --data '{"distance":0,"ranking":0}'
        - lang: Python
          source: >-
            import requests


            url =
            "http://undefinedundefined/rses/{source}/distances/{destination}"


            payload = {
                "distance": 0,
                "ranking": 0
            }

            headers = {
                "X-Rucio-Auth-Token": "REPLACE_KEY_VALUE",
                "content-type": "application/json"
            }


            response = requests.request("PUT", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'http://undefinedundefined/rses/{source}/distances/{destination}';


            let options = {
              method: 'PUT',
              headers: {'X-Rucio-Auth-Token': 'REPLACE_KEY_VALUE', 'content-type': 'application/json'},
              body: '{"distance":0,"ranking":0}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
    delete:
      description: Delete distance information between source RSE and destination RSE.
      parameters:
        - description: The name of the source Rucio Storage Element.
          in: path
          name: source
          required: true
          schema:
            type: string
          style: simple
        - description: The name of the destination Rucio Storage Element.
          in: path
          name: destination
          required: true
          schema:
            type: string
          style: simple
      responses:
        '200':
          content:
            application/json:
              schema:
                enum:
                  - Deleted
                type: string
          description: OK
        '401':
          description: Invalid Auth Token
        '404':
          description: Rse not found
        '406':
          description: Not acceptable
      summary: Delete Rse Distance
      tags:
        - Rucio Storage Elements
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url http://undefinedundefined/rses/{source}/distances/{destination} \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: >-
            import requests


            url =
            "http://undefinedundefined/rses/{source}/distances/{destination}"


            headers = {"X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"}


            response = requests.request("DELETE", url, headers=headers)


            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'http://undefinedundefined/rses/{source}/distances/{destination}';


            let options = {method: 'DELETE', headers: {'X-Rucio-Auth-Token':
            'REPLACE_KEY_VALUE'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
    post:
      description: Post a rse distance.
      parameters:
        - description: The name of the source Rucio Storage Element.
          in: path
          name: source
          required: true
          schema:
            type: string
          style: simple
        - description: The name of the destination Rucio Storage Element.
          in: path
          name: destination
          required: true
          schema:
            type: string
          style: simple
      requestBody:
        content:
          application/json:
            schema:
              properties:
                distance:
                  description: The distance between RSEs.
                  type: integer
                ranking:
                  deprecated: true
                  description: Same as distance.
                  type: integer
              type: object
      responses:
        '201':
          content:
            application/json:
              schema:
                enum:
                  - Created
                type: string
          description: OK
        '401':
          description: Invalid Auth Token
        '404':
          description: Rse not found
        '406':
          description: Not acceptable
      summary: Create Rse Distance
      tags:
        - Rucio Storage Elements
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request POST \
              --url http://undefinedundefined/rses/{source}/distances/{destination} \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE' \
              --header 'content-type: application/json' \
              --data '{"distance":0,"ranking":0}'
        - lang: Python
          source: >-
            import requests


            url =
            "http://undefinedundefined/rses/{source}/distances/{destination}"


            payload = {
                "distance": 0,
                "ranking": 0
            }

            headers = {
                "X-Rucio-Auth-Token": "REPLACE_KEY_VALUE",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'http://undefinedundefined/rses/{source}/distances/{destination}';


            let options = {
              method: 'POST',
              headers: {'X-Rucio-Auth-Token': 'REPLACE_KEY_VALUE', 'content-type': 'application/json'},
              body: '{"distance":0,"ranking":0}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
    get:
      description: Returns the distances between a source and destination rse.
      parameters:
        - description: The name of the source Rucio Storage Element.
          in: path
          name: source
          required: true
          schema:
            type: string
          style: simple
        - description: The name of the destination Rucio Storage Element.
          in: path
          name: destination
          required: true
          schema:
            type: string
          style: simple
      responses:
        '200':
          content:
            application/json:
              schema:
                description: The distances between the Rses.
                items:
                  description: One distance betweeen source and destination.
                  properties:
                    dest_rse_id:
                      description: The destination rse id.
                      type: string
                    distance:
                      description: The distance between RSEs.
                      type: integer
                    ranking:
                      deprecated: true
                      description: Same as distance.
                      type: integer
                    src_rse_id:
                      description: The source rse id.
                      type: string
                  type: object
                type: array
          description: OK
        '401':
          description: Invalid Auth Token
        '404':
          description: Rse not found
        '406':
          description: Not acceptable
      summary: Get Rse Distances
      tags:
        - Rucio Storage Elements
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url http://undefinedundefined/rses/{source}/distances/{destination} \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: >-
            import requests


            url =
            "http://undefinedundefined/rses/{source}/distances/{destination}"


            headers = {"X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'http://undefinedundefined/rses/{source}/distances/{destination}';


            let options = {method: 'GET', headers: {'X-Rucio-Auth-Token':
            'REPLACE_KEY_VALUE'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /rses/{rse}/protocols/{scheme}/{hostname}/{port}:
    put:
      description: >-
        Updates attributes of an existing protocol entry. Because protocol
        identifier, hostname, and port are used as unique identifier they are
        immutable.
      parameters:
        - description: The name of the Rucio Storage Element name.
          in: path
          name: rse
          required: true
          schema:
            type: string
          style: simple
        - description: The protocol identifier.
          in: path
          name: scheme
          required: true
          schema:
            type: string
          style: simple
        - description: The hostname of the protocol.
          in: path
          name: hostname
          required: true
          schema:
            type: string
          style: simple
        - description: The port of the protocol.
          in: path
          name: port
          required: true
          schema:
            type: integer
          style: simple
      responses:
        '200':
          content:
            application/json:
              schema:
                description: A dict with RSE information and supported protocols.
                properties:
                  availability_delete:
                    description: The delete availability of the RSE.
                    type: boolean
                  availability_read:
                    description: The read availability of the RSE.
                    type: boolean
                  availability_write:
                    description: The write availability of the RSE.
                    type: boolean
                  credentials:
                    description: The credentials, currently None.
                    type: string
                  deterministic:
                    description: If the pfn is generated deterministicly.
                    type: boolean
                  domain:
                    description: The domains of the RSE protocols.
                    type: array
                  id:
                    description: The RSE id.
                    type: string
                  lfn2pfn_algorithm:
                    description: >-
                      The algorithm used to translate the logical file names to
                      the physical ones.
                    type: string
                  protocols:
                    description: All supported protocols of the RSE.
                    items:
                      description: A supported RSE protocol.
                      properties:
                        domains:
                          description: The domains of the protocol.
                          properties:
                            lan:
                              description: The lan domain
                              properties:
                                delete:
                                  description: The delete value of the lan protocol.
                                  type: integer
                                read:
                                  description: The read value of the lan protocol.
                                  type: integer
                                write:
                                  description: The write value of the lan protocol.
                                  type: integer
                              type: object
                            wan:
                              description: The wan domain
                              properties:
                                delete:
                                  description: The read value of the wan protocol.
                                  type: integer
                                read:
                                  description: The read value of the wan protocol.
                                  type: integer
                                third_party_copy_read:
                                  description: >-
                                    The third party copy read value of the wan
                                    protocol.
                                  type: integer
                                third_party_copy_write:
                                  description: >-
                                    The third party copy write value of the wan
                                    protocol.
                                  type: integer
                                write:
                                  description: The read value of the wan protocol.
                                  type: integer
                              type: object
                          type: object
                        extended_attributes:
                          description: The extended attributes of the protocol.
                          type: string
                        hostname:
                          description: The hostname of the protocol.
                          type: string
                        impl:
                          description: The implementation of the protocol.
                          type: string
                        port:
                          description: The port of the protocol.
                          type: integer
                        prefix:
                          description: The prefix of the protocol.
                          type: string
                        scheme:
                          description: The scheme of the protocol.
                          type: string
                      type: object
                    type: array
                  qos_class:
                    description: The qos class of the RSE.
                    type: string
                  rse:
                    description: The name of the RSE.
                    type: string
                  rse_type:
                    description: The rse type.
                    enum:
                      - DISK
                      - TAPE
                    type: string
                  sign_url:
                    description: The sign url of the RSE.
                    type: string
                  staging_area:
                    description: Staging area.
                    type: string
                  verify_checksum:
                    description: If the checksum of the files should be verified.
                    type: boolean
                  volatile:
                    description: RSE cache.
                    type: boolean
                type: object
          description: OK
        '401':
          description: Invalid Auth Token
        '404':
          description: RSE not found or Protocol or Protocol domain not Supported.
        '406':
          description: Not acceptable
      summary: Update Protocol Attributes
      tags:
        - Rucio Storage Elements
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request PUT \
              --url http://undefinedundefined/rses/{rse}/protocols/{scheme}/{hostname}/{port} \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: >-
            import requests


            url =
            "http://undefinedundefined/rses/{rse}/protocols/{scheme}/{hostname}/{port}"


            headers = {"X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"}


            response = requests.request("PUT", url, headers=headers)


            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'http://undefinedundefined/rses/{rse}/protocols/{scheme}/{hostname}/{port}';


            let options = {method: 'PUT', headers: {'X-Rucio-Auth-Token':
            'REPLACE_KEY_VALUE'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
    delete:
      description: Delete all protocol attibutes.
      parameters:
        - description: The name of the Rucio Storage Element name.
          in: path
          name: rse
          required: true
          schema:
            type: string
          style: simple
        - description: The protocol identifier.
          in: path
          name: scheme
          required: true
          schema:
            type: string
          style: simple
        - description: The hostname of the protocol.
          in: path
          name: hostname
          required: true
          schema:
            type: string
          style: simple
        - description: The port of the protocol.
          in: path
          name: port
          required: true
          schema:
            type: integer
          style: simple
      responses:
        '200':
          description: OK
        '401':
          description: Invalid Auth Token
        '404':
          description: Rse not found or protocol not supported
      summary: Delete Protocol Attributes
      tags:
        - Rucio Storage Elements
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url http://undefinedundefined/rses/{rse}/protocols/{scheme}/{hostname}/{port} \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: >-
            import requests


            url =
            "http://undefinedundefined/rses/{rse}/protocols/{scheme}/{hostname}/{port}"


            headers = {"X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"}


            response = requests.request("DELETE", url, headers=headers)


            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'http://undefinedundefined/rses/{rse}/protocols/{scheme}/{hostname}/{port}';


            let options = {method: 'DELETE', headers: {'X-Rucio-Auth-Token':
            'REPLACE_KEY_VALUE'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /rses/{rse}/protocols:
    get:
      description: List all supported protocols of the given RSE.
      parameters:
        - description: The name of the Rucio Storage Element name.
          in: path
          name: rse
          required: true
          schema:
            type: string
          style: simple
      responses:
        '200':
          content:
            application/json:
              schema:
                description: Supported RSE Protocols and other information.
                properties:
                  availability_delete:
                    description: The delete availability of the RSE.
                    type: boolean
                  availability_read:
                    description: The read availability of the RSE.
                    type: boolean
                  availability_write:
                    description: The write availability of the RSE.
                    type: boolean
                  credentials:
                    description: The credentials, currently None.
                    type: string
                  deterministic:
                    description: If the pfn is generated deterministicly.
                    type: boolean
                  domain:
                    description: The domains of the RSE protocols.
                    type: array
                  id:
                    description: The RSE id.
                    type: string
                  lfn2pfn_algorithm:
                    description: >-
                      The algorithm used to translate the logical file names to
                      the physical ones.
                    type: string
                  protocols:
                    description: All supported protocols of the RSE.
                    items:
                      description: A supported RSE protocol.
                      properties:
                        domains:
                          description: The domains of the protocol.
                          properties:
                            lan:
                              description: The lan domain
                              properties:
                                delete:
                                  description: The delete value of the lan protocol.
                                  type: integer
                                read:
                                  description: The read value of the lan protocol.
                                  type: integer
                                write:
                                  description: The write value of the lan protocol.
                                  type: integer
                              type: object
                            wan:
                              description: The wan domain
                              properties:
                                delete:
                                  description: The read value of the wan protocol.
                                  type: integer
                                read:
                                  description: The read value of the wan protocol.
                                  type: integer
                                third_party_copy_read:
                                  description: >-
                                    The third party copy read value of the wan
                                    protocol.
                                  type: integer
                                third_party_copy_write:
                                  description: >-
                                    The third party copy write value of the wan
                                    protocol.
                                  type: integer
                                write:
                                  description: The read value of the wan protocol.
                                  type: integer
                              type: object
                          type: object
                        extended_attributes:
                          description: The extended attributes of the protocol.
                          type: string
                        hostname:
                          description: The hostname of the protocol.
                          type: string
                        impl:
                          description: The implementation of the protocol.
                          type: string
                        port:
                          description: The port of the protocol.
                          type: integer
                        prefix:
                          description: The prefix of the protocol.
                          type: string
                        scheme:
                          description: The scheme of the protocol.
                          type: string
                      type: object
                    type: array
                  qos_class:
                    description: The qos class of the RSE.
                    type: string
                  rse:
                    description: The name of the RSE.
                    type: string
                  rse_type:
                    description: The rse type.
                    enum:
                      - DISK
                      - TAPE
                    type: string
                  sign_url:
                    description: The sign url of the RSE.
                    type: string
                  staging_area:
                    description: Staging area.
                    type: string
                  verify_checksum:
                    description: If the checksum of the files should be verified.
                    type: boolean
                  volatile:
                    description: RSE cache.
                    type: boolean
                type: object
          description: OK
        '401':
          description: Invalid Auth Token
        '404':
          description: >-
            RSE not found or RSE Operation, RSE Protocal Doman, RSE Protocol not
            supported
        '406':
          description: Not acceptable
      summary: List RSE Protocols
      tags:
        - Rucio Storage Elements
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url http://undefinedundefined/rses/{rse}/protocols \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: |-
            import requests

            url = "http://undefinedundefined/rses/{rse}/protocols"

            headers = {"X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"}

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url = 'http://undefinedundefined/rses/{rse}/protocols';


            let options = {method: 'GET', headers: {'X-Rucio-Auth-Token':
            'REPLACE_KEY_VALUE'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /rses/{rse}/lfns2pfns:
    get:
      description: >-
        Return PFNs for a set of LFNs.  Formatted as a JSON object where the key
        is a LFN and the value is the corresponding PFN.
      parameters:
        - description: The name of the Rucio Storage Element name.
          in: path
          name: rse
          required: true
          schema:
            type: string
          style: simple
        - description: The lfns of the request.
          in: query
          name: lfn
          required: true
          schema:
            type: string
        - description: >-
            Optional argument to help with the protocol selection (e.g., http /
            gsiftp / srm)
          in: query
          name: scheme
          schema:
            type: string
        - description: >-
            Optional argument used to select the protocol for wan or lan use
            cases.
          in: query
          name: domain
          schema:
            type: string
        - description: Optional query argument to select the protoco for read-vs-writes.
          in: query
          name: operation
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                additionalProperties:
                  type: string
                description: >-
                  The PFNs to the LFNs. Dictionary with lfns as keys and pfns as
                  values.
                type: object
          description: OK
        '401':
          description: Invalid Auth Token
        '404':
          description: RSE not found or RSE Protocol or RSE Protocl Domain not supported
        '406':
          description: Not acceptable
      summary: Translate LFNs to PFNs
      tags:
        - Rucio Storage Elements
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'http://undefinedundefined/rses/{rse}/lfns2pfns?lfn=SOME_STRING_VALUE&scheme=SOME_STRING_VALUE&domain=SOME_STRING_VALUE&operation=SOME_STRING_VALUE' \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: >-
            import requests


            url = "http://undefinedundefined/rses/{rse}/lfns2pfns"


            querystring =
            {"lfn":"SOME_STRING_VALUE","scheme":"SOME_STRING_VALUE","domain":"SOME_STRING_VALUE","operation":"SOME_STRING_VALUE"}


            headers = {"X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'http://undefinedundefined/rses/{rse}/lfns2pfns?lfn=SOME_STRING_VALUE&scheme=SOME_STRING_VALUE&domain=SOME_STRING_VALUE&operation=SOME_STRING_VALUE';


            let options = {method: 'GET', headers: {'X-Rucio-Auth-Token':
            'REPLACE_KEY_VALUE'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /rses/{rse}/accounts/usage:
    get:
      description: Returns the usage and limit of an account for a rse.
      parameters:
        - description: The name of the Rucio Storage Element name.
          in: path
          name: rse
          required: true
          schema:
            type: string
          style: simple
      responses:
        '200':
          content:
            application/json:
              schema:
                description: A list with the rse account limits and usages.
                items:
                  properties:
                    account:
                      description: The account.
                      type: string
                    quota_bytes:
                      description: The number of quota bytes.
                      type: integer
                    rse:
                      description: The name of the rse.
                      type: string
                    rse_id:
                      description: The id of the rse.
                      type: string
                    used_bytes:
                      description: The number of used bytes.
                      type: integer
                    used_files:
                      description: The number of used files.
                      type: integer
                  type: object
                type: array
          description: OK
        '401':
          description: Invalid Auth Token
        '404':
          description: Rse not found
        '406':
          description: Not acceptable
      summary: Get Rse Account Usage and Limit
      tags:
        - Rucio Storage Elements
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url http://undefinedundefined/rses/{rse}/accounts/usage \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: |-
            import requests

            url = "http://undefinedundefined/rses/{rse}/accounts/usage"

            headers = {"X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"}

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url = 'http://undefinedundefined/rses/{rse}/accounts/usage';


            let options = {method: 'GET', headers: {'X-Rucio-Auth-Token':
            'REPLACE_KEY_VALUE'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /rses/{rse}/usage:
    put:
      description: Update the RSE Update information.
      parameters:
        - description: The name of the Rucio Storage Element name.
          in: path
          name: rse
          required: true
          schema:
            type: string
          style: simple
      requestBody:
        content:
          application/json:
            schema:
              properties:
                files:
                  description: The number of files.
                  type: integer
                free:
                  description: The number of free bytes.
                  type: integer
                source:
                  description: The information source, e.g. srm.
                  type: string
                used:
                  description: The number of used bytes.
                  type: integer
              type: object
      responses:
        '200':
          description: OK
        '400':
          description: Can not decode json parameter list.
        '401':
          description: Invalid Auth Token
        '404':
          description: Rse not found
        '406':
          description: Not acceptable
      summary: Update Rse Usage
      tags:
        - Rucio Storage Elements
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request PUT \
              --url http://undefinedundefined/rses/{rse}/usage \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE' \
              --header 'content-type: application/json' \
              --data '{"files":0,"free":0,"source":"string","used":0}'
        - lang: Python
          source: >-
            import requests


            url = "http://undefinedundefined/rses/{rse}/usage"


            payload = {
                "files": 0,
                "free": 0,
                "source": "string",
                "used": 0
            }

            headers = {
                "X-Rucio-Auth-Token": "REPLACE_KEY_VALUE",
                "content-type": "application/json"
            }


            response = requests.request("PUT", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'http://undefinedundefined/rses/{rse}/usage';

            let options = {
              method: 'PUT',
              headers: {'X-Rucio-Auth-Token': 'REPLACE_KEY_VALUE', 'content-type': 'application/json'},
              body: '{"files":0,"free":0,"source":"string","used":0}'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
    get:
      description: Get rse usage information.
      parameters:
        - description: The name of the Rucio Storage Element name.
          in: path
          name: rse
          required: true
          schema:
            type: string
          style: simple
        - description: >-
            Boolean whether the usage should be also calculated per account or
            not.
          in: query
          name: per_account
          schema:
            type: boolean
        - description: The information source, e.g., srm.
          in: query
          name: source
          schema:
            type: string
      responses:
        '200':
          content:
            application/x-json-stream:
              schema:
                description: A list with the rse usage.
                items:
                  properties:
                    files:
                      description: The number of files.
                      type: integer
                    free:
                      description: The number of free bytes.
                      type: integer
                    rse:
                      description: The name of the rse.
                      type: string
                    rse_id:
                      description: The id of the rse.
                      type: string
                    source:
                      description: The source of the rse.
                      type: string
                    total:
                      description: The number of total bytes.
                      type: integer
                    updated_at:
                      description: The last time it got updated.
                      type: string
                    used:
                      description: The number of used bytes.
                      type: integer
                  type: object
                type: array
          description: OK
        '401':
          description: Invalid Auth Token
        '404':
          description: Rse not found
        '406':
          description: Not acceptable
      summary: Get Rse Usage Information
      tags:
        - Rucio Storage Elements
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'http://undefinedundefined/rses/{rse}/usage?per_account=SOME_BOOLEAN_VALUE&source=SOME_STRING_VALUE' \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: >-
            import requests


            url = "http://undefinedundefined/rses/{rse}/usage"


            querystring =
            {"per_account":"SOME_BOOLEAN_VALUE","source":"SOME_STRING_VALUE"}


            headers = {"X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'http://undefinedundefined/rses/{rse}/usage?per_account=SOME_BOOLEAN_VALUE&source=SOME_STRING_VALUE';


            let options = {method: 'GET', headers: {'X-Rucio-Auth-Token':
            'REPLACE_KEY_VALUE'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /rses/{rse}/usage/history:
    get:
      description: Get the rse usage history
      parameters:
        - description: The name of the Rucio Storage Element name.
          in: path
          name: rse
          required: true
          schema:
            type: string
          style: simple
      responses:
        '200':
          content:
            application/x-json-stream:
              schema:
                description: A list with the rse usage history items.
                items:
                  properties:
                    free:
                      description: The number of free bytes.
                      type: integer
                    rse:
                      description: The name of the rse.
                      type: string
                    rse_id:
                      description: The id of the rse.
                      type: string
                    source:
                      description: The source of the rse.
                      type: string
                    total:
                      description: The number of total bytes.
                      type: integer
                    updated_at:
                      description: The last time it got updated.
                      type: string
                    used:
                      description: The number of used bytes.
                      type: integer
                  type: object
                type: array
          description: OK
        '401':
          description: Invalid Auth Token
        '404':
          description: Rse not found
        '406':
          description: Not acceptable
      summary: Get Rse Usage History
      tags:
        - Rucio Storage Elements
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url http://undefinedundefined/rses/{rse}/usage/history \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: |-
            import requests

            url = "http://undefinedundefined/rses/{rse}/usage/history"

            headers = {"X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"}

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url = 'http://undefinedundefined/rses/{rse}/usage/history';


            let options = {method: 'GET', headers: {'X-Rucio-Auth-Token':
            'REPLACE_KEY_VALUE'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /rses/{rse}/limits:
    put:
      description: Update an rse limit.
      parameters:
        - description: The name of the Rucio Storage Element name.
          in: path
          name: rse
          required: true
          schema:
            type: string
          style: simple
      requestBody:
        content:
          application/json:
            schema:
              properties:
                name:
                  description: The name of the limit.
                  type: string
                value:
                  description: The value of the limit.
                  type: integer
              type: object
      responses:
        '200':
          description: OK
        '401':
          description: Invalid Auth Token
        '404':
          description: Rse not found
        '406':
          description: Not acceptable
      summary: Update Rse Limit
      tags:
        - Rucio Storage Elements
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request PUT \
              --url http://undefinedundefined/rses/{rse}/limits \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE' \
              --header 'content-type: application/json' \
              --data '{"name":"string","value":0}'
        - lang: Python
          source: >-
            import requests


            url = "http://undefinedundefined/rses/{rse}/limits"


            payload = {
                "name": "string",
                "value": 0
            }

            headers = {
                "X-Rucio-Auth-Token": "REPLACE_KEY_VALUE",
                "content-type": "application/json"
            }


            response = requests.request("PUT", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'http://undefinedundefined/rses/{rse}/limits';

            let options = {
              method: 'PUT',
              headers: {'X-Rucio-Auth-Token': 'REPLACE_KEY_VALUE', 'content-type': 'application/json'},
              body: '{"name":"string","value":0}'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
    delete:
      description: Delete an rse limit
      parameters:
        - description: The name of the Rucio Storage Element name.
          in: path
          name: rse
          required: true
          schema:
            type: string
          style: simple
      requestBody:
        content:
          application/json:
            schema:
              properties:
                name:
                  description: The name of the limit.
                  type: string
              required:
                - name
              type: object
      responses:
        '200':
          description: OK
        '401':
          description: Invalid Auth Token
        '404':
          description: Rse not found
        '406':
          description: Not acceptable
      summary: Delete Rse Limit
      tags:
        - Rucio Storage Elements
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url http://undefinedundefined/rses/{rse}/limits \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE' \
              --header 'content-type: application/json' \
              --data '{"name":"string"}'
        - lang: Python
          source: >-
            import requests


            url = "http://undefinedundefined/rses/{rse}/limits"


            payload = {"name": "string"}

            headers = {
                "X-Rucio-Auth-Token": "REPLACE_KEY_VALUE",
                "content-type": "application/json"
            }


            response = requests.request("DELETE", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'http://undefinedundefined/rses/{rse}/limits';

            let options = {
              method: 'DELETE',
              headers: {'X-Rucio-Auth-Token': 'REPLACE_KEY_VALUE', 'content-type': 'application/json'},
              body: '{"name":"string"}'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
    get:
      description: Get the rse limits.
      parameters:
        - description: The name of the Rucio Storage Element name.
          in: path
          name: rse
          required: true
          schema:
            type: string
          style: simple
      responses:
        '200':
          content:
            application/json:
              schema:
                additionalProperties:
                  description: An item with the name as key and the value as value.
                  type: integer
                  x-additionalPropertiesName: limit name
                description: The limits.
                type: object
          description: OK
        '401':
          description: Invalid Auth Token
        '404':
          description: Rse not found
        '406':
          description: Not acceptable
      summary: Get Rse Limits
      tags:
        - Rucio Storage Elements
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url http://undefinedundefined/rses/{rse}/limits \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: |-
            import requests

            url = "http://undefinedundefined/rses/{rse}/limits"

            headers = {"X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"}

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url = 'http://undefinedundefined/rses/{rse}/limits';


            let options = {method: 'GET', headers: {'X-Rucio-Auth-Token':
            'REPLACE_KEY_VALUE'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /rses/{rse}/qos_policy/{policy}:
    delete:
      description: Delete QoS policy from RSE.
      parameters:
        - description: The name of the Rucio Storage Element name.
          in: path
          name: rse
          required: true
          schema:
            type: string
          style: simple
        - description: The QoS policy to add to and rse.
          in: path
          name: policy
          required: true
          schema:
            type: string
          style: simple
      responses:
        '200':
          description: OK
        '401':
          description: Invalid Auth Token
        '404':
          description: Rse not found
        '406':
          description: Not acceptable
      summary: Delete QoS Policy
      tags:
        - Rucio Storage Elements
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url http://undefinedundefined/rses/{rse}/qos_policy/{policy} \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: |-
            import requests

            url = "http://undefinedundefined/rses/{rse}/qos_policy/{policy}"

            headers = {"X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"}

            response = requests.request("DELETE", url, headers=headers)

            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'http://undefinedundefined/rses/{rse}/qos_policy/{policy}';


            let options = {method: 'DELETE', headers: {'X-Rucio-Auth-Token':
            'REPLACE_KEY_VALUE'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
    post:
      description: Add a QoS Policy to a RSE.
      parameters:
        - description: The name of the Rucio Storage Element name.
          in: path
          name: rse
          required: true
          schema:
            type: string
          style: simple
        - description: The QoS policy to add to and rse.
          in: path
          name: policy
          required: true
          schema:
            type: string
          style: simple
      responses:
        '201':
          content:
            application/json:
              schema:
                enum:
                  - Created
                type: string
          description: OK
        '401':
          description: Invalid Auth Token
        '404':
          description: Rse not found
        '406':
          description: Not acceptable
      summary: Add QoS policy
      tags:
        - Rucio Storage Elements
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request POST \
              --url http://undefinedundefined/rses/{rse}/qos_policy/{policy} \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: |-
            import requests

            url = "http://undefinedundefined/rses/{rse}/qos_policy/{policy}"

            headers = {"X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"}

            response = requests.request("POST", url, headers=headers)

            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'http://undefinedundefined/rses/{rse}/qos_policy/{policy}';


            let options = {method: 'POST', headers: {'X-Rucio-Auth-Token':
            'REPLACE_KEY_VALUE'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /rses/{rse}:
    put:
      description: Update RSE properties.
      parameters:
        - description: The name of the Rucio Storage Element name.
          in: path
          name: rse
          required: true
          schema:
            type: string
          style: simple
      requestBody:
        content:
          application/json:
            schema:
              properties:
                availability_delete:
                  description: The vailability of the RSE.
                  type: boolean
                availability_read:
                  description: The vailability of the RSE.
                  type: boolean
                availability_write:
                  description: The vailability of the RSE.
                  type: boolean
                city:
                  description: The city of the RSE.
                  type: string
                country_name:
                  description: The country name of the RSE.
                  type: string
                deterministic:
                  description: If the pfn is generated deterministicly.
                  type: boolean
                latitute:
                  description: The latitute of the RSE.
                  type: number
                longitude:
                  description: The longitude of the RSE.
                  type: number
                region_code:
                  description: The region code of the RSE.
                  type: string
                rse_type:
                  description: The rse type.
                  enum:
                    - DISK
                    - TAPE
                  type: string
                staging_area:
                  description: Staging area.
                  type: string
                time_zone:
                  description: The time zone of the RSE.
                  type: string
                volatile:
                  description: RSE cache.
                  type: boolean
              type: object
      responses:
        '201':
          content:
            application/json:
              schema:
                enum:
                  - Created
                type: string
          description: OK
        '400':
          description: Cannot decode json parameter dictionary or invalid option provided
        '401':
          description: Invalid Auth Token
        '404':
          description: RSE not found
      summary: Update RSE
      tags:
        - Rucio Storage Elements
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request PUT \
              --url http://undefinedundefined/rses/{rse} \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE' \
              --header 'content-type: application/json' \
              --data '{"availability_delete":true,"availability_read":true,"availability_write":true,"city":"string","country_name":"string","deterministic":true,"latitute":0,"longitude":0,"region_code":"string","rse_type":"DISK","staging_area":"string","time_zone":"string","volatile":true}'
        - lang: Python
          source: >-
            import requests


            url = "http://undefinedundefined/rses/{rse}"


            payload = {
                "availability_delete": True,
                "availability_read": True,
                "availability_write": True,
                "city": "string",
                "country_name": "string",
                "deterministic": True,
                "latitute": 0,
                "longitude": 0,
                "region_code": "string",
                "rse_type": "DISK",
                "staging_area": "string",
                "time_zone": "string",
                "volatile": True
            }

            headers = {
                "X-Rucio-Auth-Token": "REPLACE_KEY_VALUE",
                "content-type": "application/json"
            }


            response = requests.request("PUT", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'http://undefinedundefined/rses/{rse}';

            let options = {
              method: 'PUT',
              headers: {'X-Rucio-Auth-Token': 'REPLACE_KEY_VALUE', 'content-type': 'application/json'},
              body: '{"availability_delete":true,"availability_read":true,"availability_write":true,"city":"string","country_name":"string","deterministic":true,"latitute":0,"longitude":0,"region_code":"string","rse_type":"DISK","staging_area":"string","time_zone":"string","volatile":true}'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
    delete:
      description: Disable a specific RSE.
      parameters:
        - description: The name of the Rucio Storage Element name.
          in: path
          name: rse
          required: true
          schema:
            type: string
          style: simple
      responses:
        '200':
          description: OK
        '401':
          description: Invalid Auth Token
        '404':
          description: RSE not found
      summary: Disable RSE
      tags:
        - Rucio Storage Elements
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url http://undefinedundefined/rses/{rse} \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: |-
            import requests

            url = "http://undefinedundefined/rses/{rse}"

            headers = {"X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"}

            response = requests.request("DELETE", url, headers=headers)

            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url = 'http://undefinedundefined/rses/{rse}';


            let options = {method: 'DELETE', headers: {'X-Rucio-Auth-Token':
            'REPLACE_KEY_VALUE'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
    post:
      description: Creates a RSE with all the metadata.
      parameters:
        - description: The name of the Rucio Storage Element name.
          in: path
          name: rse
          required: true
          schema:
            type: string
          style: simple
      requestBody:
        content:
          application/json:
            schema:
              properties:
                ASN:
                  description: The access service network of the RSE.
                  type: string
                ISP:
                  description: The internet service provider of the RSE.
                  type: string
                availability:
                  deprecated: true
                  description: The availability of the RSE.
                  type: integer
                availability_delete:
                  description: If the RSE is deletable.
                  type: boolean
                availability_read:
                  description: If the RSE is readable.
                  type: boolean
                availability_write:
                  description: If the RSE is writable.
                  type: boolean
                city:
                  description: The city of the RSE.
                  type: string
                continent:
                  description: The continent of the RSE.
                  type: string
                country_name:
                  description: The country name of the RSE.
                  type: string
                deterministic:
                  description: If the pfn is generated deterministicly.
                  type: boolean
                latitute:
                  description: The latitute of the RSE.
                  type: number
                longitude:
                  description: The longitude of the RSE.
                  type: number
                region_code:
                  description: The region code of the RSE.
                  type: string
                rse_type:
                  description: The rse type.
                  enum:
                    - DISK
                    - TAPE
                  type: string
                staging_area:
                  description: Staging area.
                  type: string
                time_zone:
                  description: The time zone of the RSE.
                  type: string
                volatile:
                  description: RSE cache.
                  type: boolean
              type: object
      responses:
        '201':
          content:
            application/json:
              schema:
                enum:
                  - Created
                type: string
          description: OK
        '400':
          description: Cannot decode json parameter dictionary
        '401':
          description: Invalid Auth Token
        '404':
          description: RSE not found
        '409':
          description: RSE already exists.
      summary: Create RSE
      tags:
        - Rucio Storage Elements
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request POST \
              --url http://undefinedundefined/rses/{rse} \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE' \
              --header 'content-type: application/json' \
              --data '{"ASN":"string","ISP":"string","availability":0,"availability_delete":true,"availability_read":true,"availability_write":true,"city":"string","continent":"string","country_name":"string","deterministic":true,"latitute":0,"longitude":0,"region_code":"string","rse_type":"DISK","staging_area":"string","time_zone":"string","volatile":true}'
        - lang: Python
          source: >-
            import requests


            url = "http://undefinedundefined/rses/{rse}"


            payload = {
                "ASN": "string",
                "ISP": "string",
                "availability": 0,
                "availability_delete": True,
                "availability_read": True,
                "availability_write": True,
                "city": "string",
                "continent": "string",
                "country_name": "string",
                "deterministic": True,
                "latitute": 0,
                "longitude": 0,
                "region_code": "string",
                "rse_type": "DISK",
                "staging_area": "string",
                "time_zone": "string",
                "volatile": True
            }

            headers = {
                "X-Rucio-Auth-Token": "REPLACE_KEY_VALUE",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'http://undefinedundefined/rses/{rse}';

            let options = {
              method: 'POST',
              headers: {'X-Rucio-Auth-Token': 'REPLACE_KEY_VALUE', 'content-type': 'application/json'},
              body: '{"ASN":"string","ISP":"string","availability":0,"availability_delete":true,"availability_read":true,"availability_write":true,"city":"string","continent":"string","country_name":"string","deterministic":true,"latitute":0,"longitude":0,"region_code":"string","rse_type":"DISK","staging_area":"string","time_zone":"string","volatile":true}'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
    get:
      description: Get details about a specific RSE.
      parameters:
        - description: The name of the Rucio Storage Element name.
          in: path
          name: rse
          required: true
          schema:
            type: string
          style: simple
      responses:
        '200':
          content:
            application/json:
              schema:
                description: The RSE properties.
                properties:
                  ASN:
                    description: The access service network of the RSE.
                    type: string
                  ISP:
                    description: The internet service provider of the RSE.
                    type: string
                  availability:
                    deprecated: true
                    description: The availability of the RSE.
                    type: integer
                  availability_delete:
                    description: If the RSE is deletable.
                  availability_read:
                    description: If the RSE is readable.
                    type: integer
                  availability_write:
                    description: If the RSE is writable.
                    type: integer
                  city:
                    description: The city of the RSE.
                    type: string
                  continent:
                    description: The continent of the RSE.
                    type: string
                  country_name:
                    description: The country name of the RSE.
                    type: string
                  deterministic:
                    description: If the pfn is generated deterministicly.
                    type: boolean
                  latitute:
                    description: The latitute of the RSE.
                    type: number
                  longitude:
                    description: The longitude of the RSE.
                    type: number
                  region_code:
                    description: The region code of the RSE.
                    type: string
                  rse_type:
                    description: The rse type.
                    enum:
                      - DISK
                      - TAPE
                    type: string
                  staging_area:
                    description: Staging area.
                    type: string
                  time_zone:
                    description: The time zone of the RSE.
                    type: string
                  volatile:
                    description: RSE cache.
                    type: boolean
                type: object
          description: OK
        '401':
          description: Invalid Auth Token
        '404':
          description: RSE not found
        '406':
          description: Not acceptable
      summary: Get RSE
      tags:
        - Rucio Storage Elements
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url http://undefinedundefined/rses/{rse} \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: |-
            import requests

            url = "http://undefinedundefined/rses/{rse}"

            headers = {"X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"}

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url = 'http://undefinedundefined/rses/{rse}';


            let options = {method: 'GET', headers: {'X-Rucio-Auth-Token':
            'REPLACE_KEY_VALUE'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /rses/:
    get:
      description: Lists all RSEs.
      requestBody:
        content:
          application/json:
            schema:
              properties:
                expression:
                  description: An RSE expression.
                  type: string
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                description: A list with the corresponding rses.
                items:
                  properties:
                    ASN:
                      description: The asn of the rse.
                      type: string
                    ISP:
                      description: The isp of the rse.
                      type: string
                    availability:
                      deprecated: true
                      description: The availability of the rse.
                      type: integer
                    availability_delete:
                      description: If the RSE is deletable.
                      type: integer
                    availability_read:
                      description: If the RSE is readable.
                      type: integer
                    availability_write:
                      description: If the RSE is writable.
                      type: integer
                    city:
                      description: The city of the rse.
                      type: string
                    continent:
                      description: The continent of the rse.
                      type: string
                    country_name:
                      description: The country name of the rse.
                      type: string
                    deterministic:
                      description: If the rse is deterministic.
                      type: boolean
                    id:
                      description: The rse id.
                      type: string
                    latitude:
                      description: The latitude of the rse.
                      type: number
                    longitude:
                      description: The longitude of the rse.
                      type: number
                    qos_class:
                      description: The quality of service class.
                      type: string
                    region_code:
                      description: The region_code of the rse.
                      type: string
                    rse:
                      description: The name of the rse.
                      type: string
                    rse_type:
                      description: The type of the rse.
                      type: string
                    staging_area:
                      description: Is this rse a staging area?
                      type: boolean
                    time_zone:
                      description: The time zone of the rse.
                      type: string
                    usage:
                      description: The usage of the rse.
                      type: integer
                    volatile:
                      description: If the rse is volatile.
                      type: boolean
                  type: object
                type: array
          description: OK
        '400':
          description: Invalid RSE expression
        '401':
          description: Invalid Auth Token
        '406':
          description: Not acceptable
      summary: List RSEs
      tags:
        - Rucio Storage Elements
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url http://undefinedundefined/rses/ \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE' \
              --header 'content-type: application/json' \
              --data '{"expression":"string"}'
        - lang: Python
          source: >-
            import requests


            url = "http://undefinedundefined/rses/"


            payload = {"expression": "string"}

            headers = {
                "X-Rucio-Auth-Token": "REPLACE_KEY_VALUE",
                "content-type": "application/json"
            }


            response = requests.request("GET", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'http://undefinedundefined/rses/';

            let options = {
              method: 'GET',
              headers: {'X-Rucio-Auth-Token': 'REPLACE_KEY_VALUE', 'content-type': 'application/json'},
              body: '{"expression":"string"}'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /rules/{rule_id}:
    put:
      parameters:
        - description: The id of the replication rule.
          in: path
          name: rule_id
          required: true
          schema:
            type: string
          style: simple
      requestBody:
        content:
          application/json:
            schema:
              properties:
                options:
                  description: The parameters to change.
                  properties:
                    account:
                      description: The account of the replication rule.
                      type: string
                    activity:
                      description: The activity of a replication rule.
                      type: string
                    boost_rule:
                      description: Boosts the processing of a rule.
                      type: object
                    cancel_requests:
                      description: Cancels all requests if used together with state.
                      type: boolean
                    child_rule_id:
                      description: >-
                        The child rule. Parent and child rule must be on the
                        same dataset.
                      type: string
                    comment:
                      description: The comment of the replication rule.
                      type: string
                    eol_at:
                      description: The end of life of a replication rule.
                      type: string
                    lifetime:
                      description: The time in which the rule will expire in seconds.
                      type: integer
                    locked:
                      description: The locked state of the replication rule.
                      type: boolean
                    meta:
                      description: The meta of a rule.
                      type: object
                    priority:
                      description: The priority of a rule.
                      type: integer
                    purge_replicas:
                      description: Purge replicas
                      type: boolean
                    source_replica_expression:
                      description: The source replica expression of a replication rule.
                      type: string
                    state:
                      description: The state of the replication rule.
                      type: string
                  type: object
              required:
                - options
              type: object
        description: Parameters for the new rule.
      responses:
        '200':
          description: OK
        '401':
          description: Invalid Auth Token
        '404':
          description: No rule found for the given id
      summary: Update the replication rules parameters
      tags:
        - Rule
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request PUT \
              --url http://undefinedundefined/rules/{rule_id} \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE' \
              --header 'content-type: application/json' \
              --data '{"options":{"account":"string","activity":"string","boost_rule":{},"cancel_requests":true,"child_rule_id":"string","comment":"string","eol_at":"string","lifetime":0,"locked":true,"meta":{},"priority":0,"purge_replicas":true,"source_replica_expression":"string","state":"string"}}'
        - lang: Python
          source: >-
            import requests


            url = "http://undefinedundefined/rules/{rule_id}"


            payload = {"options": {
                    "account": "string",
                    "activity": "string",
                    "boost_rule": {},
                    "cancel_requests": True,
                    "child_rule_id": "string",
                    "comment": "string",
                    "eol_at": "string",
                    "lifetime": 0,
                    "locked": True,
                    "meta": {},
                    "priority": 0,
                    "purge_replicas": True,
                    "source_replica_expression": "string",
                    "state": "string"
                }}
            headers = {
                "X-Rucio-Auth-Token": "REPLACE_KEY_VALUE",
                "content-type": "application/json"
            }


            response = requests.request("PUT", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'http://undefinedundefined/rules/{rule_id}';

            let options = {
              method: 'PUT',
              headers: {'X-Rucio-Auth-Token': 'REPLACE_KEY_VALUE', 'content-type': 'application/json'},
              body: '{"options":{"account":"string","activity":"string","boost_rule":{},"cancel_requests":true,"child_rule_id":"string","comment":"string","eol_at":"string","lifetime":0,"locked":true,"meta":{},"priority":0,"purge_replicas":true,"source_replica_expression":"string","state":"string"}}'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
    delete:
      parameters:
        - description: The id of the replication rule.
          in: path
          name: rule_id
          required: true
          schema:
            type: string
          style: simple
      responses:
        '200':
          description: OK
        '401':
          description: Invalid Auth Token
        '404':
          description: No rule found for the given id
      summary: Delete a replication rule
      tags:
        - Rule
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url http://undefinedundefined/rules/{rule_id} \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: |-
            import requests

            url = "http://undefinedundefined/rules/{rule_id}"

            headers = {"X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"}

            response = requests.request("DELETE", url, headers=headers)

            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url = 'http://undefinedundefined/rules/{rule_id}';


            let options = {method: 'DELETE', headers: {'X-Rucio-Auth-Token':
            'REPLACE_KEY_VALUE'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
    get:
      parameters:
        - description: The id of the replication rule.
          in: path
          name: rule_id
          required: true
          schema:
            type: string
          style: simple
      responses:
        '200':
          content:
            application/json:
              schema:
                type: string
          description: OK
        '401':
          description: Invalid Auth Token
        '404':
          description: No rule found for the given id
        '406':
          description: Not Acceptable
      summary: Return a Rule
      tags:
        - Rule
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url http://undefinedundefined/rules/{rule_id} \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: |-
            import requests

            url = "http://undefinedundefined/rules/{rule_id}"

            headers = {"X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"}

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url = 'http://undefinedundefined/rules/{rule_id}';


            let options = {method: 'GET', headers: {'X-Rucio-Auth-Token':
            'REPLACE_KEY_VALUE'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /rules/:
    post:
      requestBody:
        content:
          application/json:
            schema:
              properties:
                account:
                  description: The account of the issuer.
                  type: string
                activity:
                  description: Activity to be passed to the conveyor.
                  type: string
                ask_approval:
                  description: Ask for approval for this rule.
                  type: boolean
                asynchronous:
                  description: >-
                    Create replication rule asynchronously by the
                    judge-injector.
                  type: boolean
                comments:
                  description: Comment about the rule.
                  type: string
                copies:
                  description: The number of replicas.
                  type: integer
                dids:
                  description: The list of data identifiers.
                  items:
                    type: string
                  type: array
                grouping:
                  description: >-
                    The grouping of the files to take into account. (ALL,
                    DATASET, NONE)
                  type: string
                ignore_availability:
                  description: Option to ignore the availability of RSEs.
                  type: boolean
                lifetime:
                  description: The lifetime of the replication rule in seconds.
                  type: integer
                locked:
                  description: If the rule is locked.
                  type: boolean
                meta:
                  description: Dictionary with metadata from the WFMS.
                  type: string
                notify:
                  description: >-
                    Notification setting of the rule ('Y', 'N', 'C'; None =
                    'N').
                  type: string
                priority:
                  description: >-
                    Priority of the rule and the transfers which should be
                    submitted.
                  type: integer
                purge_replicas:
                  description: >-
                    Purge setting if a replica should be directly deleted after
                    the rule is deleted.
                  type: boolean
                rse_expression:
                  description: The rse expression which gets resolved into a list of RSEs.
                  type: string
                sourse_replica_expression:
                  description: Only use replicas as source from these RSEs.
                  type: string
                split_container:
                  description: >-
                    Should a container rule be split into individual dataset
                    rules.
                  type: boolean
                subscription_id:
                  description: >-
                    The subscription_id, if the rule is created by a
                    subscription.
                  type: string
                weight:
                  description: Weighting scheme to be used.
                  type: number
              required:
                - dids
                - account
                - copies
                - rse_expression
              type: object
        description: Parameters for the new rule.
      responses:
        '201':
          content:
            application/json:
              schema:
                items:
                  description: Id of each created rule.
                  type: string
                type: array
          description: Rule created.
        '401':
          description: Invalid Auth Token
        '404':
          description: No rule found for the given id
        '409':
          description: |-
            - Invalid Replication Rule
            - Duplicate Replication Rule
            - Insufficient Target RSEs
            - Insufficient Account Limit
            - Invalid RSE Expression
            - Replication Rule Creation Temporary Failed,
            - Invalid Rule Weight
            - Staging Area Rule Requires Lifetime
            - Scratch Disk Lifetime Conflict
            - Manual Rule Approval Blocked
            - Invalid Object
      summary: Create a new replication rule
      tags:
        - Rule
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request POST \
              --url http://undefinedundefined/rules/ \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE' \
              --header 'content-type: application/json' \
              --data '{"account":"string","activity":"string","ask_approval":true,"asynchronous":true,"comments":"string","copies":0,"dids":["string"],"grouping":"string","ignore_availability":true,"lifetime":0,"locked":true,"meta":"string","notify":"string","priority":0,"purge_replicas":true,"rse_expression":"string","sourse_replica_expression":"string","split_container":true,"subscription_id":"string","weight":0}'
        - lang: Python
          source: >-
            import requests


            url = "http://undefinedundefined/rules/"


            payload = {
                "account": "string",
                "activity": "string",
                "ask_approval": True,
                "asynchronous": True,
                "comments": "string",
                "copies": 0,
                "dids": ["string"],
                "grouping": "string",
                "ignore_availability": True,
                "lifetime": 0,
                "locked": True,
                "meta": "string",
                "notify": "string",
                "priority": 0,
                "purge_replicas": True,
                "rse_expression": "string",
                "sourse_replica_expression": "string",
                "split_container": True,
                "subscription_id": "string",
                "weight": 0
            }

            headers = {
                "X-Rucio-Auth-Token": "REPLACE_KEY_VALUE",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'http://undefinedundefined/rules/';

            let options = {
              method: 'POST',
              headers: {'X-Rucio-Auth-Token': 'REPLACE_KEY_VALUE', 'content-type': 'application/json'},
              body: '{"account":"string","activity":"string","ask_approval":true,"asynchronous":true,"comments":"string","copies":0,"dids":["string"],"grouping":"string","ignore_availability":true,"lifetime":0,"locked":true,"meta":"string","notify":"string","priority":0,"purge_replicas":true,"rse_expression":"string","sourse_replica_expression":"string","split_container":true,"subscription_id":"string","weight":0}'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
    get:
      responses:
        '200':
          content:
            application/json:
              schema:
                type: string
          description: OK
        '401':
          description: Invalid Auth Token
        '404':
          description: No rule found for the given id
        '406':
          description: Not Acceptable
      summary: Return all rules for a given account
      tags:
        - Rule
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url http://undefinedundefined/rules/ \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: |-
            import requests

            url = "http://undefinedundefined/rules/"

            headers = {"X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"}

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url = 'http://undefinedundefined/rules/';


            let options = {method: 'GET', headers: {'X-Rucio-Auth-Token':
            'REPLACE_KEY_VALUE'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /rules/{rule_id}/locks:
    get:
      parameters:
        - description: The id of the replication rule.
          in: path
          name: rule_id
          required: true
          schema:
            type: string
          style: simple
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  properties:
                    name:
                      description: The name of the lock.
                      type: string
                    rse:
                      description: Information about the rse of the lock.
                      type: object
                    rse_id:
                      description: The rse_id of the lock.
                      type: string
                    rule_id:
                      description: The rule_id of the lock.
                      type: string
                    scope:
                      description: The scope of the lock.
                      type: string
                    state:
                      description: The state of the lock.
                      type: string
                  type: object
                type: array
          description: OK
        '401':
          description: Invalid Auth Token
        '404':
          description: No rule found for the given id
        '406':
          description: Not Acceptable
      summary: Return all locks for a Rule
      tags:
        - Rule
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url http://undefinedundefined/rules/{rule_id}/locks \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: |-
            import requests

            url = "http://undefinedundefined/rules/{rule_id}/locks"

            headers = {"X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"}

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url = 'http://undefinedundefined/rules/{rule_id}/locks';


            let options = {method: 'GET', headers: {'X-Rucio-Auth-Token':
            'REPLACE_KEY_VALUE'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /rules/{rule_id}/reduce:
    post:
      parameters:
        - description: The id of the replication rule.
          in: path
          name: rule_id
          required: true
          schema:
            type: string
          style: simple
      requestBody:
        content:
          application/json:
            schema:
              properties:
                copies:
                  description: Number of copies to keep.
                  type: integer
              required:
                - copies
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  description: Rule id.
                  type: string
                type: array
          description: OK
        '401':
          description: Invalid Auth Token
        '404':
          description: No rule found for the given id
        '409':
          description: Rule replace failed.
      summary: Reduce a replication rule
      tags:
        - Rule
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request POST \
              --url http://undefinedundefined/rules/{rule_id}/reduce \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE' \
              --header 'content-type: application/json' \
              --data '{"copies":0}'
        - lang: Python
          source: >-
            import requests


            url = "http://undefinedundefined/rules/{rule_id}/reduce"


            payload = {"copies": 0}

            headers = {
                "X-Rucio-Auth-Token": "REPLACE_KEY_VALUE",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'http://undefinedundefined/rules/{rule_id}/reduce';

            let options = {
              method: 'POST',
              headers: {'X-Rucio-Auth-Token': 'REPLACE_KEY_VALUE', 'content-type': 'application/json'},
              body: '{"copies":0}'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /rules/{rule_id}/move:
    post:
      parameters:
        - description: The id of the replication rule.
          in: path
          name: rule_id
          required: true
          schema:
            type: string
          style: simple
      requestBody:
        content:
          application/json:
            schema:
              properties:
                activity:
                  description: The `activity` of the moved rule.
                  type: string
                rse_expression:
                  description: The new rse expression.
                  type: string
                rule_id:
                  description: >-
                    The rule_id of the rule to moves. If specified, overrides
                    the `rule_id` parameter.
                  type: string
                source_replica_expression:
                  description: The `source_replica_expression` of the moved rule.
                  type: string
              required:
                - rse_expression
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  description: Rule id.
                  type: string
                type: array
          description: OK
        '401':
          description: Invalid Auth Token
        '404':
          description: No rule found for the given id
        '409':
          description: Rule replace failed.
      summary: Move a replication Rule
      tags:
        - Rule
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request POST \
              --url http://undefinedundefined/rules/{rule_id}/move \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE' \
              --header 'content-type: application/json' \
              --data '{"activity":"string","rse_expression":"string","rule_id":"string","source_replica_expression":"string"}'
        - lang: Python
          source: >-
            import requests


            url = "http://undefinedundefined/rules/{rule_id}/move"


            payload = {
                "activity": "string",
                "rse_expression": "string",
                "rule_id": "string",
                "source_replica_expression": "string"
            }

            headers = {
                "X-Rucio-Auth-Token": "REPLACE_KEY_VALUE",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'http://undefinedundefined/rules/{rule_id}/move';

            let options = {
              method: 'POST',
              headers: {'X-Rucio-Auth-Token': 'REPLACE_KEY_VALUE', 'content-type': 'application/json'},
              body: '{"activity":"string","rse_expression":"string","rule_id":"string","source_replica_expression":"string"}'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /rules/{rule_id}/history:
    get:
      parameters:
        - description: The id of the replication rule.
          in: path
          name: rule_id
          required: true
          schema:
            type: string
          style: simple
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  description: Rule history object.
                  properties:
                    locks_ok_cnt:
                      description: The number of locks which are ok.
                      type: integer
                    locks_replicating_cnt:
                      description: The number of locks which are replicating.
                      type: integer
                    locks_stuck_cnt:
                      description: The number of locks which are stuck.
                      type: integer
                    state:
                      description: The state of the update.
                      type: string
                    updated_at:
                      description: The date of the update.
                      type: string
                  type: object
                type: array
          description: OK
        '401':
          description: Invalid Auth Token
        '404':
          description: No rule found for the given id
        '406':
          description: Not acceptable.
      summary: Get the history of a rule
      tags:
        - Rule
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url http://undefinedundefined/rules/{rule_id}/history \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: |-
            import requests

            url = "http://undefinedundefined/rules/{rule_id}/history"

            headers = {"X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"}

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url = 'http://undefinedundefined/rules/{rule_id}/history';


            let options = {method: 'GET', headers: {'X-Rucio-Auth-Token':
            'REPLACE_KEY_VALUE'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /rules/{scope_name}/history:
    get:
      parameters:
        - description: >-
            The data identifier of scope-name to retrieve the history from.
            ((scope)/(name))
          in: path
          name: scope_name
          required: true
          schema:
            type: string
          style: simple
      responses:
        '200':
          content:
            application/x-json-stream:
              schema:
                items:
                  description: Rule history object.
                  properties:
                    account:
                      description: The account who initiated the change.
                      type: string
                    created_at:
                      description: The date of the creation.
                      type: string
                    locks_ok_cnt:
                      description: The number of locks which are ok.
                      type: integer
                    locks_replicating_cnt:
                      description: The number of locks which are replicating.
                      type: integer
                    locks_stuck_cnt:
                      description: The number of locks which are stuck.
                      type: integer
                    rse_expression:
                      description: The rse expression.
                      type: string
                    rule_id:
                      description: The id of the rule.
                      type: string
                    state:
                      description: The state of the update.
                      type: string
                    updated_at:
                      description: The date of the update.
                      type: string
                  type: object
                type: array
          description: OK
        '401':
          description: Invalid Auth Token
        '406':
          description: Not acceptable.
      summary: Get the history of a DID
      tags:
        - Rule
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url http://undefinedundefined/rules/{scope_name}/history \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: |-
            import requests

            url = "http://undefinedundefined/rules/{scope_name}/history"

            headers = {"X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"}

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url = 'http://undefinedundefined/rules/{scope_name}/history';


            let options = {method: 'GET', headers: {'X-Rucio-Auth-Token':
            'REPLACE_KEY_VALUE'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /rules/{rule_id}/analysis:
    get:
      parameters:
        - description: The id of the replication rule.
          in: path
          name: rule_id
          required: true
          schema:
            type: string
          style: simple
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  rule_error:
                    description: The state of the rule.
                    type: string
                  transfers:
                    description: List of all transfer errors.
                    items:
                      properties:
                        attempts:
                          description: The number of attempts.
                          type: integer
                        last_error:
                          description: The last error that occured.
                          type: string
                        last_source:
                          description: The last source.
                          type: string
                        last_time:
                          description: The time of the last transfer.
                          type: string
                        name:
                          description: The name of the lock.
                          type: string
                        rse:
                          description: Information about the rse of the transfered lock.
                          type: object
                        rse_id:
                          description: The rse_id of the transfered lock.
                          type: string
                        scope:
                          description: The scope of the transfer.
                          type: string
                        sources:
                          description: All available rse sources.
                          type: array
                      type: object
                    type: array
                type: object
          description: OK
        '401':
          description: Invalid Auth Token
        '404':
          description: No rule found for the given id
        '406':
          description: Not acceptable.
      summary: Get the analysis of a rule
      tags:
        - Rule
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url http://undefinedundefined/rules/{rule_id}/analysis \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: |-
            import requests

            url = "http://undefinedundefined/rules/{rule_id}/analysis"

            headers = {"X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"}

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url = 'http://undefinedundefined/rules/{rule_id}/analysis';


            let options = {method: 'GET', headers: {'X-Rucio-Auth-Token':
            'REPLACE_KEY_VALUE'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /scopes/{account}/{scope}:
    post:
      description: Adds a new scope.
      parameters:
        - description: The account associated with the scope.
          in: path
          name: account
          required: true
          schema:
            type: string
          style: simple
        - description: The name of the scope.
          in: path
          name: scope
          required: true
          schema:
            type: string
          style: simple
      responses:
        '201':
          content:
            application/json:
              schema:
                enum:
                  - Created
                type: string
          description: OK
        '401':
          description: Invalid Auth Token
        '404':
          description: Account not found
        '409':
          description: Scope already exists
      summary: Add Scope
      tags:
        - Scopes
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request POST \
              --url http://undefinedundefined/scopes/{account}/{scope} \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: |-
            import requests

            url = "http://undefinedundefined/scopes/{account}/{scope}"

            headers = {"X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"}

            response = requests.request("POST", url, headers=headers)

            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url = 'http://undefinedundefined/scopes/{account}/{scope}';


            let options = {method: 'POST', headers: {'X-Rucio-Auth-Token':
            'REPLACE_KEY_VALUE'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /scopes/{account}/scopes:
    get:
      description: List all scopes for an account.
      parameters:
        - description: The account associated with the scope.
          in: path
          name: account
          required: true
          schema:
            type: string
          style: simple
      responses:
        '200':
          content:
            application/json:
              schema:
                description: All scopes for the account.
                items:
                  description: A scope for the account.
                  type: string
                type: array
          description: OK
        '401':
          description: Invalid Auth Token
        '404':
          description: Account not found or no scopes
        '406':
          description: Not acceptable
      summary: List Account Scopes
      tags:
        - Scopes
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url http://undefinedundefined/scopes/{account}/scopes \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: |-
            import requests

            url = "http://undefinedundefined/scopes/{account}/scopes"

            headers = {"X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"}

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url = 'http://undefinedundefined/scopes/{account}/scopes';


            let options = {method: 'GET', headers: {'X-Rucio-Auth-Token':
            'REPLACE_KEY_VALUE'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /subscriptions/Id/{subscription_id}:
    get:
      description: Retrieve a subscription matching the given subscription id.
      parameters:
        - description: The subscription id.
          in: path
          name: subscription_id
          required: true
          schema:
            type: string
          style: simple
      responses:
        '200':
          content:
            application/json:
              schema:
                description: The subscription.
                properties:
                  account:
                    description: The account for the subscription.
                    type: string
                  comments:
                    description: The comments for the subscription.
                    type: string
                  expired_at:
                    description: The date-time of the expiration for the subscription.
                    format: date-time
                    type: string
                  filter:
                    description: The filter for the subscription.
                    type: string
                  id:
                    description: The id of the subscription.
                    type: string
                  last_processed:
                    description: The time the subscription was processed last.
                    format: date-time
                    type: string
                  lifetime:
                    description: The lifetime for the subscription.
                    format: date-time
                    type: string
                  name:
                    description: The name of the subscription.
                    type: string
                  policyid:
                    description: The policyid for the subscription.
                    type: integer
                  replication_rules:
                    description: The replication rules for the subscription.
                    type: string
                  retroactive:
                    description: If the subscription is retroactive.
                    type: boolean
                  state:
                    description: The state of the subscription.
                    enum:
                      - A
                      - I
                      - 'N'
                      - U
                      - B
                    type: string
                type: object
          description: OK
        '401':
          description: Invalid Auth Token
        '404':
          description: Subscription not found
        '406':
          description: Not acceptable
      summary: Get Subscription from ID
      tags:
        - Replicas
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url http://undefinedundefined/subscriptions/Id/{subscription_id} \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: |-
            import requests

            url = "http://undefinedundefined/subscriptions/Id/{subscription_id}"

            headers = {"X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"}

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'http://undefinedundefined/subscriptions/Id/{subscription_id}';


            let options = {method: 'GET', headers: {'X-Rucio-Auth-Token':
            'REPLACE_KEY_VALUE'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /subscriptions/{account}/{name}/Rules/States:
    get:
      description: Return a summary of the states of all rules of a given subscription id.
      parameters:
        - description: The account name.
          in: path
          name: account
          required: true
          schema:
            type: string
          style: simple
        - description: The subscription name.
          in: path
          name: name
          required: true
          schema:
            type: string
          style: simple
      responses:
        '200':
          content:
            application/x-json-stream:
              schema:
                description: A list of rule states with counts for each subscription.
                items:
                  properties:
                    account:
                      description: The account for the subscription.
                      type: string
                    count:
                      description: The number of rules with that state.
                      type: integer
                    name:
                      description: The name of the subscription.
                      type: string
                    state:
                      description: The state of the rules.
                      enum:
                        - R
                        - O
                        - S
                        - U
                        - W
                        - I
                      type: string
                  type: object
                type: array
          description: OK
        '401':
          description: Invalid Auth Token
        '404':
          description: Not found
        '406':
          description: Not acceptable
      summary: Get states
      tags:
        - Replicas
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url http://undefinedundefined/subscriptions/{account}/{name}/Rules/States \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: >-
            import requests


            url =
            "http://undefinedundefined/subscriptions/{account}/{name}/Rules/States"


            headers = {"X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'http://undefinedundefined/subscriptions/{account}/{name}/Rules/States';


            let options = {method: 'GET', headers: {'X-Rucio-Auth-Token':
            'REPLACE_KEY_VALUE'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /subscriptions/{account}/{name}/Rules:
    get:
      description: Return all rules of a given subscription id.
      parameters:
        - description: The account name.
          in: path
          name: account
          required: true
          schema:
            type: string
          style: simple
        - description: The subscription name.
          in: path
          name: name
          required: true
          schema:
            type: string
          style: simple
        - description: The subscription state to filter for.
          in: query
          name: state
          schema:
            type: string
      responses:
        '200':
          content:
            application/x-json-stream:
              schema:
                description: A list with the associated replication rules.
                items:
                  description: A subscription rule.
                type: array
          description: OK
        '401':
          description: Invalid Auth Token
        '404':
          description: Rule or Subscription not found
        '406':
          description: Not acceptable
      summary: Get Replication Rules
      tags:
        - Replicas
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'http://undefinedundefined/subscriptions/{account}/{name}/Rules?state=SOME_STRING_VALUE' \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: >-
            import requests


            url =
            "http://undefinedundefined/subscriptions/{account}/{name}/Rules"


            querystring = {"state":"SOME_STRING_VALUE"}


            headers = {"X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'http://undefinedundefined/subscriptions/{account}/{name}/Rules?state=SOME_STRING_VALUE';


            let options = {method: 'GET', headers: {'X-Rucio-Auth-Token':
            'REPLACE_KEY_VALUE'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /subscriptions/{account}/{name}:
    put:
      description: Update an existing subscription.
      parameters:
        - description: The account name.
          in: path
          name: account
          required: true
          schema:
            type: string
          style: simple
        - description: The subscription name.
          in: path
          name: name
          required: true
          schema:
            type: string
          style: simple
      requestBody:
        content:
          application/json:
            schema:
              properties:
                options:
                  description: The values for the new subcription.
                  properties:
                    comments:
                      description: The comments for the subscription.
                      type: string
                    filter:
                      description: The filter for the subscription.
                      type: string
                    lifetime:
                      description: The lifetime for the subscription.
                      format: date-time
                      type: string
                    priority:
                      description: >-
                        The priority/policyid for the subscription. Stored as
                        policyid.
                      type: integer
                    replication_rules:
                      description: The replication rules for the subscription.
                      type: string
                    retroactive:
                      description: If the retroactive is actiavted for a subscription.
                      type: boolean
                  type: object
              required:
                - options
              type: object
      responses:
        '201':
          description: OK
        '400':
          description: Cannot decode json parameter list.
        '401':
          description: Invalid Auth Token
        '404':
          description: Not found
      summary: Update subscription
      tags:
        - Replicas
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request PUT \
              --url http://undefinedundefined/subscriptions/{account}/{name} \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE' \
              --header 'content-type: application/json' \
              --data '{"options":{"comments":"string","filter":"string","lifetime":"2019-08-24T14:15:22Z","priority":0,"replication_rules":"string","retroactive":true}}'
        - lang: Python
          source: >-
            import requests


            url = "http://undefinedundefined/subscriptions/{account}/{name}"


            payload = {"options": {
                    "comments": "string",
                    "filter": "string",
                    "lifetime": "2019-08-24T14:15:22Z",
                    "priority": 0,
                    "replication_rules": "string",
                    "retroactive": True
                }}
            headers = {
                "X-Rucio-Auth-Token": "REPLACE_KEY_VALUE",
                "content-type": "application/json"
            }


            response = requests.request("PUT", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'http://undefinedundefined/subscriptions/{account}/{name}';


            let options = {
              method: 'PUT',
              headers: {'X-Rucio-Auth-Token': 'REPLACE_KEY_VALUE', 'content-type': 'application/json'},
              body: '{"options":{"comments":"string","filter":"string","lifetime":"2019-08-24T14:15:22Z","priority":0,"replication_rules":"string","retroactive":true}}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
    post:
      description: Create a new subscription
      parameters:
        - description: The account name.
          in: path
          name: account
          required: true
          schema:
            type: string
          style: simple
        - description: The subscription name.
          in: path
          name: name
          required: true
          schema:
            type: string
          style: simple
      requestBody:
        content:
          application/json:
            schema:
              properties:
                options:
                  description: The values for the new subcription.
                  properties:
                    comments:
                      description: The comments for the subscription.
                      type: string
                    dry_run:
                      default: false
                      description: >-
                        The priority/policyid for the subscription. Stored as
                        policyid.
                      type: boolean
                    filter:
                      description: The filter for the subscription.
                      type: string
                    lifetime:
                      description: The lifetime for the subscription.
                      format: date-time
                      type: string
                    priority:
                      description: >-
                        The priority/policyid for the subscription. Stored as
                        policyid.
                      type: integer
                    replication_rules:
                      description: The replication rules for the subscription.
                      type: string
                    retroactive:
                      description: If the retroactive is actiavted for a subscription.
                      type: boolean
                  required:
                    - filter
                    - replication_rules
                    - comments
                    - lifetime
                    - retroactive
                  type: object
              required:
                - options
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                description: The subscription Id for the new subscription.
                type: string
          description: OK
        '400':
          description: Cannot decode json parameter list.
        '401':
          description: Invalid Auth Token
        '404':
          description: Not found
        '406':
          description: Not acceptable
      summary: Create subscription
      tags:
        - Replicas
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request POST \
              --url http://undefinedundefined/subscriptions/{account}/{name} \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE' \
              --header 'content-type: application/json' \
              --data '{"options":{"comments":"string","dry_run":false,"filter":"string","lifetime":"2019-08-24T14:15:22Z","priority":0,"replication_rules":"string","retroactive":true}}'
        - lang: Python
          source: >-
            import requests


            url = "http://undefinedundefined/subscriptions/{account}/{name}"


            payload = {"options": {
                    "comments": "string",
                    "dry_run": False,
                    "filter": "string",
                    "lifetime": "2019-08-24T14:15:22Z",
                    "priority": 0,
                    "replication_rules": "string",
                    "retroactive": True
                }}
            headers = {
                "X-Rucio-Auth-Token": "REPLACE_KEY_VALUE",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'http://undefinedundefined/subscriptions/{account}/{name}';


            let options = {
              method: 'POST',
              headers: {'X-Rucio-Auth-Token': 'REPLACE_KEY_VALUE', 'content-type': 'application/json'},
              body: '{"options":{"comments":"string","dry_run":false,"filter":"string","lifetime":"2019-08-24T14:15:22Z","priority":0,"replication_rules":"string","retroactive":true}}'
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
    get:
      description: Retrieve a subscription.
      parameters:
        - description: The account name.
          in: path
          name: account
          required: true
          schema:
            type: string
          style: simple
        - description: The subscription name.
          in: path
          name: name
          required: true
          schema:
            type: string
          style: simple
      responses:
        '200':
          content:
            application/x-json-stream:
              schema:
                description: A list of subscriptions.
                items:
                  description: A subscription.
                  properties:
                    account:
                      description: The account for the subscription.
                      type: string
                    comments:
                      description: The comments for the subscription.
                      type: string
                    expired_at:
                      description: The date-time of the expiration for the subscription.
                      format: date-time
                      type: string
                    filter:
                      description: The filter for the subscription.
                      type: string
                    id:
                      description: The id of the subscription.
                      type: string
                    last_processed:
                      description: The time the subscription was processed last.
                      format: date-time
                      type: string
                    lifetime:
                      description: The lifetime for the subscription.
                      format: date-time
                      type: string
                    name:
                      description: The name of the subscription.
                      type: string
                    policyid:
                      description: The policyid for the subscription.
                      type: integer
                    replication_rules:
                      description: The replication rules for the subscription.
                      type: string
                    retroactive:
                      description: If the subscription is retroactive.
                      type: boolean
                    state:
                      description: The state of the subscription.
                      enum:
                        - A
                        - I
                        - 'N'
                        - U
                        - B
                      type: string
                  type: object
                type: array
          description: OK
        '401':
          description: Invalid Auth Token
        '404':
          description: Subscription Not found
        '406':
          description: Not acceptable
      summary: Get Subscription
      tags:
        - Replicas
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url http://undefinedundefined/subscriptions/{account}/{name} \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: |-
            import requests

            url = "http://undefinedundefined/subscriptions/{account}/{name}"

            headers = {"X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"}

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url =
            'http://undefinedundefined/subscriptions/{account}/{name}';


            let options = {method: 'GET', headers: {'X-Rucio-Auth-Token':
            'REPLACE_KEY_VALUE'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /subscriptions/Name/{name}:
    get:
      description: Retrieve a subscription by name.
      parameters:
        - description: The subscription name.
          in: path
          name: name
          required: true
          schema:
            type: string
          style: simple
      responses:
        '200':
          content:
            application/x-json-stream:
              schema:
                description: A list of subscriptions.
                items:
                  description: A subscription.
                  properties:
                    account:
                      description: The account for the subscription.
                      type: string
                    comments:
                      description: The comments for the subscription.
                      type: string
                    expired_at:
                      description: The date-time of the expiration for the subscription.
                      format: date-time
                      type: string
                    filter:
                      description: The filter for the subscription.
                      type: string
                    id:
                      description: The id of the subscription.
                      type: string
                    last_processed:
                      description: The time the subscription was processed last.
                      format: date-time
                      type: string
                    lifetime:
                      description: The lifetime for the subscription.
                      format: date-time
                      type: string
                    name:
                      description: The name of the subscription.
                      type: string
                    policyid:
                      description: The policyid for the subscription.
                      type: integer
                    replication_rules:
                      description: The replication rules for the subscription.
                      type: string
                    retroactive:
                      description: If the subscription is retroactive.
                      type: boolean
                    state:
                      description: The state of the subscription.
                      enum:
                        - A
                        - I
                        - 'N'
                        - U
                        - B
                      type: string
                  type: object
                type: array
          description: OK
        '401':
          description: Invalid Auth Token
        '404':
          description: Not found
        '406':
          description: Not acceptable
      summary: Get Subscription by Name
      tags:
        - Replicas
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url http://undefinedundefined/subscriptions/Name/{name} \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: |-
            import requests

            url = "http://undefinedundefined/subscriptions/Name/{name}"

            headers = {"X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"}

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url = 'http://undefinedundefined/subscriptions/Name/{name}';


            let options = {method: 'GET', headers: {'X-Rucio-Auth-Token':
            'REPLACE_KEY_VALUE'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /tmp_dids:
    post:
      description: Bulk adds temporary data identifiers.
      requestBody:
        content:
          application/json:
            schema:
              description: A list of temporary dids.
              items:
                description: A temporary did.
                properties:
                  adler32:
                    description: The adler32 checksum of the DID.
                    type: string
                  bytes:
                    description: The size of the DID in bytes.
                    type: integer
                  events:
                    description: The events of the DID.
                    type: string
                  guid:
                    description: The guid of the DID.
                    type: string
                  md5:
                    description: The md5 checksum of the DID.
                    type: string
                  name:
                    description: The name of the DID.
                    type: string
                  offset:
                    description: The offset of the DID.
                    type: integer
                  parent_name:
                    description: The name of the parent.
                    type: string
                  parent_scope:
                    description: The parent scope.
                    type: string
                  path:
                    description: The path of the DID.
                    type: string
                  pfn:
                    description: The pfn of the DID.
                    type: string
                  rse:
                    description: The name of the RSE.
                    type: string
                  rse_id:
                    description: >-
                      The id of the RSE. Can be specified instead of the RSE
                      name.
                    type: string
                  scope:
                    description: The scope.
                    type: string
              type: array
      responses:
        '201':
          content:
            application/json:
              schema:
                enum:
                  - Created
                type: string
          description: Created
        '401':
          description: Invalid Auth Token
        '406':
          description: Not acceptable
      summary: Add Temporary Data Identifiers
      tags:
        - Temporary Data Identifiers
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request POST \
              --url http://undefinedundefined/tmp_dids \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE' \
              --header 'content-type: application/json' \
              --data '[{"adler32":"string","bytes":0,"events":"string","guid":"string","md5":"string","name":"string","offset":0,"parent_name":"string","parent_scope":"string","path":"string","pfn":"string","rse":"string","rse_id":"string","scope":"string"}]'
        - lang: Python
          source: >-
            import requests


            url = "http://undefinedundefined/tmp_dids"


            payload = [
                {
                    "adler32": "string",
                    "bytes": 0,
                    "events": "string",
                    "guid": "string",
                    "md5": "string",
                    "name": "string",
                    "offset": 0,
                    "parent_name": "string",
                    "parent_scope": "string",
                    "path": "string",
                    "pfn": "string",
                    "rse": "string",
                    "rse_id": "string",
                    "scope": "string"
                }
            ]

            headers = {
                "X-Rucio-Auth-Token": "REPLACE_KEY_VALUE",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'http://undefinedundefined/tmp_dids';

            let options = {
              method: 'POST',
              headers: {'X-Rucio-Auth-Token': 'REPLACE_KEY_VALUE', 'content-type': 'application/json'},
              body: '[{"adler32":"string","bytes":0,"events":"string","guid":"string","md5":"string","name":"string","offset":0,"parent_name":"string","parent_scope":"string","path":"string","pfn":"string","rse":"string","rse_id":"string","scope":"string"}]'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /traces/:
    post:
      description: >-
        Trace endpoint used by the pilot and CLI clients to post data access
        information.
      parameters:
        - in: header
          name: X-Forwarded-For
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              description: The trace information.
              type: object
      responses:
        '201':
          description: OK
        '400':
          description: Cannot decode json data.
      summary: Trace
      tags:
        - Trace
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request POST \
              --url http://undefinedundefined/traces/ \
              --header 'X-Forwarded-For: SOME_STRING_VALUE' \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE' \
              --header 'content-type: application/json' \
              --data '{}'
        - lang: Python
          source: >-
            import requests


            url = "http://undefinedundefined/traces/"


            payload = {}

            headers = {
                "X-Forwarded-For": "SOME_STRING_VALUE",
                "X-Rucio-Auth-Token": "REPLACE_KEY_VALUE",
                "content-type": "application/json"
            }


            response = requests.request("POST", url, json=payload,
            headers=headers)


            print(response.text)
        - lang: Node
          source: |-
            const fetch = require('node-fetch');

            let url = 'http://undefinedundefined/traces/';

            let options = {
              method: 'POST',
              headers: {
                'X-Forwarded-For': 'SOME_STRING_VALUE',
                'X-Rucio-Auth-Token': 'REPLACE_KEY_VALUE',
                'content-type': 'application/json'
              },
              body: '{}'
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /vos/{vo}/recover:
    post:
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request POST \
              --url http://undefinedundefined/vos/{vo}/recover \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: |-
            import requests

            url = "http://undefinedundefined/vos/{vo}/recover"

            headers = {"X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"}

            response = requests.request("POST", url, headers=headers)

            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url = 'http://undefinedundefined/vos/{vo}/recover';


            let options = {method: 'POST', headers: {'X-Rucio-Auth-Token':
            'REPLACE_KEY_VALUE'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /vos/{vo}:
    put:
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request PUT \
              --url http://undefinedundefined/vos/{vo} \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: |-
            import requests

            url = "http://undefinedundefined/vos/{vo}"

            headers = {"X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"}

            response = requests.request("PUT", url, headers=headers)

            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url = 'http://undefinedundefined/vos/{vo}';


            let options = {method: 'PUT', headers: {'X-Rucio-Auth-Token':
            'REPLACE_KEY_VALUE'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
    post:
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request POST \
              --url http://undefinedundefined/vos/{vo} \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: |-
            import requests

            url = "http://undefinedundefined/vos/{vo}"

            headers = {"X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"}

            response = requests.request("POST", url, headers=headers)

            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url = 'http://undefinedundefined/vos/{vo}';


            let options = {method: 'POST', headers: {'X-Rucio-Auth-Token':
            'REPLACE_KEY_VALUE'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
  /vos/:
    get:
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url http://undefinedundefined/vos/ \
              --header 'X-Rucio-Auth-Token: REPLACE_KEY_VALUE'
        - lang: Python
          source: |-
            import requests

            url = "http://undefinedundefined/vos/"

            headers = {"X-Rucio-Auth-Token": "REPLACE_KEY_VALUE"}

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Node
          source: >-
            const fetch = require('node-fetch');


            let url = 'http://undefinedundefined/vos/';


            let options = {method: 'GET', headers: {'X-Rucio-Auth-Token':
            'REPLACE_KEY_VALUE'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error('error:' + err));
security:
  - AuthToken: []

