(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{453:function(e,r,n){"use strict";n.d(r,"a",(function(){return p})),n.d(r,"b",(function(){return y}));var t=n(0),o=n.n(t);function i(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function c(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function s(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?c(Object(n),!0).forEach((function(r){i(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function u(e,r){if(null==e)return{};var n,t,o=function(e,r){if(null==e)return{};var n,t,o={},i=Object.keys(e);for(t=0;t<i.length;t++)n=i[t],r.indexOf(n)>=0||(o[n]=e[n]);return o}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)n=i[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var a=o.a.createContext({}),l=function(e){var r=o.a.useContext(a),n=r;return e&&(n="function"==typeof e?e(r):s(s({},r),e)),n},p=function(e){var r=l(e.components);return o.a.createElement(a.Provider,{value:r},e.children)},d={inlineCode:"code",wrapper:function(e){var r=e.children;return o.a.createElement(o.a.Fragment,{},r)}},f=o.a.forwardRef((function(e,r){var n=e.components,t=e.mdxType,i=e.originalType,c=e.parentName,a=u(e,["components","mdxType","originalType","parentName"]),p=l(n),f=t,y=p["".concat(c,".").concat(f)]||p[f]||d[f]||i;return n?o.a.createElement(y,s(s({ref:r},a),{},{components:n})):o.a.createElement(y,s({ref:r},a))}));function y(e,r){var n=arguments,t=r&&r.mdxType;if("string"==typeof e||t){var i=n.length,c=new Array(i);c[0]=f;var s={};for(var u in r)hasOwnProperty.call(r,u)&&(s[u]=r[u]);s.originalType=e,s.mdxType="string"==typeof e?e:t,c[1]=s;for(var a=2;a<i;a++)c[a]=n[a];return o.a.createElement.apply(null,c)}return o.a.createElement.apply(null,n)}f.displayName="MDXCreateElement"},72:function(e,r,n){"use strict";n.r(r),n.d(r,"frontMatter",(function(){return s})),n.d(r,"metadata",(function(){return u})),n.d(r,"toc",(function(){return a})),n.d(r,"default",(function(){return p}));var t=n(3),o=n(7),i=(n(0),n(453)),c=["components"],s={title:"rucio-conveyor-stager"},u={unversionedId:"bin/rucio-conveyor-stager",id:"bin/rucio-conveyor-stager",isDocsHomePage:!1,title:"rucio-conveyor-stager",description:"`",source:"@site/../docs/bin/rucio-conveyor-stager.md",sourceDirName:"bin",slug:"/bin/rucio-conveyor-stager",permalink:"/documentation/bin/rucio-conveyor-stager",editUrl:"https://github.com/rucio/documentation/tree/main/docs/../docs/bin/rucio-conveyor-stager.md",version:"current",frontMatter:{title:"rucio-conveyor-stager"},sidebar:"docs",previous:{title:"rucio-conveyor-receiver",permalink:"/documentation/bin/rucio-conveyor-receiver"},next:{title:"rucio-conveyor-submitter",permalink:"/documentation/bin/rucio-conveyor-submitter"}},a=[],l={toc:a};function p(e){var r=e.components,n=Object(o.a)(e,c);return Object(i.b)("wrapper",Object(t.a)({},l,n,{components:r,mdxType:"MDXLayout"}),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"usage: rucio-conveyor-stager [-h] [--run-once] [--total-threads TOTAL_THREADS]\n                             [--bulk BULK] [--group-bulk GROUP_BULK]\n                             [--group-policy GROUP_POLICY]\n                             [--source-strategy SOURCE_STRATEGY]\n                             [--exclude-rses EXCLUDE_RSES]\n                             [--include-rses INCLUDE_RSES]\n                             [--rses RSES [RSES ...]] [--vos VOS [VOS ...]]\n                             [--activities ACTIVITIES [ACTIVITIES ...]]\n                             [--sleep-time SLEEP_TIME]\n\nThe conveyor-stager is responsible for issuing staging requests to the tape\nsystem.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --run-once            One iteration only\n  --total-threads TOTAL_THREADS\n                        Concurrency control: total number of threads per\n                        process\n  --bulk BULK           Bulk control: number of requests\n  --group-bulk GROUP_BULK\n                        Group control: number of requests per group\n  --group-policy GROUP_POLICY\n                        Group control: policy used to group. enum{rule, dest,\n                        src_dest, rule_src_dest}\n  --source-strategy SOURCE_STRATEGY\n                        Source strategy. Overload the strategy defined in\n                        config DB.\n  --exclude-rses EXCLUDE_RSES\n                        RSE expression to exclude\n  --include-rses INCLUDE_RSES\n                        RSE expression to include\n  --rses RSES [RSES ...]\n                        Explicit list of RSEs to include\n  --vos VOS [VOS ...]   Optional list of VOs to consider. Only used in multi-\n                        VO mode.\n  --activities ACTIVITIES [ACTIVITIES ...]\n                        Explicit list of activities to include\n  --sleep-time SLEEP_TIME\n                        Seconds to sleep if few requests\n")))}p.isMDXComponent=!0}}]);